// lib/n8nWorkflowExecutor.ts
import { N8N_CONFIG, N8N_WORKFLOW_IDS } from './n8nConfig'
import { executeN8NWorkflow } from './n8nApi'

export interface WorkflowRequest {
  userProfile: {
    name: string
    birthDate: string
    birthTime: string
    birthPlace: {
      name: string
      latitude: number
      longitude: number
    }
  }
  scenario: 'free' | 'premium'
  options: {
    includeDetailedAnalysis?: boolean
    includeQuickInsights?: boolean
    includeRecommendations?: boolean
    includeComparisons?: boolean
  }
  requestId: string
  timestamp: string
}

export interface WorkflowResponse {
  success: boolean
  analysis?: {
    numerology?: any
    humanDesign?: any
    astrology?: any
    aiInsights?: any
    recommendations?: any
  }
  error?: string
  executionTime?: string
  timestamp: string
  pdfUrl?: string
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function executeFreeAnalysis(request: WorkflowRequest): Promise<WorkflowResponse> {
  try {
    console.log('üöÄ Executing free analysis workflow...', {
      userId: request.userProfile.name,
      scenario: request.scenario,
    })

    // –í—ã–∑—ã–≤–∞–µ–º n8n workflow –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const execution = await executeN8NWorkflow(N8N_WORKFLOW_IDS.scenario1, request)
    
    if (!execution) {
      throw new Error('Failed to execute free analysis workflow')
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = execution.resultData || execution.data
    
    return {
      success: true,
      analysis: {
        numerology: result.numerology,
        humanDesign: result.humanDesign,
        astrology: result.astrology,
        recommendations: result.summary,
      },
      executionTime: result.executionTime,
      timestamp: new Date().toISOString(),
    }
  } catch (error) {
    console.error('‚ùå Free analysis workflow error:', error)
    
    // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–∞–º
    return await executeLocalFreeAnalysis(request)
  }
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function executePremiumAnalysis(request: WorkflowRequest): Promise<WorkflowResponse> {
  try {
    console.log('üöÄ Executing premium analysis workflow...', {
      userId: request.userProfile.name,
      scenario: request.scenario,
    })

    // –í—ã–∑—ã–≤–∞–µ–º n8n workflow –¥–ª—è –ø—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏–∑–∞
    const execution = await executeN8NWorkflow(N8N_WORKFLOW_IDS.scenario2, request)
    
    if (!execution) {
      throw new Error('Failed to execute premium analysis workflow')
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = execution.resultData || execution.data
    
    return {
      success: true,
      analysis: {
        numerology: result.numerology,
        humanDesign: result.humanDesign,
        astrology: result.astrology,
        aiInsights: result.aiInsights,
        recommendations: result.recommendations,
      },
      executionTime: result.executionTime,
      timestamp: new Date().toISOString(),
      pdfUrl: result.pdfUrl,
    }
  } catch (error) {
    console.error('‚ùå Premium analysis workflow error:', error)
    
    // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–∞–º
    return await executeLocalPremiumAnalysis(request)
  }
}

// Fallback: –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
async function executeLocalFreeAnalysis(request: WorkflowRequest): Promise<WorkflowResponse> {
  console.log('üìä Executing local free analysis fallback...')
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞
    const { calculateLifePath, calculateExpression, calculateSoulUrge, calculatePersonality } = await import('./numerology')
    
    const birthDate = new Date(request.userProfile.birthDate)
    const day = birthDate.getDate()
    const month = birthDate.getMonth() + 1
    const year = birthDate.getFullYear()
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏
    const numerology = {
      lifePath: calculateLifePath(`${day}/${month}/${year}`),
      expression: calculateExpression(request.userProfile.name),
      soulUrge: calculateSoulUrge(day.toString()),
      personality: calculatePersonality(request.userProfile.name),
      interpretation: '–í–∞—à –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —ç–Ω–µ—Ä–≥–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤–∞—à –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å.',
    }
    
    // –ë–∞–∑–æ–≤—ã–π Human Design (–º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
    const humanDesign = {
      type: 'Generator',
      strategy: 'Wait to respond',
      authority: 'Sacral',
      profile: '6/2',
      interpretation: '–í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ —É—Å—Ç–æ–π—á–∏–≤–æ–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏–ª–æ–π –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –∫ –≥–ª—É–±–æ–∫–æ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é.',
    }
    
    // –ë–∞–∑–æ–≤–∞—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è (–º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
    const astrology = {
      sunSign: 'Scorpio',
      moonSign: 'Cancer',
      ascendant: 'Leo',
      interpretation: '–í–∞—à–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.',
    }
    
    const summary = {
      strengths: ['–ò–Ω—Ç—É–∏—Ü–∏—è', '–ì–ª—É–±–∏–Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è', '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å'],
      growthAreas: ['–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –Ω–æ–≤–æ–º—É', '–î–æ–≤–µ—Ä–∏–µ –∫ —Å–µ–±–µ'],
      tips: ['–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏—é', '–ò–∑—É—á–∞–π—Ç–µ —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏', '–î–æ–≤–µ—Ä—è–π—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É'],
    }
    
    return {
      success: true,
      analysis: {
        numerology,
        humanDesign,
        astrology,
        recommendations: summary,
      },
      executionTime: '2.1s',
      timestamp: new Date().toISOString(),
    }
  } catch (error) {
    console.error('‚ùå Local free analysis error:', error)
    return {
      success: false,
      error: 'Failed to generate analysis',
      timestamp: new Date().toISOString(),
    }
  }
}

// Fallback: –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –ø—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏–∑–∞
async function executeLocalPremiumAnalysis(request: WorkflowRequest): Promise<WorkflowResponse> {
  console.log('üìä Executing local premium analysis fallback...')
  
  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    const baseAnalysis = await executeLocalFreeAnalysis(request)
    
    if (!baseAnalysis.success) {
      return baseAnalysis
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏
    const aiInsights = {
      personalizedAnalysis: '–í–∞—à –ø—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —ç–Ω–µ—Ä–≥–∏–π...',
      dailyGuidance: '–°–µ–≥–æ–¥–Ω—è —Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–∏ –≤–∞—à–∏—Ö –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∞–ª–∞–Ω—Ç–æ–≤...',
      affirmations: [
        '–Ø –¥–æ–≤–µ—Ä—è—é —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –º—É–¥—Ä–æ—Å—Ç–∏',
        '–ú–æ—è –≥–ª—É–±–∏–Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è - —ç—Ç–æ –º–æ–π –¥–∞—Ä',
        '–Ø –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ä–æ—Å—Ç–∞'
      ],
      meditationScript: '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±—è –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏...',
      relationshipAdvice: '–ò—â–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω—è—Ç –≥–ª—É–±–∏–Ω—É –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –º—É–¥—Ä–æ—Å—Ç—å...',
    }
    
    const recommendations = {
      career: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏–µ–π, —Ü–µ–ª–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º –∏–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º',
      relationships: '–û–∫—Ä—É–∂–∏—Ç–µ —Å–µ–±—è –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–Ω–∏–º–∞—é—Ç –≤–∞—à—É –≥–ª—É–±–∏–Ω—É',
      health: '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ',
      spirituality: '–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É',
      timing: {
        bestPeriods: '–û—Å–µ–Ω—å –∏ –∑–∏–º–∞',
        avoidPeriods: '–°—Ç—Ä–µ—Å—Å–æ–≤—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏',
      },
    }
    
    return {
      success: true,
      analysis: {
        ...baseAnalysis.analysis,
        aiInsights,
        recommendations,
      },
      executionTime: '3.5s',
      timestamp: new Date().toISOString(),
      pdfUrl: '/api/generate-pdf', // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è PDF
    }
  } catch (error) {
    console.error('‚ùå Local premium analysis error:', error)
    return {
      success: false,
      error: 'Failed to generate premium analysis',
      timestamp: new Date().toISOString(),
    }
  }
}

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
export async function executeAnalysisBySubscription(
  request: WorkflowRequest,
  isPremium: boolean
): Promise<WorkflowResponse> {
  if (isPremium) {
    return await executePremiumAnalysis(request)
  } else {
    return await executeFreeAnalysis(request)
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è workflow
export function createWorkflowRequest(
  userProfile: any,
  scenario: 'free' | 'premium'
): WorkflowRequest {
  return {
    userProfile: {
      name: userProfile.name,
      birthDate: userProfile.birthDate,
      birthTime: userProfile.birthTime,
      birthPlace: {
        name: userProfile.birthPlace?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        latitude: userProfile.birthPlace?.latitude || 0,
        longitude: userProfile.birthPlace?.longitude || 0,
      },
    },
    scenario,
    options: {
      includeDetailedAnalysis: scenario === 'premium',
      includeQuickInsights: scenario === 'free',
      includeRecommendations: true,
      includeComparisons: scenario === 'premium',
    },
    requestId: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    timestamp: new Date().toISOString(),
  }
}


