// lib/profileManager.ts
'use client'

import { UserProfile } from '@/store/appStore'

export interface ProfileSubscription {
  isActive: boolean
  plan: 'free' | 'premium' | 'pro'
  expiresAt?: Date
  features: string[]
  limits: {
    maxProfiles: number
    maxRequests: number
    maxHistory: number
  }
}

export interface TelegramUser {
  id: number
  username?: string
  first_name?: string
  last_name?: string
  language_code?: string
}

export interface StoredProfile {
  id: string
  telegramId: number
  profile: UserProfile
  createdAt: Date
  updatedAt: Date
  isActive: boolean
}

export class ProfileManager {
  private static instance: ProfileManager
  private profiles: Map<string, StoredProfile> = new Map()
  private telegramUsers: Map<number, TelegramUser> = new Map()
  private subscriptions: Map<number, ProfileSubscription> = new Map()

  private constructor() {
    this.loadFromStorage()
  }

  public static getInstance(): ProfileManager {
    if (!ProfileManager.instance) {
      ProfileManager.instance = new ProfileManager()
    }
    return ProfileManager.instance
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
  public async initializeTelegramUser(telegramUser: TelegramUser): Promise<void> {
    this.telegramUsers.set(telegramUser.id, telegramUser)
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if (!this.subscriptions.has(telegramUser.id)) {
      this.subscriptions.set(telegramUser.id, this.getDefaultSubscription())
    }
    
    this.saveToStorage()
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  public getSubscription(telegramId: number): ProfileSubscription {
    return this.subscriptions.get(telegramId) || this.getDefaultSubscription()
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
  public checkLimits(telegramId: number): { canCreate: boolean; canRequest: boolean; reason?: string } {
    const subscription = this.getSubscription(telegramId)
    const userProfiles = this.getUserProfiles(telegramId)
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
    if (userProfiles.length >= subscription.limits.maxProfiles) {
      return {
        canCreate: false,
        canRequest: false,
        reason: subscription.plan === 'free' 
          ? '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π. –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.'
          : '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.'
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤)
    const requestCount = this.getUserRequestCount(telegramId)
    if (requestCount >= subscription.limits.maxRequests) {
      return {
        canCreate: true,
        canRequest: false,
        reason: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.'
      }
    }

    return { canCreate: true, canRequest: true }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  public async createProfile(telegramId: number, profile: UserProfile): Promise<string> {
    const limits = this.checkLimits(telegramId)
    
    if (!limits.canCreate) {
      throw new Error(limits.reason || '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è')
    }

    const profileId = this.generateProfileId()
    const storedProfile: StoredProfile = {
      id: profileId,
      telegramId,
      profile,
      createdAt: new Date(),
      updatedAt: new Date(),
      isActive: true
    }

    this.profiles.set(profileId, storedProfile)
    this.saveToStorage()
    
    return profileId
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  public getUserProfiles(telegramId: number): StoredProfile[] {
    return Array.from(this.profiles.values())
      .filter(profile => profile.telegramId === telegramId && profile.isActive)
      .sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime())
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ ID
  public getProfile(profileId: string): StoredProfile | null {
    return this.profiles.get(profileId) || null
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  public async updateProfile(profileId: string, updates: Partial<UserProfile>): Promise<void> {
    console.log('üîß profileManager.updateProfile called with:', profileId, updates)
    console.log('üîß Current profiles in storage:', Array.from(this.profiles.keys()))
    
    const profile = this.profiles.get(profileId)
    console.log('üîß Found profile:', profile)
    
    if (!profile) {
      console.error('‚ùå Profile not found for ID:', profileId)
      console.error('‚ùå Available profile IDs:', Array.from(this.profiles.keys()))
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    profile.profile = { ...profile.profile, ...updates }
    profile.updatedAt = new Date()
    
    this.profiles.set(profileId, profile)
    this.saveToStorage()
    console.log('‚úÖ Profile updated successfully')
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  public async deleteProfile(profileId: string): Promise<void> {
    const profile = this.profiles.get(profileId)
    if (!profile) {
      throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    profile.isActive = false
    this.profiles.set(profileId, profile)
    this.saveToStorage()
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
  public updateSubscription(telegramId: number, subscription: Partial<ProfileSubscription>): void {
    const current = this.subscriptions.get(telegramId) || this.getDefaultSubscription()
    this.subscriptions.set(telegramId, { ...current, ...subscription })
    this.saveToStorage()
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  public getUserStats(telegramId: number): {
    totalProfiles: number
    activeProfiles: number
    subscription: ProfileSubscription
    lastActivity: Date | null
  } {
    const profiles = this.getUserProfiles(telegramId)
    const subscription = this.getSubscription(telegramId)
    
    return {
      totalProfiles: profiles.length,
      activeProfiles: profiles.filter(p => p.isActive).length,
      subscription,
      lastActivity: profiles.length > 0 ? profiles[0].updatedAt : null
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
  public cleanupInactiveProfiles(): void {
    const cutoffDate = new Date()
    cutoffDate.setDate(cutoffDate.getDate() - 30) // 30 –¥–Ω–µ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

    for (const [id, profile] of Array.from(this.profiles.entries())) {
      if (!profile.isActive && profile.updatedAt < cutoffDate) {
        this.profiles.delete(id)
      }
    }
    
    this.saveToStorage()
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private getDefaultSubscription(): ProfileSubscription {
    return {
      isActive: true,
      plan: 'free',
      features: ['basic_profile', 'basic_search'],
      limits: {
        maxProfiles: 1,
        maxRequests: 10,
        maxHistory: 5
      }
    }
  }

  private generateProfileId(): string {
    return `profile_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }

  private getUserRequestCount(telegramId: number): number {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    return 0
  }

  private loadFromStorage(): void {
    try {
      if (typeof window !== 'undefined') {
        const stored = localStorage.getItem('bodygraph_profiles')
        if (stored) {
          const data = JSON.parse(stored)
          
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
          if (data.profiles) {
              for (const [id, profile] of Object.entries(data.profiles)) {
                this.profiles.set(id, {
                  ...(profile as any),
                  createdAt: new Date((profile as any).createdAt),
                  updatedAt: new Date((profile as any).updatedAt)
                })
            }
          }
          
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
          if (data.subscriptions) {
              for (const [id, subscription] of Object.entries(data.subscriptions)) {
                this.subscriptions.set(parseInt(id), {
                  ...(subscription as any),
                  expiresAt: (subscription as any).expiresAt ? new Date((subscription as any).expiresAt) : undefined
                })
            }
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π:', error)
    }
  }

  private saveToStorage(): void {
    try {
      if (typeof window !== 'undefined') {
        const data = {
          profiles: Object.fromEntries(this.profiles),
          subscriptions: Object.fromEntries(this.subscriptions)
        }
        localStorage.setItem('bodygraph_profiles', JSON.stringify(data))
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π:', error)
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const profileManager = ProfileManager.getInstance()
