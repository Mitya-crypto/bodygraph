// lib/astrologyApi.ts

// –£–±–∏—Ä–∞–µ–º –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç Swiss Ephemeris –∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∫–æ–¥–∞

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
const ASTROLOGY_API_CONFIG = {
  // Swiss Ephemeris API (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  swissEphemerisUrl: 'https://api.swisseph.com/v1',
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API (–Ω–∞–ø—Ä–∏–º–µ—Ä, Astro-Seek)
  astroApiUrl: 'https://api.astro-seek.com/v1',
  // –õ–æ–∫–∞–ª—å–Ω—ã–π API (–µ—Å–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)
  localApiUrl: '/api/astrology',
  timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥
}

interface AstrologyRequest {
  birthDate: string // YYYY-MM-DD
  birthTime: string // HH:MM
  latitude: number
  longitude: number
  timezone?: string
}

interface AstrologyResponse {
  sun: {
    sign: string
    degree: number
    house: number
    description: string
  }
  moon: {
    sign: string
    degree: number
    house: number
    description: string
  }
  rising: {
    sign: string
    degree: number
    description: string
  }
  planets: Array<{
    name: string
    sign: string
    degree: number
    house: number
    description: string
  }>
  houses: Array<{
    number: number
    sign: string
    degree: number
    description: string
  }>
  aspects: Array<{
    planet1: string
    planet2: string
    aspect: string
    orb: number
    description: string
  }>
  chartData: {
    ascendant: number
    mc: number
    houses: number[]
    planets: Array<{
      name: string
      longitude: number
      latitude: number
    }>
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏
export async function fetchAstrologyData(request: AstrologyRequest): Promise<AstrologyResponse> {
  try {
    console.log('üîÑ Fetching Astrology data from API endpoint:', request)
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API endpoint
    const response = await fetch('/api/astrology-simple', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(request),
    })

    if (!response.ok) {
      throw new Error(`API request failed with status ${response.status}`)
    }

    const data = await response.json()
    
    if (!data.success) {
      throw new Error(data.error || 'API returned error')
    }

    console.log('‚úÖ Swiss Ephemeris calculation completed successfully via API')
    return data
    
  } catch (error) {
    console.error('‚ùå Error with Swiss Ephemeris API, falling back to mock data:', error)
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    return getMockAstrologyData(request)
  }
}

// –£–¥–∞–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ - —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∫–æ–≤—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function getMockAstrologyData(request: AstrologyRequest): AstrologyResponse {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Å–µ–≤–¥–æ-—Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
  const birthDate = new Date(request.birthDate)
  const seed = birthDate.getTime() + Math.floor(Math.random() * 1000)
  
  // –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Å–µ–≤–¥–æ-—Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
  const seededRandom = (seed: number) => {
    const x = Math.sin(seed) * 10000
    return x - Math.floor(x)
  }

  const signs = ['Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces']
  const planets = ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto']
  const aspects = ['Conjunction', 'Opposition', 'Trine', 'Square', 'Sextile']

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ "seed"
  const sunSign = signs[Math.floor(seededRandom(seed) * signs.length)]
  const moonSign = signs[Math.floor(seededRandom(seed + 1) * signs.length)]
  const risingSign = signs[Math.floor(seededRandom(seed + 2) * signs.length)]

  return {
    sun: {
      sign: sunSign,
      degree: seededRandom(seed + 10) * 30,
      house: Math.floor(seededRandom(seed + 20) * 12) + 1,
      description: getPlanetInSignDescription('Sun', sunSign)
    },
    moon: {
      sign: moonSign,
      degree: seededRandom(seed + 30) * 30,
      house: Math.floor(seededRandom(seed + 40) * 12) + 1,
      description: getPlanetInSignDescription('Moon', moonSign)
    },
    rising: {
      sign: risingSign,
      degree: seededRandom(seed + 50) * 30,
      description: getRisingSignDescription(risingSign)
    },
    planets: planets.map((planet, index) => ({
      name: planet,
      sign: signs[Math.floor(seededRandom(seed + 100 + index) * signs.length)],
      degree: seededRandom(seed + 200 + index) * 30,
      house: Math.floor(seededRandom(seed + 300 + index) * 12) + 1,
      description: getPlanetDescription(planet)
    })),
    houses: Array.from({ length: 12 }, (_, index) => ({
      number: index + 1,
      sign: signs[Math.floor(seededRandom(seed + 400 + index) * signs.length)],
      degree: seededRandom(seed + 500 + index) * 30,
      description: getHouseDescription(index + 1)
    })),
    aspects: generateMockAspects(seed),
    chartData: {
      ascendant: seededRandom(seed + 600) * 360,
      mc: seededRandom(seed + 700) * 360,
      houses: Array.from({ length: 12 }, (_, i) => seededRandom(seed + 800 + i) * 360),
      planets: planets.map((planet, index) => ({
        name: planet,
        longitude: seededRandom(seed + 900 + index) * 360,
        latitude: (seededRandom(seed + 1000 + index) - 0.5) * 10
      }))
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫–æ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
function generateMockAspects(seed: number): Array<{
  planet1: string
  planet2: string
  aspect: string
  orb: number
  description: string
}> {
  const planets = ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn']
  const aspects = ['Conjunction', 'Opposition', 'Trine', 'Square', 'Sextile']
  const aspectOrbs = [0, 180, 120, 90, 60]
  
  const result = []
  const numAspects = Math.floor(seed % 10) + 5 // 5-15 –∞—Å–ø–µ–∫—Ç–æ–≤
  
  for (let i = 0; i < numAspects; i++) {
    const planet1 = planets[Math.floor(Math.sin(seed + i) * planets.length) % planets.length]
    const planet2 = planets[Math.floor(Math.cos(seed + i * 2) * planets.length) % planets.length]
    
    if (planet1 !== planet2) {
      const aspectIndex = Math.floor(Math.sin(seed + i * 3) * aspects.length) % aspects.length
      result.push({
        planet1,
        planet2,
        aspect: aspects[aspectIndex],
        orb: Math.abs(Math.sin(seed + i * 4) * 8), // 0-8 –≥—Ä–∞–¥—É—Å–æ–≤ –æ—Ä–±
        description: getAspectDescription(aspects[aspectIndex])
      })
    }
  }
  
  return result
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π
function getPlanetInSignDescription(planet: string, sign: string): string {
  const descriptions: { [key: string]: { [key: string]: string } } = {
    Sun: {
      Aries: '–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –ª–∏–¥–µ—Ä —Å —Å–∏–ª—å–Ω–æ–π –≤–æ–ª–µ–π',
      Taurus: '–°—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∂–∏–∑–Ω–∏',
      Gemini: '–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä',
      Cancer: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫',
      Leo: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –∏ –≥–æ—Ä–¥—ã–π –ª–∏–¥–µ—Ä',
      Virgo: '–ê–Ω–∞–ª–∏—Ç–∏—á–Ω—ã–π –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—é—â–∏–π—Å—è —Ä–∞–±–æ—Ç–Ω–∏–∫',
      Libra: '–ì–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π –∏ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π –º–∏—Ä–æ—Ç–≤–æ—Ä–µ—Ü',
      Scorpio: '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π—Å—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
      Sagittarius: '–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∏ —Å–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤—ã–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫',
      Capricorn: '–ê–º–±–∏—Ü–∏–æ–∑–Ω—ã–π –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å',
      Aquarius: '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –Ω–æ–≤–∞—Ç–æ—Ä',
      Pisces: '–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏ —Å–æ—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—á—Ç–∞—Ç–µ–ª—å'
    },
    Moon: {
      Aries: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–º–ø—É–ª—å—Å–∏–≤–Ω–∞—è –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è',
      Taurus: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–∞—è',
      Gemini: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω—á–∏–≤–∞—è –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω–∞—è',
      Cancer: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≥–ª—É–±–æ–∫–æ —á—É–≤—Å—Ç–≤—É—é—â–∞—è –∏ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è',
      Leo: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥—Ä–∞–º–∞—Ç–∏—á–Ω–∞—è –∏ –≥–æ—Ä–¥–∞—è',
      Virgo: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏—Ç–∏—á–Ω–∞—è –∏ –∫—Ä–∏—Ç–∏—á–Ω–∞—è',
      Libra: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–∞—è –∏ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω–∞—è',
      Scorpio: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É—é—â–∞—è',
      Sagittarius: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–∞—è –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è',
      Capricorn: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–¥–µ—Ä–∂–∞–Ω–Ω–∞—è –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è',
      Aquarius: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è',
      Pisces: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–∞—è'
    }
  }
  
  return descriptions[planet]?.[sign] || `${planet} –≤ ${sign}`
}

function getRisingSignDescription(sign: string): string {
  const descriptions: { [key: string]: string } = {
    Aries: '–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ: —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–π',
    Taurus: '–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ: —Å–ø–æ–∫–æ–π–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π',
    Gemini: '–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ: –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π',
    Cancer: '–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ: –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π',
    Leo: '–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ: –≥–æ—Ä–¥—ã–π –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π',
    Virgo: '–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ: –∞–Ω–∞–ª–∏—Ç–∏—á–Ω—ã–π –∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π',
    Libra: '–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ: –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π –∏ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π',
    Scorpio: '–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ: –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –∏ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π',
    Sagittarius: '–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ: –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π',
    Capricorn: '–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ: —Å–µ—Ä—å–µ–∑–Ω—ã–π –∏ –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π',
    Aquarius: '–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π',
    Pisces: '–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ: –º–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π –∏ —Å–æ—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π'
  }
  
  return descriptions[sign] || `–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç –≤ ${sign}`
}

function getPlanetDescription(planet: string): string {
  const descriptions: { [key: string]: string } = {
    Sun: '–í–∞—à–∞ —Å—É—â–Ω–æ—Å—Ç—å –∏ –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞',
    Moon: '–í–∞—à–∏ —ç–º–æ—Ü–∏–∏ –∏ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ',
    Mercury: '–í–∞—à —É–º –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è',
    Venus: '–í–∞—à–∞ –ª—é–±–æ–≤—å –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏',
    Mars: '–í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è',
    Jupiter: '–í–∞—à–∞ –º—É–¥—Ä–æ—Å—Ç—å –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ',
    Saturn: '–í–∞—à–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
    Uranus: '–í–∞—à–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ä–µ–≤–æ–ª—é—Ü–∏—è',
    Neptune: '–í–∞—à–∞ –∏–Ω—Ç—É–∏—Ü–∏—è –∏ –∏–ª–ª—é–∑–∏–∏',
    Pluto: '–í–∞—à–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å–∏–ª–∞'
  }
  
  return descriptions[planet] || `–ü–ª–∞–Ω–µ—Ç–∞ ${planet}`
}

function getHouseDescription(houseNumber: number): string {
  const descriptions: { [key: number]: string } = {
    1: '–õ–∏—á–Ω–æ—Å—Ç—å –∏ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥',
    2: '–¶–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã',
    3: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ',
    4: '–î–æ–º –∏ —Å–µ–º—å—è',
    5: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –¥–µ—Ç–∏',
    6: '–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ä–∞–±–æ—Ç–∞',
    7: '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
    8: '–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã',
    9: '–§–∏–ª–æ—Å–æ—Ñ–∏—è –∏ –≤—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
    10: '–ö–∞—Ä—å–µ—Ä–∞ –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—è',
    11: '–î—Ä—É–∂–±–∞ –∏ —Ü–µ–ª–∏',
    12: '–ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ –∏ —Ç–∞–π–Ω—ã'
  }
  
  return descriptions[houseNumber] || `–î–æ–º ${houseNumber}`
}

function getAspectDescription(aspect: string): string {
  const descriptions: { [key: string]: string } = {
    Conjunction: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - –ø–ª–∞–Ω–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ',
    Opposition: '–û–ø–ø–æ–∑–∏—Ü–∏—è - –ø–ª–∞–Ω–µ—Ç—ã –≤ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–∏',
    Trine: '–¢—Ä–∏–Ω - –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ',
    Square: '–ö–≤–∞–¥—Ä–∞—Ç - –≤—ã–∑–æ–≤ –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ',
    Sextile: '–°–µ–∫—Å—Ç–∏–ª—å - –ª–µ–≥–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'
  }
  
  return descriptions[aspect] || `–ê—Å–ø–µ–∫—Ç ${aspect}`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export function validateAstrologyInput(birthDate: string, birthTime: string, latitude: number, longitude: number): boolean {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
  const date = new Date(birthDate)
  if (isNaN(date.getTime())) {
    console.error('‚ùå Invalid birth date:', birthDate)
    return false
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è
  const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/
  if (!timeRegex.test(birthTime)) {
    console.error('‚ùå Invalid birth time:', birthTime)
    return false
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  if (latitude < -90 || latitude > 90 || longitude < -180 || longitude > 180) {
    console.error('‚ùå Invalid coordinates:', { latitude, longitude })
    return false
  }
  
  return true
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è API
export function formatProfileForAstrology(userProfile: any): AstrologyRequest | null {
  try {
    if (!userProfile || !userProfile.birthDate) {
      console.error('‚ùå Missing birth date in profile')
      return null
    }
    
    const birthDate = new Date(userProfile.birthDate)
    const birthTime = userProfile.birthTime || '12:00'
    
    // –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    let latitude = 0
    let longitude = 0
    
    if (userProfile.birthCoordinates) {
      const coords = userProfile.birthCoordinates.split(',').map(Number)
      if (coords.length === 2) {
        latitude = coords[0]
        longitude = coords[1]
      }
    }
    
    const request: AstrologyRequest = {
      birthDate: birthDate.toISOString().split('T')[0], // YYYY-MM-DD
      birthTime: birthTime,
      latitude: latitude,
      longitude: longitude
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    if (!validateAstrologyInput(request.birthDate, request.birthTime, request.latitude, request.longitude)) {
      console.error('‚ùå Invalid Astrology input data')
      return null
    }
    
    console.log('‚úÖ Formatted Astrology request:', request)
    return request
    
  } catch (error) {
    console.error('‚ùå Error formatting profile for Astrology:', error)
    return null
  }
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏
export const ASTROLOGY_SIGNS = {
  ARIES: 'Aries',
  TAURUS: 'Taurus',
  GEMINI: 'Gemini',
  CANCER: 'Cancer',
  LEO: 'Leo',
  VIRGO: 'Virgo',
  LIBRA: 'Libra',
  SCORPIO: 'Scorpio',
  SAGITTARIUS: 'Sagittarius',
  CAPRICORN: 'Capricorn',
  AQUARIUS: 'Aquarius',
  PISCES: 'Pisces'
} as const

export const ASTROLOGY_PLANETS = {
  SUN: 'Sun',
  MOON: 'Moon',
  MERCURY: 'Mercury',
  VENUS: 'Venus',
  MARS: 'Mars',
  JUPITER: 'Jupiter',
  SATURN: 'Saturn',
  URANUS: 'Uranus',
  NEPTUNE: 'Neptune',
  PLUTO: 'Pluto'
} as const

export const ASTROLOGY_ASPECTS = {
  CONJUNCTION: 'Conjunction',
  OPPOSITION: 'Opposition',
  TRINE: 'Trine',
  SQUARE: 'Square',
  SEXTILE: 'Sextile'
} as const

export type AstrologySign = typeof ASTROLOGY_SIGNS[keyof typeof ASTROLOGY_SIGNS]
export type AstrologyPlanet = typeof ASTROLOGY_PLANETS[keyof typeof ASTROLOGY_PLANETS]
export type AstrologyAspect = typeof ASTROLOGY_ASPECTS[keyof typeof ASTROLOGY_ASPECTS]

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API
export function checkAstrologyApiStatus(): { available: boolean; message: string; plan: string } {
  return {
    available: true,
    message: '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π API –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞—Å—á–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.',
    plan: 'Server-side calculations (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)'
  }
}

export function getAstrologyPlanInfo(): { name: string; price: string; features: string[] } {
  return {
    name: 'Server-side Astrology API',
    price: '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ',
    features: [
      '‚úÖ –†–∞—Å—á–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è',
      '‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç',
      '‚úÖ –î–æ–º–∞ –∏ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞',
      '‚úÖ –ê—Å–ø–µ–∫—Ç—ã –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏',
      '‚úÖ –ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã',
      '‚úÖ –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
      '‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
    ]
  }
}
