// lib/humanDesignCalculator.ts
// –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä Human Design –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤

interface BirthData {
  year: number
  month: number
  day: number
  hour: number
  minute: number
  latitude: number
  longitude: number
}

interface HumanDesignResult {
  type: string
  strategy: string
  authority: string
  profile: string
  definition: string
  incarnationCross: string
  channels: Array<{
    number: string
    name: string
    description: string
  }>
  gates: Array<{
    number: string
    name: string
    description: string
    line: number
    color: string
  }>
  centers: Array<{
    name: string
    defined: boolean
    color: string
  }>
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ Human Design
export function calculateHumanDesign(birthData: BirthData): HumanDesignResult {
  console.log('üîÑ Calculating Human Design for:', birthData)
  
  // 1. –†–∞—Å—á–µ—Ç –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
  const planetaryPositions = calculatePlanetaryPositions(birthData)
  console.log('‚úÖ Planetary positions calculated:', Object.keys(planetaryPositions))
  
  // 2. –†–∞—Å—á–µ—Ç –≤–æ—Ä–æ—Ç (Gates)
  const gates = calculateGates(planetaryPositions)
  console.log('‚úÖ Gates calculated:', gates.length)
  
  // 3. –†–∞—Å—á–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ (Channels)
  const channels = calculateChannels(gates)
  console.log('‚úÖ Channels calculated:', channels.length)
  
  // 4. –†–∞—Å—á–µ—Ç —Ü–µ–Ω—Ç—Ä–æ–≤ (Centers)
  const centers = calculateCenters(channels)
  console.log('‚úÖ Centers calculated:', centers.length)
  
  // 5. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
  const type = determineType(centers)
  console.log('‚úÖ Type determined:', type)
  
  // 6. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  const strategy = determineStrategy(type)
  console.log('‚úÖ Strategy determined:', strategy)
  
  // 7. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞
  const authority = determineAuthority(centers)
  console.log('‚úÖ Authority determined:', authority)
  
  // 8. –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è
  const profile = calculateProfile(planetaryPositions)
  console.log('‚úÖ Profile calculated:', profile)
  
  // 9. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–µ—Å—Ç–∞ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è
  const incarnationCross = calculateIncarnationCross(planetaryPositions)
  console.log('‚úÖ Incarnation cross calculated:', incarnationCross)
  
  const result = {
    type,
    strategy,
    authority,
    profile,
    definition: `${type} with ${authority} authority`,
    incarnationCross,
    channels,
    gates,
    centers
  }
  
  console.log('üéØ Final Human Design result:', result)
  return result
}

// –†–∞—Å—á–µ—Ç –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
function calculatePlanetaryPositions(birthData: BirthData) {
  const { year, month, day, hour, minute, latitude, longitude } = birthData
  
  // –Æ–ª–∏–∞–Ω—Å–∫–∏–π –¥–µ–Ω—å
  const julianDay = calculateJulianDay(year, month, day, hour, minute)
  
  // –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –ø–ª–∞–Ω–µ—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
  const positions = {
    sun: calculateSunPosition(julianDay),
    moon: calculateMoonPosition(julianDay),
    mercury: calculateMercuryPosition(julianDay),
    venus: calculateVenusPosition(julianDay),
    mars: calculateMarsPosition(julianDay),
    jupiter: calculateJupiterPosition(julianDay),
    saturn: calculateSaturnPosition(julianDay),
    uranus: calculateUranusPosition(julianDay),
    neptune: calculateNeptunePosition(julianDay),
    pluto: calculatePlutoPosition(julianDay),
    earth: calculateEarthPosition(julianDay)
  }
  
  return positions
}

// –†–∞—Å—á–µ—Ç –≤–æ—Ä–æ—Ç (Gates) –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
function calculateGates(positions: any) {
  const gates = []
  
  // –°–æ–ª–Ω—Ü–µ - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ—Ä–æ—Ç–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
  const sunGate = Math.floor(positions.sun / 30) + 1
  gates.push({
    number: sunGate.toString(),
    name: getGateName(sunGate),
    description: getGateDescription(sunGate),
    line: Math.floor((positions.sun % 30) / 5) + 1,
    color: getGateColor(sunGate)
  })
  
  // –õ—É–Ω–∞ - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ—Ä–æ—Ç–∞ –¥–∏–∑–∞–π–Ω–∞
  const moonGate = Math.floor(positions.moon / 30) + 1
  gates.push({
    number: moonGate.toString(),
    name: getGateName(moonGate),
    description: getGateDescription(moonGate),
    line: Math.floor((positions.moon % 30) / 5) + 1,
    color: getGateColor(moonGate)
  })
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã
  const planets = ['mercury', 'venus', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune', 'pluto']
  planets.forEach(planet => {
    const gate = Math.floor(positions[planet] / 30) + 1
    gates.push({
      number: gate.toString(),
      name: getGateName(gate),
      description: getGateDescription(gate),
      line: Math.floor((positions[planet] % 30) / 5) + 1,
      color: getGateColor(gate)
    })
  })
  
  return gates
}

// –†–∞—Å—á–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ—Ä–æ—Ç
function calculateChannels(gates: any[]) {
  const channels: any[] = []
  const gateNumbers = gates.map(g => parseInt(g.number))
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
  const activeChannels = [
    { number: '1-8', gates: [1, 8], name: 'Inspiration', description: 'Channel of inspiration and creativity' },
    { number: '2-14', gates: [2, 14], name: 'The Beat', description: 'Channel of rhythm and timing' },
    { number: '3-60', gates: [3, 60], name: 'Mutation', description: 'Channel of mutation and change' },
    { number: '4-63', gates: [4, 63], name: 'Logic', description: 'Channel of logic and reasoning' },
    { number: '5-15', gates: [5, 15], name: 'Rhythm', description: 'Channel of rhythm and flow' },
    { number: '6-59', gates: [6, 59], name: 'Mating', description: 'Channel of mating and reproduction' },
    { number: '7-31', gates: [7, 31], name: 'Leadership', description: 'Channel of leadership and authority' },
    { number: '9-52', gates: [9, 52], name: 'Concentration', description: 'Channel of concentration and focus' },
    { number: '10-20', gates: [10, 20], name: 'Awakening', description: 'Channel of awakening and awareness' },
    { number: '11-56', gates: [11, 56], name: 'Curiosity', description: 'Channel of curiosity and seeking' }
  ]
  
  activeChannels.forEach(channel => {
    const hasGate1 = gateNumbers.includes(channel.gates[0])
    const hasGate2 = gateNumbers.includes(channel.gates[1])
    
    if (hasGate1 && hasGate2) {
      channels.push({
        number: channel.number,
        name: channel.name,
        description: channel.description
      })
    }
  })
  
  return channels
}

// –†–∞—Å—á–µ—Ç —Ü–µ–Ω—Ç—Ä–æ–≤
function calculateCenters(channels: any[]) {
  const centers = [
    { name: 'Head', defined: false, color: '#0ea5e9' },
    { name: 'Ajna', defined: false, color: '#d946ef' },
    { name: 'Throat', defined: false, color: '#fbbf24' },
    { name: 'G-Center', defined: false, color: '#ef4444' },
    { name: 'Heart', defined: false, color: '#8b5cf6' },
    { name: 'Solar Plexus', defined: false, color: '#06b6d4' },
    { name: 'Sacral', defined: false, color: '#10b981' },
    { name: 'Root', defined: false, color: '#f59e0b' },
    { name: 'Spleen', defined: false, color: '#ec4899' }
  ]
  
  console.log('üîç Calculating centers for channels:', channels.length)
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–Ω–∞–ª–æ–≤
  channels.forEach(channel => {
    const channelNumber = channel.number
    console.log('üîç Processing channel:', channelNumber)
    
    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–Ω–∞–ª–æ–≤
    if (channelNumber.includes('1-8') || channelNumber.includes('2-14')) {
      centers.find(c => c.name === 'Head')!.defined = true
      console.log('‚úÖ Head center activated')
    }
    if (channelNumber.includes('3-60') || channelNumber.includes('4-63')) {
      centers.find(c => c.name === 'Ajna')!.defined = true
      console.log('‚úÖ Ajna center activated')
    }
    if (channelNumber.includes('5-15') || channelNumber.includes('6-59')) {
      centers.find(c => c.name === 'Throat')!.defined = true
      console.log('‚úÖ Throat center activated')
    }
    if (channelNumber.includes('7-31') || channelNumber.includes('9-52')) {
      centers.find(c => c.name === 'G-Center')!.defined = true
      console.log('‚úÖ G-Center activated')
    }
    if (channelNumber.includes('10-20') || channelNumber.includes('11-56')) {
      centers.find(c => c.name === 'Heart')!.defined = true
      console.log('‚úÖ Heart center activated')
    }
    if (channelNumber.includes('12-22') || channelNumber.includes('13-33')) {
      centers.find(c => c.name === 'Solar Plexus')!.defined = true
      console.log('‚úÖ Solar Plexus center activated')
    }
    if (channelNumber.includes('14-2') || channelNumber.includes('15-5')) {
      centers.find(c => c.name === 'Sacral')!.defined = true
      console.log('‚úÖ Sacral center activated')
    }
    if (channelNumber.includes('16-48') || channelNumber.includes('17-62')) {
      centers.find(c => c.name === 'Root')!.defined = true
      console.log('‚úÖ Root center activated')
    }
    if (channelNumber.includes('18-58') || channelNumber.includes('19-49')) {
      centers.find(c => c.name === 'Spleen')!.defined = true
      console.log('‚úÖ Spleen center activated')
    }
  })
  
  const definedCenters = centers.filter(c => c.defined)
  console.log('‚úÖ Defined centers:', definedCenters.map(c => c.name))
  
  return centers
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
function determineType(centers: any[]) {
  const definedCenters = centers.filter(c => c.defined)
  const definedCenterNames = definedCenters.map(c => c.name)
  
  console.log('üîç Determining type for centers:', definedCenterNames)
  
  // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤
  if (definedCenterNames.includes('Sacral')) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –ì–æ—Ä–ª–æ–≤—ã–º —Ü–µ–Ω—Ç—Ä–æ–º –∏ –º–æ—Ç–æ—Ä–æ–º
    if (definedCenterNames.includes('Throat') && 
        (definedCenterNames.includes('Solar Plexus') || 
         definedCenterNames.includes('Root') || 
         definedCenterNames.includes('Heart'))) {
      console.log('‚úÖ Type: Manifesting Generator')
      return 'Manifesting Generator'
    }
    console.log('‚úÖ Type: Generator')
    return 'Generator'
  } else if (definedCenterNames.includes('Throat') && !definedCenterNames.includes('Sacral')) {
    console.log('‚úÖ Type: Manifestor')
    return 'Manifestor'
  } else if (definedCenterNames.includes('Throat') && !definedCenterNames.includes('Sacral') && !definedCenterNames.includes('Solar Plexus')) {
    console.log('‚úÖ Type: Projector')
    return 'Projector'
  } else {
    console.log('‚úÖ Type: Reflector (no defined centers)')
    return 'Reflector'
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
function determineStrategy(type: string) {
  const strategies = {
    'Generator': 'Respond',
    'Manifesting Generator': 'Respond, then Inform',
    'Manifestor': 'Inform',
    'Projector': 'Wait for the Invitation',
    'Reflector': 'Wait for the Lunar Cycle'
  }
  return strategies[type as keyof typeof strategies] || 'Respond'
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞
function determineAuthority(centers: any[]) {
  const definedCenters = centers.filter(c => c.defined)
  const definedCenterNames = definedCenters.map(c => c.name)
  
  if (definedCenterNames.includes('Solar Plexus')) {
    return 'Emotional'
  } else if (definedCenterNames.includes('Sacral')) {
    return 'Sacral'
  } else if (definedCenterNames.includes('Spleen')) {
    return 'Splenic'
  } else if (definedCenterNames.includes('Heart')) {
    return 'Ego'
  } else if (definedCenterNames.includes('G-Center')) {
    return 'Self-Projected'
  } else {
    return 'Environmental'
  }
}

// –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è
function calculateProfile(positions: any) {
  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π –°–æ–ª–Ω—Ü–∞ –∏ –ó–µ–º–ª–∏
  const sunLine = Math.floor((positions.sun % 30) / 5) + 1
  const earthLine = Math.floor((positions.earth % 30) / 5) + 1
  
  const profiles = ['1/3', '2/4', '3/5', '4/6', '5/1', '6/2']
  const profileIndex = (sunLine + earthLine) % profiles.length
  
  return profiles[profileIndex]
}

// –†–∞—Å—á–µ—Ç –∫—Ä–µ—Å—Ç–∞ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è
function calculateIncarnationCross(positions: any) {
  const crosses = [
    'Right Angle Cross of the Sphinx',
    'Left Angle Cross of the Vessel of Love',
    'Juxtaposition Cross of the Sleeping Phoenix',
    'Right Angle Cross of the Sleeping Phoenix',
    'Left Angle Cross of the Sphinx'
  ]
  
  const crossIndex = Math.floor(positions.sun / 72) % crosses.length
  return crosses[crossIndex]
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateJulianDay(year: number, month: number, day: number, hour: number, minute: number): number {
  const a = Math.floor((14 - month) / 12)
  const y = year + 4800 - a
  const m = month + 12 * a - 3
  return day + Math.floor((153 * m + 2) / 5) + 365 * y + Math.floor(y / 4) - Math.floor(y / 100) + Math.floor(y / 400) - 32045
}

function calculateSunPosition(julianDay: number): number {
  return (julianDay * 0.9856) % 360
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ó–µ–º–ª–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
function calculateEarthPosition(julianDay: number): number {
  const sunPos = calculateSunPosition(julianDay)
  return (sunPos + 180) % 360
}

function calculateMoonPosition(julianDay: number): number {
  return (julianDay * 13.18) % 360
}

function calculateMercuryPosition(julianDay: number): number {
  return (julianDay * 4.15) % 360
}

function calculateVenusPosition(julianDay: number): number {
  return (julianDay * 1.6) % 360
}

function calculateMarsPosition(julianDay: number): number {
  return (julianDay * 0.53) % 360
}

function calculateJupiterPosition(julianDay: number): number {
  return (julianDay * 0.084) % 360
}

function calculateSaturnPosition(julianDay: number): number {
  return (julianDay * 0.034) % 360
}

function calculateUranusPosition(julianDay: number): number {
  return (julianDay * 0.012) % 360
}

function calculateNeptunePosition(julianDay: number): number {
  return (julianDay * 0.006) % 360
}

function calculatePlutoPosition(julianDay: number): number {
  return (julianDay * 0.004) % 360
}

function getGateName(gateNumber: number): string {
  const gateNames: { [key: number]: string } = {
    1: 'The Creative', 2: 'The Higher Self', 3: 'Ordering', 4: 'Youthful Folly', 5: 'Waiting',
    6: 'Conflict', 7: 'The Army', 8: 'Holding Together', 9: 'The Taming Power', 10: 'Treading',
    11: 'Peace', 12: 'Standstill', 13: 'Fellowship', 14: 'Great Possession', 15: 'Modesty',
    16: 'Enthusiasm', 17: 'Following', 18: 'Work on What Has Been Spoiled', 19: 'Approach', 20: 'Contemplation'
  }
  return gateNames[gateNumber] || `Gate ${gateNumber}`
}

function getGateDescription(gateNumber: number): string {
  const descriptions: { [key: number]: string } = {
    1: 'Gate of self-expression and creativity',
    2: 'Gate of higher self and intuition',
    3: 'Gate of ordering and difficulty',
    4: 'Gate of youthful folly and learning',
    5: 'Gate of waiting and timing'
  }
  return descriptions[gateNumber] || `Description for Gate ${gateNumber}`
}

function getGateColor(gateNumber: number): string {
  const colors = ['#0ea5e9', '#d946ef', '#fbbf24', '#ef4444', '#8b5cf6', '#06b6d4', '#10b981', '#f59e0b', '#ec4899']
  return colors[gateNumber % colors.length]
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—É–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤—ã—à–µ)
