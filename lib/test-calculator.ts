import { calculateBodyGraph } from './calculator';
import { UserData } from './types';

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
 */
export async function testCalculator() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä BodyGraph...');
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const testUserData: UserData = {
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    birthDate: '1990-05-15',
    birthTime: '14:30',
    birthLocation: {
      latitude: 55.7558,
      longitude: 37.6176,
      timezone: 'Europe/Moscow'
    }
  };

  try {
    console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –¥–ª—è:', testUserData.name);
    const startTime = Date.now();
    
    const result = await calculateBodyGraph(testUserData);
    
    const endTime = Date.now();
    console.log(`‚è±Ô∏è –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${endTime - startTime}ms`);
    
    if (result.success && result.data) {
      console.log('‚úÖ –†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–µ–Ω!');
      console.log('üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
      console.log('  üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è:', result.data.numerology.lifePathNumber);
      console.log('  üß¨ Human Design:', result.data.humanDesign.type);
      console.log('  ‚≠ê –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è:', result.data.astrology.sunSign);
      console.log('  üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', result.data.dailyMetrics.length, '–¥–Ω–µ–π');
      
      if (result.errors && result.errors.length > 0) {
        console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
        result.errors.forEach(error => {
          console.log(`  - ${error.module}: ${error.error}`);
        });
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:');
      if (result.errors) {
        result.errors.forEach(error => {
          console.log(`  - ${error.module}: ${error.error}`);
        });
      }
    }
    
    return result;
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export async function testCaching() {
  console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ...');
  
  const testUserData: UserData = {
    name: '–¢–µ—Å—Ç –ö—ç—à–∞',
    birthDate: '1985-03-20',
    birthTime: '10:15',
    birthLocation: {
      latitude: 59.9311,
      longitude: 30.3609,
      timezone: 'Europe/Moscow'
    }
  };

  // –ü–µ—Ä–≤—ã–π —Ä–∞—Å—á–µ—Ç
  console.log('üîÑ –ü–µ—Ä–≤—ã–π —Ä–∞—Å—á–µ—Ç (–±–µ–∑ –∫—ç—à–∞)...');
  const start1 = Date.now();
  const result1 = await calculateBodyGraph(testUserData);
  const time1 = Date.now() - start1;
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: ${time1}ms`);

  // –í—Ç–æ—Ä–æ–π —Ä–∞—Å—á–µ—Ç (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)
  console.log('üîÑ –í—Ç–æ—Ä–æ–π —Ä–∞—Å—á–µ—Ç (—Å –∫—ç—à–µ–º)...');
  const start2 = Date.now();
  const result2 = await calculateBodyGraph(testUserData);
  const time2 = Date.now() - start2;
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: ${time2}ms`);

  console.log(`üìä –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${Math.round(time1 / time2)}x`);
  
  return { result1, result2, time1, time2 };
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
export async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...\n');
  
  try {
    await testCalculator();
    console.log('\n' + '='.repeat(50) + '\n');
    await testCaching();
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
    throw error;
  }
}
