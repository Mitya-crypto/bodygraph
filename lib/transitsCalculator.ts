// lib/transitsCalculator.ts

import { ChartData } from './swissEphemeris'

export interface TransitData {
  planet: string
  currentPosition: number
  natalPosition: number
  aspect: TransitAspect | null
  orb: number
  influence: TransitInfluence
  description: string
}

export interface TransitAspect {
  type: 'conjunction' | 'opposition' | 'trine' | 'square' | 'sextile' | 'quincunx' | 'semisextile'
  symbol: string
  orb: number
  strength: 'exact' | 'strong' | 'medium' | 'weak'
}

export interface TransitInfluence {
  intensity: 'high' | 'medium' | 'low'
  nature: 'positive' | 'negative' | 'neutral' | 'challenging'
  areas: string[]
  duration: string
  advice: string
}

export interface TransitReport {
  date: string
  natalChart: ChartData
  currentChart: ChartData
  transits: TransitData[]
  summary: {
    totalTransits: number
    majorTransits: number
    overallInfluence: 'very_positive' | 'positive' | 'neutral' | 'challenging' | 'very_challenging'
    keyThemes: string[]
    recommendations: string[]
  }
}

export class TransitsCalculator {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏ –∏—Ö –æ—Ä–±—ã
  private static readonly ASPECTS = {
    conjunction: { degrees: 0, orb: 8, symbol: '‚òå', strength: 'strong' },
    opposition: { degrees: 180, orb: 8, symbol: '‚òç', strength: 'strong' },
    trine: { degrees: 120, orb: 6, symbol: '‚ñ≥', strength: 'strong' },
    square: { degrees: 90, orb: 6, symbol: '‚ñ°', strength: 'challenging' },
    sextile: { degrees: 60, orb: 4, symbol: '‚öπ', strength: 'medium' },
    quincunx: { degrees: 150, orb: 3, symbol: '‚öª', strength: 'weak' },
    semisextile: { degrees: 30, orb: 2, symbol: '‚ö∫', strength: 'weak' }
  }

  // –ü–ª–∞–Ω–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
  private static readonly TRANSIT_PLANETS = [
    'Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn',
    'Uranus', 'Neptune', 'Pluto'
  ]

  // –í–ª–∏—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏
  private static readonly PLANET_INFLUENCES = {
    Sun: {
      areas: ['–ª–∏—á–Ω–æ—Å—Ç—å', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–∑–¥–æ—Ä–æ–≤—å–µ', '–∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç'],
      nature: 'positive',
      intensity: 'high'
    },
    Moon: {
      areas: ['—ç–º–æ—Ü–∏–∏', '–¥–æ–º', '—Å–µ–º—å—è', '–∏–Ω—Ç—É–∏—Ü–∏—è'],
      nature: 'neutral',
      intensity: 'medium'
    },
    Mercury: {
      areas: ['–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', '–æ–±—É—á–µ–Ω–∏–µ', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '—Ç–æ—Ä–≥–æ–≤–ª—è'],
      nature: 'neutral',
      intensity: 'medium'
    },
    Venus: {
      areas: ['–ª—é–±–æ–≤—å', '–∫—Ä–∞—Å–æ—Ç–∞', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '—Ñ–∏–Ω–∞–Ω—Å—ã'],
      nature: 'positive',
      intensity: 'medium'
    },
    Mars: {
      areas: ['—ç–Ω–µ—Ä–≥–∏—è', '–¥–µ–π—Å—Ç–≤–∏–µ', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã', '—Å–ø–æ—Ä—Ç'],
      nature: 'challenging',
      intensity: 'high'
    },
    Jupiter: {
      areas: ['—É–¥–∞—á–∞', '—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ', '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'],
      nature: 'positive',
      intensity: 'high'
    },
    Saturn: {
      areas: ['–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è', '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–≤—Ä–µ–º—è'],
      nature: 'challenging',
      intensity: 'high'
    },
    Uranus: {
      areas: ['—Ä–µ–≤–æ–ª—é—Ü–∏—è', '–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏', '—Å–≤–æ–±–æ–¥–∞', '–≤–Ω–µ–∑–∞–ø–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è'],
      nature: 'neutral',
      intensity: 'high'
    },
    Neptune: {
      areas: ['–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å', '–∏–Ω—Ç—É–∏—Ü–∏—è', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–∏–ª–ª—é–∑–∏–∏'],
      nature: 'neutral',
      intensity: 'medium'
    },
    Pluto: {
      areas: ['—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è', '–≤–ª–∞—Å—Ç—å', '—Å–µ–∫—Ä–µ—Ç—ã', '–≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ'],
      nature: 'challenging',
      intensity: 'very_high'
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∏—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
   */
  static async calculateTransits(
    natalChart: ChartData,
    targetDate: Date = new Date()
  ): Promise<TransitReport> {
    console.log('üîÑ Calculating transits for date:', targetDate.toISOString())

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç
    const currentChart = await this.calculateCurrentChart(targetDate, natalChart)
    
    // –ù–∞—Ö–æ–¥–∏–º –∞—Å–ø–µ–∫—Ç—ã –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º–∏ –∏ –Ω–∞—Ç–∞–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    const transits = this.findTransits(natalChart, currentChart)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    const report = this.generateReport(natalChart, currentChart, transits, targetDate)
    
    console.log('‚úÖ Transits calculated:', report.summary)
    return report
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç
   */
  private static async calculateCurrentChart(
    date: Date,
    natalChart: ChartData
  ): Promise<ChartData> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Swiss Ephemeris –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
      const { calculateNatalChart } = await import('./swissEphemeris')
      
      const currentChart = await calculateNatalChart({
        year: date.getFullYear(),
        month: date.getMonth() + 1,
        day: date.getDate(),
        hour: date.getHours(),
        minute: date.getMinutes(),
        second: date.getSeconds(),
        latitude: (natalChart as any).birthData.latitude,
        longitude: (natalChart as any).birthData.longitude,
        timezone: 0
      })

      return currentChart
    } catch (error) {
      console.error('‚ùå Error calculating current chart:', error)
      
      // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      return this.generateMockCurrentChart(date, natalChart)
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫–æ–≤—ã–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç
   */
  private static generateMockCurrentChart(date: Date, natalChart: ChartData): ChartData {
    const timeDiff = (date.getTime() - new Date((natalChart as any).birthData.year, (natalChart as any).birthData.month - 1, (natalChart as any).birthData.day).getTime()) / (1000 * 60 * 60 * 24)
    
    // –°—Ä–µ–¥–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–ª–∞–Ω–µ—Ç –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –≤ –¥–µ–Ω—å
    const defaultSpeeds: { [key: string]: number } = {
      'Sun': 1.0,
      'Moon': 13.2,
      'Mercury': 1.4,
      'Venus': 1.2,
      'Mars': 0.5,
      'Jupiter': 0.08,
      'Saturn': 0.03,
      'Uranus': 0.01,
      'Neptune': 0.006,
      'Pluto': 0.004
    }
    
    return {
      ...natalChart,
      birthData: {
        ...(natalChart as any).birthData,
        year: date.getFullYear(),
        month: date.getMonth() + 1,
        day: date.getDate(),
        hour: date.getHours(),
        minute: date.getMinutes(),
        second: date.getSeconds(),
        latitude: (natalChart as any).birthData.latitude,
        longitude: (natalChart as any).birthData.longitude,
        timezone: 0
      },
      planets: natalChart.planets.map(planet => {
        const speed = planet.speed || defaultSpeeds[planet.name] || 1.0
        const newLongitude = (planet.longitude + (timeDiff * speed)) % 360
        
        return {
          ...planet,
          longitude: newLongitude >= 0 ? newLongitude : newLongitude + 360,
          speed: speed
        }
      })
    } as any
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Ç—Ä–∞–Ω–∑–∏—Ç—ã –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º–∏ –∏ –Ω–∞—Ç–∞–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
   */
  private static findTransits(natalChart: ChartData, currentChart: ChartData): TransitData[] {
    const transits: TransitData[] = []

    for (const transitPlanet of this.TRANSIT_PLANETS) {
      // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–ª–∞–Ω–µ—Ç—ã
      const currentPlanet = currentChart.planets.find(p => p.name === transitPlanet)
      if (!currentPlanet) continue

      // –ò—â–µ–º –∞—Å–ø–µ–∫—Ç—ã —Å –Ω–∞—Ç–∞–ª—å–Ω—ã–º–∏ –ø–ª–∞–Ω–µ—Ç–∞–º–∏
      for (const natalPlanet of natalChart.planets) {
        const aspect = this.calculateAspect(currentPlanet.longitude, natalPlanet.longitude)
        
        if (aspect) {
          const transit = this.createTransitData(
            transitPlanet,
            currentPlanet.longitude,
            natalPlanet.longitude,
            aspect,
            natalPlanet.name
          )
          transits.push(transit)
        }
      }

      // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Å–ø–µ–∫—Ç—ã —Å –∫—É—Å–ø–∏–¥–∞–º–∏ –¥–æ–º–æ–≤
      for (const house of natalChart.houses) {
        const aspect = this.calculateAspect(currentPlanet.longitude, (house as any).cusp)
        
        if (aspect) {
          const transit = this.createTransitData(
            transitPlanet,
            currentPlanet.longitude,
            (house as any).cusp,
            aspect,
            `–î–æ–º ${house.number}`
          )
          transits.push(transit)
        }
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∏–ª–µ –≤–ª–∏—è–Ω–∏—è
    return transits.sort((a, b) => this.getAspectStrength(b.aspect!) - this.getAspectStrength(a.aspect!))
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞—Å–ø–µ–∫—Ç –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–∑–∏—Ü–∏—è–º–∏
   */
  private static calculateAspect(pos1: number, pos2: number): TransitAspect | null {
    let diff = Math.abs(pos1 - pos2)
    if (diff > 180) diff = 360 - diff

    for (const [aspectName, aspectData] of Object.entries(this.ASPECTS)) {
      const aspectDiff = Math.abs(diff - aspectData.degrees)
      if (aspectDiff <= aspectData.orb) {
        return {
          type: aspectName as any,
          symbol: aspectData.symbol,
          orb: aspectDiff,
          strength: this.getStrengthByOrb(aspectDiff, aspectData.orb)
        }
      }
    }

    return null
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∏–ª—É –∞—Å–ø–µ–∫—Ç–∞ –ø–æ –æ—Ä–±—É
   */
  private static getStrengthByOrb(orb: number, maxOrb: number): 'exact' | 'strong' | 'medium' | 'weak' {
    const percentage = (maxOrb - orb) / maxOrb
    
    if (percentage >= 0.9) return 'exact'
    if (percentage >= 0.7) return 'strong'
    if (percentage >= 0.5) return 'medium'
    return 'weak'
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—ã –∞—Å–ø–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  private static getAspectStrength(aspect: TransitAspect): number {
    const strengthValues = { exact: 4, strong: 3, medium: 2, weak: 1 }
    const typeValues = { 
      conjunction: 4, opposition: 4, square: 3, trine: 3, 
      sextile: 2, quincunx: 1, semisextile: 1 
    }
    
    return strengthValues[aspect.strength] * typeValues[aspect.type]
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç–∞
   */
  private static createTransitData(
    planet: string,
    currentPos: number,
    natalPos: number,
    aspect: TransitAspect,
    target: string
  ): TransitData {
    const planetInfo = this.PLANET_INFLUENCES[planet as keyof typeof this.PLANET_INFLUENCES]
    const influence = this.calculateInfluence(planet, aspect, target)
    const description = this.generateDescription(planet, aspect, target, influence)

    return {
      planet,
      currentPosition: currentPos,
      natalPosition: natalPos,
      aspect,
      orb: aspect.orb,
      influence,
      description
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç–∞
   */
  private static calculateInfluence(
    planet: string,
    aspect: TransitAspect,
    target: string
  ): TransitInfluence {
    const planetInfo = this.PLANET_INFLUENCES[planet as keyof typeof this.PLANET_INFLUENCES]
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
    let intensity: 'high' | 'medium' | 'low' = 'medium'
    if (aspect.strength === 'exact' || aspect.strength === 'strong') {
      intensity = 'high'
    } else if (aspect.strength === 'weak') {
      intensity = 'low'
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—Ä–æ–¥—É –≤–ª–∏—è–Ω–∏—è
    let nature: 'positive' | 'negative' | 'neutral' | 'challenging' = 'neutral'
    if (aspect.type === 'conjunction' || aspect.type === 'trine' || aspect.type === 'sextile') {
      nature = planetInfo.nature === 'positive' ? 'positive' : 'neutral'
    } else if (aspect.type === 'square' || aspect.type === 'opposition') {
      nature = planetInfo.nature === 'challenging' ? 'challenging' : 'negative'
    } else {
      nature = 'neutral'
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç–∏ –≤–ª–∏—è–Ω–∏—è
    const areas = planetInfo.areas
    const duration = this.getTransitDuration(planet, aspect)
    const advice = this.generateAdvice(planet, aspect, nature)

    return {
      intensity,
      nature,
      areas,
      duration,
      advice
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∏—Ç–∞
   */
  private static getTransitDuration(planet: string, aspect: TransitAspect): string {
    const durations: Record<string, string> = {
      Sun: '1-2 –¥–Ω—è',
      Moon: '2-3 —á–∞—Å–∞',
      Mercury: '1-2 –¥–Ω—è',
      Venus: '1-2 –¥–Ω—è',
      Mars: '2-3 –¥–Ω—è',
      Jupiter: '2-3 –Ω–µ–¥–µ–ª–∏',
      Saturn: '2-3 –º–µ—Å—è—Ü–∞',
      Uranus: '6-12 –º–µ—Å—è—Ü–µ–≤',
      Neptune: '1-2 –≥–æ–¥–∞',
      Pluto: '2-3 –≥–æ–¥–∞'
    }

    return durations[planet] || '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ'
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç–∞
   */
  private static generateDescription(
    planet: string,
    aspect: TransitAspect,
    target: string,
    influence: TransitInfluence
  ): string {
    const planetNames: Record<string, string> = {
      Sun: '–°–æ–ª–Ω—Ü–µ',
      Moon: '–õ—É–Ω–∞',
      Mercury: '–ú–µ—Ä–∫—É—Ä–∏–π',
      Venus: '–í–µ–Ω–µ—Ä–∞',
      Mars: '–ú–∞—Ä—Å',
      Jupiter: '–Æ–ø–∏—Ç–µ—Ä',
      Saturn: '–°–∞—Ç—É—Ä–Ω',
      Uranus: '–£—Ä–∞–Ω',
      Neptune: '–ù–µ–ø—Ç—É–Ω',
      Pluto: '–ü–ª—É—Ç–æ–Ω'
    }

    const aspectNames: Record<string, string> = {
      conjunction: '—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
      opposition: '–æ–ø–ø–æ–∑–∏—Ü–∏—è',
      trine: '—Ç—Ä–∏–Ω',
      square: '–∫–≤–∞–¥—Ä–∞—Ç',
      sextile: '—Å–µ–∫—Å—Ç–∏–ª—å',
      quincunx: '–∫–≤–∏–Ω–∫–æ–Ω—Å',
      semisextile: '–ø–æ–ª—É—Å–µ–∫—Å—Ç–∏–ª—å'
    }

    const natureDescriptions: Record<string, string> = {
      positive: '–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ',
      negative: '–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ',
      neutral: '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ',
      challenging: '—Å–ª–æ–∂–Ω–æ–µ'
    }

    const intensityDescriptions: Record<string, string> = {
      high: '—Å–∏–ª—å–Ω–æ–µ',
      medium: '—É–º–µ—Ä–µ–Ω–Ω–æ–µ',
      low: '—Å–ª–∞–±–æ–µ'
    }

    return `${planetNames[planet]} –≤ ${aspectNames[aspect.type]} —Å ${target}. ${intensityDescriptions[influence.intensity]} ${natureDescriptions[influence.nature]} –≤–ª–∏—è–Ω–∏–µ.`
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–≤–µ—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∏—Ç—É
   */
  private static generateAdvice(
    planet: string,
    aspect: TransitAspect,
    nature: 'positive' | 'negative' | 'neutral' | 'challenging'
  ): string {
    const adviceMap: Record<string, Record<string, string>> = {
      Sun: {
        positive: '–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä—Å–∫–∏—Ö –∫–∞—á–µ—Å—Ç–≤ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.',
        negative: '–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏ –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.',
        neutral: '–§–æ–∫—É—Å –Ω–∞ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ –ª–∏—á–Ω—ã—Ö —Ü–µ–ª—è—Ö.',
        challenging: '–í—Ä–µ–º—è –∏—Å–ø—ã—Ç–∞–Ω–∏–π, –Ω–æ –∏ —Ä–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π.'
      },
      Moon: {
        positive: '–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–º–µ–π–Ω—ã—Ö –¥–µ–ª –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏.',
        negative: '–ò–∑–±–µ–≥–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –±–µ—Ä–µ–≥–∏—Ç–µ –Ω–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É.',
        neutral: '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–Ω—Ç—É–∏—Ü–∏—é –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.',
        challenging: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –ø–æ–º–æ–≥—É—Ç —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ.'
      },
      // –î–æ–±–∞–≤–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã...
    }

    return adviceMap[planet]?.[nature] || '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è.'
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç—á–µ—Ç
   */
  private static generateReport(
    natalChart: ChartData,
    currentChart: ChartData,
    transits: TransitData[],
    date: Date
  ): TransitReport {
    const majorTransits = transits.filter(t => 
      t.aspect?.strength === 'exact' || t.aspect?.strength === 'strong'
    )

    const overallInfluence = this.calculateOverallInfluence(transits)
    const keyThemes = this.extractKeyThemes(transits)
    const recommendations = this.generateRecommendations(transits, overallInfluence)

    return {
      date: date.toISOString(),
      natalChart,
      currentChart,
      transits,
      summary: {
        totalTransits: transits.length,
        majorTransits: majorTransits.length,
        overallInfluence,
        keyThemes,
        recommendations
      }
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
   */
  private static calculateOverallInfluence(transits: TransitData[]): 
    'very_positive' | 'positive' | 'neutral' | 'challenging' | 'very_challenging' {
    
    if (transits.length === 0) return 'neutral'

    let positiveScore = 0
    let negativeScore = 0

    for (const transit of transits) {
      const weight = this.getAspectStrength(transit.aspect!)
      
      if (transit.influence.nature === 'positive') {
        positiveScore += weight
      } else if (transit.influence.nature === 'negative' || transit.influence.nature === 'challenging') {
        negativeScore += weight
      }
    }

    const ratio = positiveScore / (positiveScore + negativeScore || 1)
    
    if (ratio >= 0.7) return 'very_positive'
    if (ratio >= 0.6) return 'positive'
    if (ratio <= 0.3) return 'very_challenging'
    if (ratio <= 0.4) return 'challenging'
    return 'neutral'
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã
   */
  private static extractKeyThemes(transits: TransitData[]): string[] {
    const themes: string[] = []
    
    for (const transit of transits) {
      if (transit.aspect?.strength === 'exact' || transit.aspect?.strength === 'strong') {
        themes.push(...transit.influence.areas)
      }
    }

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5
    return Array.from(new Set(themes)).slice(0, 5)
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  private static generateRecommendations(
    transits: TransitData[],
    overallInfluence: string
  ): string[] {
    const recommendations: string[] = []

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—â–µ–º—É –≤–ª–∏—è–Ω–∏—é
    switch (overallInfluence) {
      case 'very_positive':
        recommendations.push('–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.')
        recommendations.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π.')
        break
      case 'positive':
        recommendations.push('–•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Ä–æ—Å—Ç–∞.')
        break
      case 'challenging':
        recommendations.push('–í—Ä–µ–º—è –∏—Å–ø—ã—Ç–∞–Ω–∏–π - –±—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã –∏ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã.')
        recommendations.push('–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ä–µ—à–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º, –∞ –Ω–µ –Ω–∞ –∏—Ö –∏–∑–±–µ–≥–∞–Ω–∏–∏.')
        break
      case 'very_challenging':
        recommendations.push('–°–ª–æ–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - –∏–∑–±–µ–≥–∞–π—Ç–µ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.')
        recommendations.push('–§–æ–∫—É—Å –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞–±–æ—Ç–µ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–∏.')
        break
      default:
        recommendations.push('–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - —Ö–æ—Ä–æ—à–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.')
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç—Ä–∞–Ω–∑–∏—Ç–∞–º
    const majorTransits = transits.filter(t => 
      t.aspect?.strength === 'exact' || t.aspect?.strength === 'strong'
    )

    for (const transit of majorTransits.slice(0, 3)) {
      if (transit.influence.advice) {
        recommendations.push(transit.influence.advice)
      }
    }

    return recommendations.slice(0, 5)
  }
}

export default TransitsCalculator

