#!/usr/bin/env node

/**
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–µ–π
 * –ü–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å .env.local
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üîë –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –≤ .env.local\n');

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

async function updateEnvFile() {
  const envPath = path.join(process.cwd(), '.env.local');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  if (!fs.existsSync(envPath)) {
    console.log('‚ùå –§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    console.log('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.local –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.');
    rl.close();
    return;
  }

  console.log('üìã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):\n');

  // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const yandexKey = await askQuestion('üá∑üá∫ Yandex Geocoder API –∫–ª—é—á: ');
  const mapboxToken = await askQuestion('üåç MapBox Access Token: ');

  if (!yandexKey && !mapboxToken) {
    console.log('\n‚ö†Ô∏è –ö–ª—é—á–∏ –Ω–µ –≤–≤–µ–¥–µ–Ω—ã. –§–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω–µ–Ω.');
    rl.close();
    return;
  }

  try {
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    let envContent = fs.readFileSync(envPath, 'utf8');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á–∏
    if (yandexKey) {
      if (envContent.includes('YANDEX_GEOCODER_API_KEY=')) {
        envContent = envContent.replace(/YANDEX_GEOCODER_API_KEY=.*$/m, `YANDEX_GEOCODER_API_KEY=${yandexKey}`);
        console.log('‚úÖ Yandex Geocoder –∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        envContent += `\nYANDEX_GEOCODER_API_KEY=${yandexKey}`;
        console.log('‚úÖ Yandex Geocoder –∫–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω');
      }
    }

    if (mapboxToken) {
      if (envContent.includes('MAPBOX_ACCESS_TOKEN=')) {
        envContent = envContent.replace(/MAPBOX_ACCESS_TOKEN=.*$/m, `MAPBOX_ACCESS_TOKEN=${mapboxToken}`);
        console.log('‚úÖ MapBox —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        envContent += `\nMAPBOX_ACCESS_TOKEN=${mapboxToken}`;
        console.log('‚úÖ MapBox —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω');
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    fs.writeFileSync(envPath, envContent);
    
    console.log('\nüéâ –§–∞–π–ª .env.local —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    console.log('\nüß™ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É API:');
    console.log('   node test-yandex-api.js');
    console.log('\nüöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:');
    console.log('   npm run dev');

  } catch (error) {
    console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error.message);
  }

  rl.close();
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
console.log('üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏:');
console.log('   Yandex: https://developer.tech.yandex.ru/ ‚Üí –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí –ì–µ–æ–∫–æ–¥–µ—Ä');
console.log('   MapBox: https://mapbox.com/ ‚Üí Sign up ‚Üí Account ‚Üí Access tokens');
console.log('');

updateEnvFile().catch(console.error);
