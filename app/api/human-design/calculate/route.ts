import { NextRequest, NextResponse } from 'next/server'
import { calculateHumanDesign } from '@/lib/humanDesignEngine'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { birthDate, birthTime, latitude, longitude } = body

    console.log('üîÑ Human Design API called')
    console.log('üìù Request body:', { birthDate, birthTime, latitude, longitude })

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!birthDate || !birthTime || latitude === undefined || longitude === undefined) {
      return NextResponse.json(
        { error: 'Missing required fields: birthDate, birthTime, latitude, longitude' },
        { status: 400 }
      )
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    const [year, month, day] = birthDate.split('-').map(Number)
    const [hour, minute] = birthTime.split(':').map(Number)

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ BirthData
    const birthData = {
      year,
      month,
      day,
      hour: hour || 0,
      minute: minute || 0,
      second: 0,
      latitude: parseFloat(latitude),
      longitude: parseFloat(longitude),
      timezone: 0
    }

    console.log('üìù Parsed birth data:', birthData)

    // –†–∞—Å—á–µ—Ç Human Design
    console.log('üîÑ Starting Human Design calculation...')
    const result = await calculateHumanDesign(birthData)
    console.log('‚úÖ Human Design calculation completed, result:', {
      gates: result.gates?.length || 0,
      channels: result.channels?.length || 0,
      centers: result.centers?.length || 0
    })

    console.log('‚úÖ Human Design calculation completed')
    console.log('üìä Result:', {
      type: result.type,
      strategy: result.strategy,
      authority: result.authority,
      profile: result.profile,
      centers: result.centers.filter(c => c.defined).length,
      channels: result.channels.length,
      gates: result.gates.length
    })

    return NextResponse.json(result)

  } catch (error) {
    console.error('‚ùå Error in Human Design API:', error)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    const mockResult = {
      type: 'Generator',
      strategy: 'Respond',
      authority: 'Sacral',
      profile: '1/4',
      definition: 'Single Definition',
      incarnationCross: {
        name: 'Cross of Planning',
        description: '–ö—Ä–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–º—É –º—ã—à–ª–µ–Ω–∏—é –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. –õ—é–¥–∏ —Å —ç—Ç–∏–º –∫—Ä–µ—Å—Ç–æ–º –æ–±–ª–∞–¥–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ—Ç—å –±—É–¥—É—â–µ–µ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞–Ω—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π.',
        characteristics: [
          '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
          '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é',
          '–í–∏–¥–µ–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ',
          '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
          '–õ–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞'
        ],
        lifeMission: [
          '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π',
          '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö',
          '–†–∞–∑–≤–∏—Ç–∏–µ –≤–∏–¥–µ–Ω–∏—è –±—É–¥—É—â–µ–≥–æ',
          '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
          '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
        ],
        strengths: [
          '–û—Ç–ª–∏—á–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
          '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–∏–¥–µ—Ç—å –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É',
          '–õ–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞',
          '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
          '–£–º–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö'
        ],
        challenges: [
          '–ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –∂–µ—Å—Ç–∫–∏–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏',
          '–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∏–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏–µ–π',
          '–î–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –¥—Ä—É–≥–∏—Ö',
          '–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º—É',
          '–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º'
        ],
        advice: [
          '–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –≥–∏–±–∫–æ—Å—Ç—å –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏',
          '–£—á–∏—Ç–µ—Å—å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏',
          '–ü–æ–∑–≤–æ–ª—è–π—Ç–µ –¥—Ä—É–≥–∏–º –≤–Ω–æ—Å–∏—Ç—å —Å–≤–æ–π –≤–∫–ª–∞–¥',
          '–ë–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ–π—Å—Ç–≤–∏–µ–º',
          '–ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–∫ —á–∞—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞'
        ]
      },
      centers: [
        { name: 'G-—Ü–µ–Ω—Ç—Ä', defined: false, gates: [], channels: [] },
        { name: 'S-—Ü–µ–Ω—Ç—Ä', defined: true, gates: [2, 14], channels: ['2-14'] },
        { name: 'T-—Ü–µ–Ω—Ç—Ä', defined: true, gates: [7, 31], channels: ['7-31'] },
        { name: 'H-—Ü–µ–Ω—Ç—Ä', defined: false, gates: [], channels: [] },
        { name: 'E-—Ü–µ–Ω—Ç—Ä', defined: false, gates: [], channels: [] },
        { name: 'A-—Ü–µ–Ω—Ç—Ä', defined: false, gates: [], channels: [] },
        { name: 'P-—Ü–µ–Ω—Ç—Ä', defined: true, gates: [5, 15], channels: ['5-15'] },
        { name: 'L-—Ü–µ–Ω—Ç—Ä', defined: false, gates: [], channels: [] },
        { name: 'R-—Ü–µ–Ω—Ç—Ä', defined: false, gates: [], channels: [] }
      ],
      channels: [
        {
          number: '2-14',
          name: '–ü—É–ª—å—Å',
          gates: [2, 14],
          center1: 'G',
          center2: 'S',
          description: '–ö–∞–Ω–∞–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å–∏–ª—ã'
        },
        {
          number: '7-31',
          name: '–õ–∏–¥–µ—Ä',
          gates: [7, 31],
          center1: 'G',
          center2: 'T',
          description: '–ö–∞–Ω–∞–ª –ª–∏–¥–µ—Ä—Å—Ç–≤–∞ –∏ –≤–ª–∏—è–Ω–∏—è'
        },
        {
          number: '5-15',
          name: '–†–∏—Ç–º',
          gates: [5, 15],
          center1: 'G',
          center2: 'S',
          description: '–ö–∞–Ω–∞–ª —Ä–∏—Ç–º–∞ –∏ —Å–∫—Ä–æ–º–Ω–æ—Å—Ç–∏'
        }
      ],
      gates: [
        { number: 2, name: '–ü—Ä–∏–Ω—è—Ç–∏–µ', planet: 'Sun', line: 1, color: 1, tone: 1, base: 1 },
        { number: 14, name: '–í–ª–∞—Å—Ç—å', planet: 'Moon', line: 2, color: 2, tone: 2, base: 2 },
        { number: 7, name: '–ê—Ä–º–∏—è', planet: 'Mercury', line: 3, color: 3, tone: 3, base: 3 },
        { number: 31, name: '–í–ª–∏—è–Ω–∏–µ', planet: 'Venus', line: 4, color: 4, tone: 4, base: 4 },
        { number: 5, name: '–û–∂–∏–¥–∞–Ω–∏–µ', planet: 'Mars', line: 5, color: 5, tone: 5, base: 5 },
        { number: 15, name: '–°–∫—Ä–æ–º–Ω–æ—Å—Ç—å', planet: 'Jupiter', line: 6, color: 6, tone: 6, base: 6 }
      ],
      planets: [],
      notSelf: {
        type: 'Frustration',
        strategy: 'Not following strategy',
        authority: 'Not following authority'
      }
    }

    return NextResponse.json(mockResult)
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'Human Design Calculation API',
    description: 'Calculate Human Design chart with full calculations',
    endpoint: '/api/human-design/calculate',
    method: 'POST',
    requiredFields: ['birthDate', 'birthTime', 'latitude', 'longitude'],
    example: {
      birthDate: '1983-11-14',
      birthTime: '07:15',
      latitude: 56.514828,
      longitude: 57.205193
    }
  })
}

