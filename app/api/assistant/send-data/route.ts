import { NextRequest, NextResponse } from 'next/server'

interface AssistantData {
  user: {
    profile: {
      id: string
      name: string
      birthDate: string
      birthTime: string
      birthPlace: string
      coordinates: {
        lat: number
        lng: number
      }
    }
  }
  numerology: {
    lifePathNumber: number
    expressionNumber: number
    soulUrgeNumber: number
    personalityNumber: number
    dailyMetrics: {
      dayNumber: number
      personalDayNumber: number
      energyLevel: number
      favorableNumbers: number[]
      recommendedColors: string[]
      bestTimes: string[]
      weeklyEnergy: number[]
      todayScore: number
      moodScore: number
      creativityScore: number
      socialScore: number
    }
  }
  humanDesign: {
    type: string
    strategy: string
    authority: string
    profile: string
    definition: string
    centers: Array<{
      name: string
      defined: boolean
      color: string
    }>
    channels: Array<{
      number: string
      name: string
      gates: string[]
    }>
    gates: Array<{
      number: string
      name: string
      center: string
    }>
    incarnationCross: {
      name: string
      description: string
    }
  }
  astrology: {
    sunSign: string
    moonSign: string
    risingSign: string
    natalChart: {
      planets: Array<{
        name: string
        longitude: number
        latitude: number
      }>
      houses: Array<{
        cusp: number
      }>
      ascendant: number
      mc: number
    }
    transits: {
      totalTransits: number
      majorTransits: number
      overallInfluence: string
      keyThemes: string[]
      recommendations: string[]
      activeTransits: Array<{
        planet: string
        aspect: string
        influence: string
      }>
    }
  }
  timestamp: string
  sessionId: string
}

export async function POST(request: NextRequest) {
  try {
    const data: AssistantData = await request.json()
    
    console.log('ü§ñ Assistant data received:', {
      userId: data.user.profile.id,
      name: data.user.profile.name,
      module: 'all',
      timestamp: data.timestamp
    })

    // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram Bot API
    console.log('üì§ Sending data to Telegram Bot API...')
    let result
    try {
      result = await sendToTelegramBot(data)
      console.log('‚úÖ Telegram Bot response:', result)
    } catch (error) {
      console.log('‚ö†Ô∏è Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª:', error instanceof Error ? error.message : String(error))
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –∫–∞–∫ fallback
      const fs = require('fs')
      const path = require('path')
      
      const fileName = `assistant_data_${data.sessionId}.json`
      const filePath = path.join(process.cwd(), 'assistant_data', fileName)
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const dir = path.dirname(filePath)
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true })
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      fs.writeFileSync(filePath, JSON.stringify(data, null, 2))
      
      result = {
        success: true,
        message: '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª (Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)',
        filePath: filePath
      }
    }
    
    return NextResponse.json({
      success: true,
      message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã',
      data: {
        sessionId: data.sessionId,
        timestamp: data.timestamp,
        modules: ['numerology', 'humanDesign', 'astrology'],
        result: result
      }
    })

  } catch (error) {
    console.error('‚ùå Error sending data to assistant:', error)
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–Ω–µ—à–Ω–µ–º—É –±–æ—Ç—É-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
async function sendToTelegramBot(data: AssistantData) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  const chatId = (data.user.profile as any).telegramId
  
  if (!botToken) {
    console.log('‚ö†Ô∏è Telegram bot token not configured')
    return { success: false, message: 'Telegram bot token not configured' }
  }
  
  if (!chatId) {
    console.log('‚ö†Ô∏è Telegram user ID not found in data')
    return { success: false, message: 'Telegram user ID not found' }
  }
  
  console.log('üì§ Sending to Telegram Bot API:', {
    botToken: botToken.substring(0, 10) + '...',
    chatId: chatId,
    dataSize: JSON.stringify(data).length
  })
  
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const message = formatTelegramMessage(data)
    
    const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`
    
    const response = await fetch(telegramUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      })
    })
    
    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(`Telegram API responded with ${response.status}: ${errorText}`)
    }
    
    const result = await response.json()
    console.log('‚úÖ Telegram bot response:', result)
    return { success: true, message: 'Data sent to Telegram bot successfully' }
    
  } catch (error) {
    console.error('‚ùå Error sending to Telegram bot:', error)
    throw error
  }
}

function formatTelegramMessage(data: AssistantData): string {
  const { user, numerology, humanDesign, astrology } = data
  
  return `ü§ñ <b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã!</b>

üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>
‚Ä¢ –ò–º—è: ${user.profile.name}
‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${user.profile.birthDate}
‚Ä¢ –í—Ä–µ–º—è: ${user.profile.birthTime}
‚Ä¢ –ú–µ—Å—Ç–æ: ${user.profile.birthPlace}
‚Ä¢ Telegram ID: ${(user.profile as any).telegramId || 'N/A'}

üìä <b>–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è:</b>
‚Ä¢ –ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏: ${numerology.lifePathNumber}
‚Ä¢ –ß–∏—Å–ª–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: ${numerology.expressionNumber}
‚Ä¢ –ß–∏—Å–ª–æ –¥—É—à–∏: ${numerology.soulUrgeNumber}
‚Ä¢ –ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏: ${numerology.personalityNumber}
‚Ä¢ –≠–Ω–µ—Ä–≥–∏—è –¥–Ω—è: ${numerology.dailyMetrics.energyLevel}%

üß¨ <b>Human Design:</b>
‚Ä¢ –¢–∏–ø: ${humanDesign.type}
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${humanDesign.strategy}
‚Ä¢ –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç: ${humanDesign.authority}
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å: ${humanDesign.profile}

‚≠ê <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è:</b>
‚Ä¢ –°–æ–ª–Ω—Ü–µ: ${astrology.sunSign}
‚Ä¢ –õ—É–Ω–∞: ${astrology.moonSign}
‚Ä¢ –í–æ—Å—Ö–æ–¥—è—â–∏–π: ${astrology.risingSign}
‚Ä¢ –¢—Ä–∞–Ω–∑–∏—Ç—ã: ${astrology.transits.totalTransits} –∞–∫—Ç–∏–≤–Ω—ã—Ö

üïê <b>–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏:</b> ${new Date(data.timestamp).toLocaleString('ru-RU')}
üÜî <b>ID —Å–µ—Å—Å–∏–∏:</b> ${data.sessionId}

<i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!</i>`
}
