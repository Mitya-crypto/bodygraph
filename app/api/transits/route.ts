// app/api/transits/route.ts

import { NextRequest, NextResponse } from 'next/server'
import TransitsCalculator, { TransitReport } from '@/lib/transitsCalculator'
import { ChartData } from '@/lib/swissEphemeris'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { 
      natalChart, 
      targetDate = new Date().toISOString(),
      includeMinorTransits = false 
    } = body

    console.log('üîÑ Transits API called')
    console.log('üìù Full request body:', JSON.stringify(body, null, 2))
    console.log('üìù natalChart:', natalChart)
    console.log('üìù Has birthData:', !!natalChart?.birthData)
    console.log('üìù Has planets:', !!natalChart?.planets)

    if (!natalChart) {
      console.error('‚ùå No natal chart provided')
      return NextResponse.json({
        success: false,
        error: 'Natal chart data is required'
      }, { status: 400 })
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
    if (!natalChart.birthData || !natalChart.planets) {
      console.error('‚ùå Invalid natal chart structure:', {
        hasBirthData: !!natalChart.birthData,
        hasPlanets: !!natalChart.planets,
        natalChartKeys: Object.keys(natalChart)
      })
      return NextResponse.json({
        success: false,
        error: `Invalid natal chart data structure. Missing: ${!natalChart.birthData ? 'birthData' : ''} ${!natalChart.planets ? 'planets' : ''}`
      }, { status: 400 })
    }

    // –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É
    const targetDateObj = new Date(targetDate)
    if (isNaN(targetDateObj.getTime())) {
      return NextResponse.json({
        success: false,
        error: 'Invalid target date format'
      }, { status: 400 })
    }

    console.log('üìä Calculating transits for:', {
      birthDate: `${natalChart.birthData.year}-${natalChart.birthData.month}-${natalChart.birthData.day}`,
      targetDate: targetDateObj.toISOString(),
      location: `${natalChart.birthData.latitude}, ${natalChart.birthData.longitude}`
    })

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∏—Ç—ã
    const transitReport = await TransitsCalculator.calculateTransits(natalChart, targetDateObj)

    // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∏–Ω–æ—Ä–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!includeMinorTransits) {
      transitReport.transits = transitReport.transits.filter(transit => 
        transit.aspect?.strength === 'exact' || 
        transit.aspect?.strength === 'strong' ||
        transit.aspect?.strength === 'medium'
      )
    }

    console.log('‚úÖ Transits calculated successfully:', {
      totalTransits: transitReport.transits.length,
      majorTransits: transitReport.summary.majorTransits,
      overallInfluence: transitReport.summary.overallInfluence
    })

    return NextResponse.json({
      success: true,
      data: transitReport
    })

  } catch (error) {
    console.error('‚ùå Transits API error:', error)
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred',
      fallback: true
    }, { status: 500 })
  }
}

// GET endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∏—Ç–∞—Ö
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const date = searchParams.get('date')
    
    console.log('üìÖ Transits info request for date:', date)

    const info = {
      description: 'API –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤',
      features: [
        '–†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –ø–ª–∞–Ω–µ—Ç',
        '–ê–Ω–∞–ª–∏–∑ –∞—Å–ø–µ–∫—Ç–æ–≤ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∏—Ç–Ω—ã–º–∏ –∏ –Ω–∞—Ç–∞–ª—å–Ω—ã–º–∏ –ø–ª–∞–Ω–µ—Ç–∞–º–∏',
        '–û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏',
        '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏'
      ],
      planets: [
        'Sun', 'Moon', 'Mercury', 'Venus', 'Mars',
        'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto'
      ],
      aspects: [
        'conjunction (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)',
        'opposition (–æ–ø–ø–æ–∑–∏—Ü–∏—è)', 
        'trine (—Ç—Ä–∏–Ω)',
        'square (–∫–≤–∞–¥—Ä–∞—Ç)',
        'sextile (—Å–µ–∫—Å—Ç–∏–ª—å)',
        'quincunx (–∫–≤–∏–Ω–∫–æ–Ω—Å)',
        'semisextile (–ø–æ–ª—É—Å–µ–∫—Å—Ç–∏–ª—å)'
      ],
      usage: {
        method: 'POST',
        required: ['natalChart'],
        optional: ['targetDate', 'includeMinorTransits'],
        example: {
          natalChart: 'ChartData object from astrology API',
          targetDate: '2024-01-15T12:00:00.000Z',
          includeMinorTransits: false
        }
      }
    }

    return NextResponse.json({
      success: true,
      info
    })

  } catch (error) {
    console.error('‚ùå Transits info error:', error)
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    }, { status: 500 })
  }
}

