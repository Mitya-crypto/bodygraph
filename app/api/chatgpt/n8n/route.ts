import { NextRequest, NextResponse } from 'next/server'
import { executeN8NWorkflow } from '@/lib/n8nApi'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { message, context, isPremium, userProfile } = body

    console.log('ü§ñ ChatGPT n8n request:', {
      message: message?.substring(0, 100) + '...',
      isPremium,
      hasProfile: !!userProfile,
    })

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è n8n workflow
    const workflowData = {
      message: message || '–ü—Ä–∏–≤–µ—Ç',
      isPremium: isPremium || false,
      userProfile: userProfile || null,
      context: context || {},
      timestamp: new Date().toISOString(),
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID workflow –¥–ª—è ChatGPT
    const workflowId = isPremium ? 'chatgpt-premium-workflow' : 'chatgpt-basic-workflow'

    // –í—ã–ø–æ–ª–Ω—è–µ–º n8n workflow
    const execution = await executeN8NWorkflow(workflowId, workflowData)

    if (!execution) {
      throw new Error('Failed to execute ChatGPT workflow')
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ workflow
    const response = execution.resultData?.response || 
                    execution.data?.response || 
                    getFallbackResponse(isPremium)

    console.log('‚úÖ ChatGPT n8n response generated')

    return NextResponse.json({
      success: true,
      response,
      model: isPremium ? 'gpt-4-via-n8n' : 'gpt-3.5-via-n8n',
      isPremium,
      executionId: execution.id,
    })

  } catch (error) {
    console.error('‚ùå ChatGPT n8n error:', error)
    
    // Fallback response
    const fallbackResponse = getFallbackResponse(false)
    
    return NextResponse.json({
      success: false,
      response: fallbackResponse,
      error: error instanceof Error ? error.message : 'Unknown error',
      isFallback: true,
    })
  }
}

function getFallbackResponse(isPremium: boolean): string {
  const basicResponses = [
    "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ n8n. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑–¥–µ–ª–∞–º –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.",
  ]

  const premiumResponses = [
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, ChatGPT-5 —á–µ—Ä–µ–∑ n8n –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∞–Ω–∞–ª–∏–∑–∞.",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –∏ Human Design.",
  ]

  const responses = isPremium ? premiumResponses : basicResponses
  return responses[Math.floor(Math.random() * responses.length)]
}



