#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ n8n workflow'–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/setup-n8n-workflows.js
 */

const fs = require('fs')
const path = require('path')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è n8n
const N8N_CONFIG = {
  baseUrl: process.env.N8N_BASE_URL || 'http://localhost:5678',
  apiToken: process.env.N8N_API_TOKEN || '',
}

// ChatGPT Basic Workflow
const chatgptBasicWorkflow = {
  name: 'ChatGPT Basic',
  nodes: [
    {
      parameters: {
        httpMethod: 'POST',
        path: 'chatgpt-basic',
        responseMode: 'responseNode',
        options: {}
      },
      id: 'webhook-trigger',
      name: 'Webhook',
      type: 'n8n-nodes-base.webhook',
      typeVersion: 1,
      position: [240, 300],
      webhookId: 'chatgpt-basic-webhook'
    },
    {
      parameters: {
        model: 'gpt-3.5-turbo',
        options: {
          maxTokens: 300,
          temperature: 0.7,
          systemMessage: '–¢—ã –±–∞–∑–æ–≤—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ BodyGraph. –ü–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏, Human Design –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.\n\n–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (–¥–æ 3-4 –∞–±–∑–∞—Ü–µ–≤), –¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —á–∏—Å–ª–∞—Ö –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö.\n\n–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∫—Ä–∞—Ç–∫–∏–º.'
        },
        messages: {
          values: [
            {
              role: 'system',
              content: '={{ $json.systemMessage }}'
            },
            {
              role: 'user', 
              content: '={{ $json.message }}'
            }
          ]
        }
      },
      id: 'openai-node',
      name: 'OpenAI GPT-3.5',
      type: 'n8n-nodes-base.openAi',
      typeVersion: 1,
      position: [460, 300]
    },
    {
      parameters: {
        options: {},
        respondWith: 'json',
        responseBody: '={{ { "success": true, "response": $json.choices[0].message.content, "model": "gpt-3.5-turbo", "timestamp": $now } }}'
      },
      id: 'response-node',
      name: 'Respond to Webhook',
      type: 'n8n-nodes-base.respondToWebhook',
      typeVersion: 1,
      position: [680, 300]
    }
  ],
  connections: {
    'Webhook': {
      main: [
        [
          {
            node: 'OpenAI GPT-3.5',
            type: 'main',
            index: 0
          }
        ]
      ]
    },
    'OpenAI GPT-3.5': {
      main: [
        [
          {
            node: 'Respond to Webhook',
            type: 'main',
            index: 0
          }
        ]
      ]
    }
  },
  active: true,
  settings: {},
  staticData: null,
  tags: ['chatgpt', 'basic', 'bodygraph']
}

// ChatGPT Premium Workflow
const chatgptPremiumWorkflow = {
  name: 'ChatGPT Premium',
  nodes: [
    {
      parameters: {
        httpMethod: 'POST',
        path: 'chatgpt-premium',
        responseMode: 'responseNode',
        options: {}
      },
      id: 'webhook-trigger-premium',
      name: 'Webhook',
      type: 'n8n-nodes-base.webhook',
      typeVersion: 1,
      position: [240, 300],
      webhookId: 'chatgpt-premium-webhook'
    },
    {
      parameters: {
        model: 'gpt-4',
        options: {
          maxTokens: 800,
          temperature: 0.7,
          systemMessage: '–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ –¥—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏, Human Design –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏. –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ BodyGraph.\n\n–¢–í–û–Ø –≠–ö–°–ü–ï–†–¢–ò–ó–ê:\n- –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è: Life Path, Expression, Soul Urge, Personality —á–∏—Å–ª–∞, –º–∞—Å—Ç–µ—Ä-—á–∏—Å–ª–∞\n- Human Design: —Ç–∏–ø—ã, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—ã, –∫–∞–Ω–∞–ª—ã, –≤–æ—Ä–æ—Ç–∞, —Ü–µ–Ω—Ç—Ä—ã\n- –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è: –Ω–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã, –ø–ª–∞–Ω–µ—Ç—ã –≤ –∑–Ω–∞–∫–∞—Ö, –∞—Å–ø–µ–∫—Ç—ã, —Ç—Ä–∞–Ω–∑–∏—Ç—ã\n\n–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:\n- –ú—É–¥—Ä—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π\n- –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π\n- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n- –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: –¥—É—Ö–æ–≤–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å + –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ\n\n–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê (–ü–†–ï–ú–ò–£–ú):\n1. –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n2. –ö–ª—é—á–µ–≤—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã (4-5 –ø—É–Ω–∫—Ç–æ–≤)\n3. –û–±–ª–∞—Å—Ç–∏ —Ä–æ—Å—Ç–∞ (3-4 –ø—É–Ω–∫—Ç–∞)\n4. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (5-6 —Å–æ–≤–µ—Ç–æ–≤)\n5. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è –∏–ª–∏ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è\n\n–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º.'
        },
        messages: {
          values: [
            {
              role: 'system',
              content: '={{ $json.systemMessage }}'
            },
            {
              role: 'user',
              content: '={{ $json.message }}'
            }
          ]
        }
      },
      id: 'openai-node-premium',
      name: 'OpenAI GPT-4',
      type: 'n8n-nodes-base.openAi',
      typeVersion: 1,
      position: [460, 300]
    },
    {
      parameters: {
        options: {},
        respondWith: 'json',
        responseBody: '={{ { "success": true, "response": $json.choices[0].message.content, "model": "gpt-4", "timestamp": $now, "isPremium": true } }}'
      },
      id: 'response-node-premium',
      name: 'Respond to Webhook',
      type: 'n8n-nodes-base.respondToWebhook',
      typeVersion: 1,
      position: [680, 300]
    }
  ],
  connections: {
    'Webhook': {
      main: [
        [
          {
            node: 'OpenAI GPT-4',
            type: 'main',
            index: 0
          }
        ]
      ]
    },
    'OpenAI GPT-4': {
      main: [
        [
          {
            node: 'Respond to Webhook',
            type: 'main',
            index: 0
          }
        ]
      ]
    }
  },
  active: true,
  settings: {},
  staticData: null,
  tags: ['chatgpt', 'premium', 'bodygraph']
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è workflow —á–µ—Ä–µ–∑ API
async function createWorkflow(workflowData) {
  try {
    const response = await fetch(`${N8N_CONFIG.baseUrl}/api/v1/workflows`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${N8N_CONFIG.apiToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(workflowData)
    })

    if (response.ok) {
      const result = await response.json()
      console.log(`‚úÖ Workflow "${workflowData.name}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`)
      console.log(`   ID: ${result.id}`)
      console.log(`   Webhook URL: ${N8N_CONFIG.baseUrl}/webhook/${workflowData.nodes[0].parameters.path}`)
      return result.id
    } else {
      const error = await response.text()
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è workflow "${workflowData.name}":`, error)
      return null
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ n8n:`, error.message)
    return null
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function setupWorkflows() {
  console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ n8n workflow\'–æ–≤ –¥–ª—è BodyGraph...\n')

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  if (!N8N_CONFIG.apiToken) {
    console.error('‚ùå N8N_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    console.log('   –î–æ–±–∞–≤—å—Ç–µ N8N_API_TOKEN –≤ .env.local')
    process.exit(1)
  }

  console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ n8n: ${N8N_CONFIG.baseUrl}`)

  // –°–æ–∑–¥–∞–µ–º workflow'—ã
  const basicId = await createWorkflow(chatgptBasicWorkflow)
  console.log('')
  
  const premiumId = await createWorkflow(chatgptPremiumWorkflow)
  console.log('')

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  if (basicId && premiumId) {
    const configUpdate = `
// –û–±–Ω–æ–≤–∏—Ç–µ lib/n8nConfig.ts —Å —ç—Ç–∏–º–∏ ID:
export const N8N_WORKFLOW_IDS = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
  scenario1: 'scenario-1-workflow-id',
  scenario2: 'scenario-2-workflow-id',
  
  // ChatGPT workflow'—ã
  chatgptBasic: '${basicId}',
  chatgptPremium: '${premiumId}',
}
`

    console.log('üìã –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:')
    console.log(configUpdate)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    fs.writeFileSync('n8n-workflow-ids.txt', configUpdate)
    console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ n8n-workflow-ids.txt')
  }

  console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  console.log('üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
  console.log('   1. –û–±–Ω–æ–≤–∏—Ç–µ lib/n8nConfig.ts —Å –Ω–æ–≤—ã–º–∏ ID')
  console.log('   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
  console.log('   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ ChatGPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞')
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  setupWorkflows().catch(console.error)
}

module.exports = { setupWorkflows, chatgptBasicWorkflow, chatgptPremiumWorkflow }



