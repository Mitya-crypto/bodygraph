// components/HumanDesignDisplay.tsx
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { User, Zap, Target, Heart, Brain, Shield, Star, Users, Download } from 'lucide-react'
import { UserProfile } from '@/store/appStore'
import { fetchHumanDesignData, formatProfileForHumanDesign } from '@/lib/humanDesignApi'
import { calculateHumanDesign } from '@/lib/humanDesignEngine'
import { useRouter } from 'next/navigation'
import PDFGenerator from '@/lib/pdfGenerator'

interface HumanDesignDisplayProps {
  userProfile: UserProfile
  language: 'en' | 'ru'
}

interface HumanDesignData {
  type: string
  strategy: string
  authority: string
  profile: string
  definition: string
  innerAuthority: string
  incarnationCross: string
  channels: Array<{
    number: string
    name: string
    description: string
  }>
  gates: Array<{
    number: string
    name: string
    description: string
  }>
  centers: {
    defined: string[]
    undefined: string[]
  }
}

export function HumanDesignDisplay({ userProfile, language }: HumanDesignDisplayProps) {
  const [humanDesignData, setHumanDesignData] = useState<HumanDesignData | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false)
  const [lastCalculationHash, setLastCalculationHash] = useState<string>('')
  const router = useRouter()

  console.log('üîç HumanDesignDisplay received userProfile:', userProfile)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
  if (!userProfile || !userProfile.name || !userProfile.birthDate) {
    return (
      <div className="space-y-6">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="cosmic-card text-center"
        >
          <div className="w-16 h-16 bg-gradient-to-br from-orange-500 to-orange-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <User className="w-8 h-8 text-white" />
          </div>
          <h2 className="cosmic-subtitle text-xl mb-2">
            {language === 'ru' ? '–ù–µ–æ–±—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å' : 'Profile Required'}
          </h2>
          <p className="text-cosmic-300 mb-4">
            {language === 'ru' 
              ? '–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ Human Design –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏.' 
              : 'A profile with birth data is required for Human Design analysis.'
            }
          </p>
        </motion.div>
      </div>
    )
  }

  // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const createProfileHash = (profile: UserProfile): string => {
    return `${profile.birthDate}-${profile.birthTime}-${profile.coordinates?.lat}-${profile.coordinates?.lng}`
  }

  useEffect(() => {
    if (userProfile && userProfile.name && userProfile.birthDate) {
      const currentHash = createProfileHash(userProfile)
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (currentHash !== lastCalculationHash) {
        console.log('üîÑ Profile changed, recalculating Human Design...')
        setLastCalculationHash(currentHash)
        fetchHumanDesignDataFromApi()
      }
    }
  }, [userProfile?.birthDate, userProfile?.birthTime, userProfile?.coordinates?.lat, userProfile?.coordinates?.lng, lastCalculationHash])


  const fetchHumanDesignDataFromApi = async () => {
    setIsLoading(true)
    setError(null)

    try {
      console.log('üîÑ Fetching Human Design data for profile:', userProfile)

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É Human Design Engine
      try {
        const [year, month, day] = userProfile.birthDate.split('-').map(Number)
        const [hour, minute] = userProfile.birthTime.split(':').map(Number)
        
        const birthData = {
          year,
          month,
          day,
          hour: hour || 0,
          minute: minute || 0,
          second: 0,
          latitude: userProfile.coordinates?.lat || 0,
          longitude: userProfile.coordinates?.lng || 0,
          timezone: 0
        }

        console.log('üîÑ Calculating with Human Design Engine:', birthData)
        const engineResult = await calculateHumanDesign(birthData)
        console.log('‚úÖ Human Design Engine result:', engineResult)
        
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥ –Ω–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        const adaptedData: HumanDesignData = {
          type: engineResult.type,
          strategy: engineResult.strategy,
          authority: engineResult.authority,
          profile: engineResult.profile,
          definition: engineResult.definition,
          innerAuthority: engineResult.authority,
          incarnationCross: engineResult.incarnationCross.name,
          channels: engineResult.channels.map(channel => ({
            number: channel.number,
            name: channel.name,
            description: channel.description
          })),
          gates: engineResult.gates.map(gate => ({
            number: gate.number.toString(),
            name: gate.name,
            description: `–í–æ—Ä–æ—Ç–∞ ${gate.number}: ${gate.name}`
          })),
          centers: {
            defined: engineResult.centers.filter(c => c.defined).map(c => c.name),
            undefined: engineResult.centers.filter(c => !c.defined).map(c => c.name)
          }
        }
        
        setHumanDesignData(adaptedData)
        return
      } catch (engineError) {
        console.warn('‚ö†Ô∏è Human Design Engine failed, falling back to API:', engineError)
      }

      // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É API
      const apiRequest = formatProfileForHumanDesign(userProfile)
      
      if (!apiRequest) {
        throw new Error('Invalid profile data for Human Design')
      }

      console.log('üîÑ Fetching Human Design data from API:', apiRequest)

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
      const apiData = await fetchHumanDesignData(apiRequest)
      
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –Ω–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      const adaptedData: HumanDesignData = {
        ...apiData,
        channels: apiData.channels.map(channel => ({
          ...channel,
          description: language === 'ru' 
            ? translateChannelDescription(channel.description)
            : channel.description
        })),
        gates: apiData.gates.map(gate => ({
          ...gate,
          description: language === 'ru' 
            ? translateGateDescription(gate.description)
            : gate.description
        }))
      }
      
      setHumanDesignData(adaptedData)
      console.log('‚úÖ Human Design data loaded:', adaptedData)

    } catch (error) {
      console.error('‚ùå Error fetching Human Design data:', error)
      setError(language === 'ru' ? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö Human Design' : 'Error loading Human Design data')
    } finally {
      setIsLoading(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏–π
  const translateChannelDescription = (description: string) => {
    const translations: { [key: string]: string } = {
      'Channel of inspiration and creativity': '–ö–∞–Ω–∞–ª –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞',
      'Channel of awakening and awareness': '–ö–∞–Ω–∞–ª –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏',
      'Channel of charisma and transformation': '–ö–∞–Ω–∞–ª —Ö–∞—Ä–∏–∑–º—ã –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏'
    }
    return translations[description] || description
  }

  const translateGateDescription = (description: string) => {
    const translations: { [key: string]: string } = {
      'Gate of self-expression and creativity': '–í–æ—Ä–æ—Ç–∞ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞',
      'Gate of contribution and leadership': '–í–æ—Ä–æ—Ç–∞ –≤–∫–ª–∞–¥–∞ –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞',
      'Gate of self-love and behavior': '–í–æ—Ä–æ—Ç–∞ —Å–∞–º–æ–ª—é–±–∏—è –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è',
      'Gate of contemplation and awareness': '–í–æ—Ä–æ—Ç–∞ —Å–æ–∑–µ—Ä—Ü–∞–Ω–∏—è –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏',
      'Gate of power and transformation': '–í–æ—Ä–æ—Ç–∞ —Å–∏–ª—ã –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏'
    }
    return translations[description] || description
  }

  const getTypeDescription = (type: string) => {
    const descriptions = {
      ru: {
        Generator: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä - —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –º–∏—Ä–∞',
        'Manifesting Generator': '–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä - —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä',
        Manifestor: '–ú–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏ –ª–∏–¥–µ—Ä',
        Projector: '–ü—Ä–æ–µ–∫—Ç–æ—Ä - –≥–∏–¥ –∏ —Å—Ç—Ä–∞—Ç–µ–≥',
        Reflector: '–†–µ—Ñ–ª–µ–∫—Ç–æ—Ä - –º—É–¥—Ä–µ—Ü –∏ –∑–µ—Ä–∫–∞–ª–æ'
      },
      en: {
        Generator: 'Generator - creator and builder of the world',
        'Manifesting Generator': 'Manifesting Generator - creator and initiator',
        Manifestor: 'Manifestor - initiator and leader',
        Projector: 'Projector - guide and strategist',
        Reflector: 'Reflector - sage and mirror'
      }
    }
    return descriptions[language][type as keyof typeof descriptions[typeof language]] || type
  }

  const getStrategyDescription = (strategy: string) => {
    const descriptions = {
      ru: {
        Respond: '–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
        Initiate: '–ò–Ω–∏—Ü–∏–∏—Ä—É–π—Ç–µ –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ',
        Wait: '–ñ–¥–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
        'Wait for invitation': '–ñ–¥–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
        'Wait for lunar cycle': '–ñ–¥–∏—Ç–µ –ª—É–Ω–Ω—ã–π —Ü–∏–∫–ª'
      },
      en: {
        Respond: 'Respond to life\'s requests',
        Initiate: 'Initiate and act',
        Wait: 'Wait for invitation',
        'Wait for invitation': 'Wait for invitation',
        'Wait for lunar cycle': 'Wait for lunar cycle'
      }
    }
    return descriptions[language][strategy as keyof typeof descriptions[typeof language]] || strategy
  }

  const getStrategyNameRu = (strategy: string) => {
    const translations = {
      'Respond': '–û—Ç–≤–µ—á–∞—Ç—å',
      'Initiate': '–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å',
      'Wait': '–ñ–¥–∞—Ç—å',
      'Wait for invitation': '–ñ–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
      'Wait for lunar cycle': '–ñ–¥–∞—Ç—å –ª—É–Ω–Ω—ã–π —Ü–∏–∫–ª'
    }
    return translations[strategy as keyof typeof translations] || strategy
  }

  const getAuthorityNameRu = (authority: string) => {
    const translations = {
      'Sacral': '–°–∞–∫—Ä–∞–ª—å–Ω—ã–π',
      'Solar Plexus': '–°–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ',
      'Spleen': '–°–µ–ª–µ–∑–µ–Ω–∫–∞',
      'Heart': '–°–µ—Ä–¥—Ü–µ',
      'G-Center': 'G-–¶–µ–Ω—Ç—Ä',
      'Root': '–ö–æ—Ä–µ–Ω—å',
      'Throat': '–ì–æ—Ä–ª–æ',
      'Ajna': '–ê–¥–∂–∞–Ω–∞',
      'Head': '–ì–æ–ª–æ–≤–∞',
      'Lunar': '–õ—É–Ω–Ω—ã–π',
      'Environmental': '–û–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞',
      'Ego': '–≠–≥–æ',
      'Self': '–Ø'
    }
    return translations[authority as keyof typeof translations] || authority
  }

  const getDefinitionNameRu = (definition: string) => {
    const translations = {
      'Single Definition': '–ï–¥–∏–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
      'Split Definition': '–†–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
      'Triple Split Definition': '–¢—Ä–æ–π–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
      'Quadruple Split Definition': '–ß–µ—Ç–≤–µ—Ä–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
      'No Definition': '–ë–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è'
    }
    return translations[definition as keyof typeof translations] || definition
  }

  const getIncarnationCrossNameRu = (incarnationCross: any) => {
    const translations = {
      'Cross of Planning': '–ö—Ä–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      'Cross of Laws': '–ö—Ä–µ—Å—Ç –∑–∞–∫–æ–Ω–æ–≤',
      'Right Angle Cross of the Sleeping Phoenix': '–ü—Ä–∞–≤—ã–π —É–≥–ª–æ–≤–æ–π –∫—Ä–µ—Å—Ç —Å–ø—è—â–µ–≥–æ —Ñ–µ–Ω–∏–∫—Å–∞'
    }
    return translations[incarnationCross.name as keyof typeof translations] || incarnationCross.name
  }

  const getIncarnationCrossDescriptionRu = (incarnationCross: any) => {
    const descriptions = {
      'Cross of Planning': '–ö—Ä–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–º—É –º—ã—à–ª–µ–Ω–∏—é –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. –õ—é–¥–∏ —Å —ç—Ç–∏–º –∫—Ä–µ—Å—Ç–æ–º –æ–±–ª–∞–¥–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ—Ç—å –±—É–¥—É—â–µ–µ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞–Ω—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π.',
      'Cross of Laws': '–ö—Ä–µ—Å—Ç –∑–∞–∫–æ–Ω–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤ –∏ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤. –õ—é–¥–∏ —Å —ç—Ç–∏–º –∫—Ä–µ—Å—Ç–æ–º –æ–±–ª–∞–¥–∞—é—Ç –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ç–æ–≥–æ, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω –º–∏—Ä, –∏ –º–æ–≥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç—Ç–∏ –∑–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∏ –≥–∞—Ä–º–æ–Ω–∏–∏.',
      'Right Angle Cross of the Sleeping Phoenix': '–ü—Ä–∞–≤—ã–π —É–≥–ª–æ–≤–æ–π –∫—Ä–µ—Å—Ç —Å–ø—è—â–µ–≥–æ —Ñ–µ–Ω–∏–∫—Å–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–æ–Ω –∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ. –õ—é–¥–∏ —Å —ç—Ç–∏–º –∫—Ä–µ—Å—Ç–æ–º –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –≥–ª—É–±–æ–∫–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ, –∫–∞–∫ —Ñ–µ–Ω–∏–∫—Å –∏–∑ –ø–µ–ø–ª–∞.'
    }
    return descriptions[incarnationCross.name as keyof typeof descriptions] || incarnationCross.description
  }

  const getDefinitionDescription = (definition: string) => {
    const descriptions = {
      ru: {
        'Single Definition': '–ï–¥–∏–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—Å–µ –≤–∞—à–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã —Å–æ–µ–¥–∏–Ω–µ–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π. –≠—Ç–æ –¥–∞–µ—Ç –≤–∞–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π.',
        'Split Definition': '–†–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤–∞—à–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã. –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –ª—é–¥—è—Ö –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.',
        'Triple Split Definition': '–¢—Ä–æ–π–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤–∞—à–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ —Ç—Ä–∏ –≥—Ä—É–ø–ø—ã. –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —Å–ª–æ–∂–Ω—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –¥–∏–Ω–∞–º–∏–∫—É –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Å–≤—è–∑—è—Ö.',
        'Quadruple Split Definition': '–ß–µ—Ç–≤–µ—Ä–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤–∞—à–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ —á–µ—Ç—ã—Ä–µ –≥—Ä—É–ø–ø—ã. –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –¥–∏–Ω–∞–º–∏–∫—É.',
        'No Definition': '–ë–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É –≤–∞—Å –Ω–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤. –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —á–∏—Å—Ç—ã–º —Ä–µ—Ñ–ª–µ–∫—Ç–æ—Ä–æ–º.'
      },
      en: {
        'Single Definition': 'Single definition means all your defined centers are connected. This gives you consistency and stability in decision making.',
        'Split Definition': 'Split definition means your defined centers are divided into two groups. This creates inner tension and need for others to complete.',
        'Triple Split Definition': 'Triple split definition means your defined centers are divided into three groups. This creates complex inner dynamics.',
        'Quadruple Split Definition': 'Quadruple split definition means your defined centers are divided into four groups. This creates very complex inner dynamics.',
        'No Definition': 'No definition means you have no defined centers. You are a pure reflector.'
      }
    }
    return descriptions[language][definition as keyof typeof descriptions[typeof language]] || definition
  }

  const handleDownloadPDF = async () => {
    if (!humanDesignData) return

    setIsGeneratingPDF(true)
    try {
      const blob = await PDFGenerator.generateHumanDesignPDF(userProfile, humanDesignData)
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const url = URL.createObjectURL(blob)
      const link = document.createElement('a')
      link.href = url
      link.download = `human-design-${userProfile.name || 'report'}-${new Date().toISOString().split('T')[0]}.html`
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      URL.revokeObjectURL(url)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error)
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setIsGeneratingPDF(false)
    }
  }

  const getAuthorityDescription = (authority: string) => {
    const descriptions = {
      ru: {
        'Sacral': '–°–∞–∫—Ä–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç - —ç—Ç–æ –≤–∞—à–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –≤–∞—Å —á–µ—Ä–µ–∑ –∑–≤—É–∫–∏ –∏ –æ—â—É—â–µ–Ω–∏—è.',
        'Solar Plexus': '–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ —Å–ø–ª–µ—Ç–µ–Ω–∏—è - —ç—Ç–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.',
        'Spleen': '–°–ø–ª–µ–Ω–Ω—ã–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç - —ç—Ç–æ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –≤—ã–∂–∏–≤–∞–Ω–∏—è.',
        'Heart': '–°–µ—Ä–¥–µ—á–Ω—ã–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç - —ç—Ç–æ –º—É–¥—Ä–æ—Å—Ç—å —ç–≥–æ, –∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç –≤–∞—à–µ –∏—Å—Ç–∏–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.',
        'G-Center': 'G-–¶–µ–Ω—Ç—Ä –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç - —ç—Ç–æ –º—É–¥—Ä–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç, –≥–¥–µ –≤–∞–º –±—ã—Ç—å.',
        'Root': '–ö–æ—Ä–Ω–µ–≤–æ–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç - —ç—Ç–æ –º—É–¥—Ä–æ—Å—Ç—å –¥–∞–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç, –∫–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.',
        'Throat': '–ì–æ—Ä–ª–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç - —ç—Ç–æ –º—É–¥—Ä–æ—Å—Ç—å —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å.',
        'Ajna': '–ê–¥–∂–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç - —ç—Ç–æ –º—É–¥—Ä–æ—Å—Ç—å —É–º–∞, –∫–æ—Ç–æ—Ä–∞—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ø–æ–Ω–∏–º–∞–µ—Ç.',
        'Head': '–ì–æ–ª–æ–≤–Ω–æ–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç - —ç—Ç–æ –º—É–¥—Ä–æ—Å—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –∏–¥–µ–∏.',
        'Lunar': '–õ—É–Ω–Ω—ã–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç - —ç—Ç–æ –º—É–¥—Ä–æ—Å—Ç—å –ª—É–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç 28 –¥–Ω–µ–π –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.',
        'Environmental': '–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã - —ç—Ç–æ –º—É–¥—Ä–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å—Ä–µ–¥—É.',
        'Ego': '–≠–≥–æ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç - —ç—Ç–æ –º—É–¥—Ä–æ—Å—Ç—å –≤–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç –≤–∞—à—É —Å–∏–ª—É.',
        'Self': '–Ø –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç - —ç—Ç–æ –º—É–¥—Ä–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç –≤–∞—à –ø—É—Ç—å.'
      },
      en: {
        'Sacral': 'Sacral authority is your inner wisdom that knows what is right for you through sounds and feelings.',
        'Solar Plexus': 'Solar plexus authority is emotional wisdom that requires time to make decisions.',
        'Spleen': 'Spleen authority is intuitive wisdom that works instantly for your survival.',
        'Heart': 'Heart authority is ego wisdom that knows your true direction.',
        'G-Center': 'G-Center authority is direction wisdom that knows where you should be.',
        'Root': 'Root authority is pressure wisdom that knows when to act.',
        'Throat': 'Throat authority is expression wisdom that knows what to say.',
        'Ajna': 'Ajna authority is mind wisdom that analyzes and understands.',
        'Head': 'Head authority is inspiration wisdom that receives ideas.',
        'Lunar': 'Lunar authority is lunar cycle wisdom that requires 28 days to make decisions.',
        'Environmental': 'Environmental authority is environment wisdom that responds to surroundings.',
        'Ego': 'Ego authority is will wisdom that knows your power.',
        'Self': 'Self authority is direction wisdom that knows your path.'
      }
    }
    return descriptions[language][authority as keyof typeof descriptions[typeof language]] || authority
  }

  const getCenterNameRu = (centerName: string) => {
    const centerTranslations = {
      'Head': '–ì–æ–ª–æ–≤–∞',
      'Ajna': '–ê–¥–∂–∞–Ω–∞',
      'Throat': '–ì–æ—Ä–ª–æ',
      'G-Center': 'G-–¶–µ–Ω—Ç—Ä',
      'Heart': '–°–µ—Ä–¥—Ü–µ',
      'Solar Plexus': '–°–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ',
      'Sacral': '–°–∞–∫—Ä–∞–ª—å–Ω—ã–π',
      'Root': '–ö–æ—Ä–µ–Ω—å',
      'Spleen': '–°–µ–ª–µ–∑–µ–Ω–∫–∞'
    }
    return centerTranslations[centerName as keyof typeof centerTranslations] || centerName
  }

  const getTypeNameRu = (typeName: string) => {
    const typeTranslations = {
      'Generator': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
      'Manifesting Generator': '–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
      'Projector': '–ü—Ä–æ–µ–∫—Ç–æ—Ä',
      'Manifestor': '–ú–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä',
      'Reflector': '–†–µ—Ñ–ª–µ–∫—Ç–æ—Ä'
    }
    return typeTranslations[typeName as keyof typeof typeTranslations] || typeName
  }






  if (isLoading) {
    return (
      <div className="space-y-6">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="cosmic-card text-center"
        >
          <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <Zap className="w-8 h-8 text-white animate-pulse" />
          </div>
          <h2 className="cosmic-subtitle text-xl mb-2">
            {language === 'ru' ? '–ê–Ω–∞–ª–∏–∑ Human Design' : 'Human Design Analysis'}
          </h2>
          <p className="text-cosmic-300">
            {language === 'ru' ? '–†–∞—Å—á–µ—Ç –≤–∞—à–µ–≥–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–∏–ø–∞...' : 'Calculating your energy type...'}
          </p>
        </motion.div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="space-y-6">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="cosmic-card text-center"
        >
          <div className="w-16 h-16 bg-gradient-to-br from-red-500 to-red-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <Shield className="w-8 h-8 text-white" />
          </div>
          <h2 className="cosmic-subtitle text-xl mb-2 text-red-400">
            {language === 'ru' ? '–û—à–∏–±–∫–∞' : 'Error'}
          </h2>
          <p className="text-cosmic-300 mb-4">{error}</p>
          <button
            onClick={fetchHumanDesignDataFromApi}
            className="cosmic-button bg-cosmic-500 hover:bg-cosmic-600"
          >
            {language === 'ru' ? '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞' : 'Try Again'}
          </button>
        </motion.div>
      </div>
    )
  }

  if (!humanDesignData) {
    return (
      <div className="space-y-6">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="cosmic-card text-center"
        >
          <p className="text-cosmic-300">
            {language === 'ru' ? '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : 'No data found'}
          </p>
        </motion.div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* PDF Button */}
      <div className="flex justify-end mb-4">
        <button
          onClick={handleDownloadPDF}
          disabled={isGeneratingPDF || !humanDesignData}
          className="flex items-center gap-2 px-4 py-2 bg-cosmic-600 hover:bg-cosmic-700 disabled:bg-space-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors"
        >
          <Download className="w-4 h-4" />
          {isGeneratingPDF 
            ? (language === 'ru' ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 'Generating...')
            : (language === 'ru' ? '–°–∫–∞—á–∞—Ç—å PDF' : 'Download PDF')
          }
        </button>
      </div>

      {/* –°—Ç–∞—Ç—É—Å API */}
      {/* HumanDesignApiStatus removed */}

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className="cosmic-card text-center cursor-pointer hover:bg-space-700/30 transition-colors"
        onClick={() => {
          router.push('/human-design/type')
        }}
      >
        <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-700 rounded-full flex items-center justify-center mx-auto mb-4">
          <User className="w-8 h-8 text-white" />
        </div>
        <h2 className="cosmic-subtitle text-2xl mb-2">
          {language === 'ru' ? '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç–∏–ø' : 'Energy Type'}
        </h2>
        <div className="text-3xl font-bold text-cosmic-400 mb-2">
          {language === 'ru' ? getTypeNameRu(humanDesignData.type) : humanDesignData.type}
        </div>
        <p className="text-cosmic-300">
          {getTypeDescription(humanDesignData.type)}
        </p>
      </motion.div>

      {/* –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="cosmic-card text-center cursor-pointer hover:bg-space-700/30 transition-colors"
          onClick={() => {
          const typeToSlug: Record<string, string> = {
            'Generator': 'generator',
            'Manifesting Generator': 'manifesting-generator',
            'Manifestor': 'manifestor',
            'Projector': 'projector',
            'Reflector': 'reflector'
          }
          const slug = typeToSlug[humanDesignData.type] || 'generator'
          router.push(`/human-design/strategy/${slug}`)
          }}
        >
          <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-700 rounded-full flex items-center justify-center mx-auto mb-3">
            <Target className="w-6 h-6 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            {language === 'ru' ? '–°—Ç—Ä–∞—Ç–µ–≥–∏—è' : 'Strategy'}
          </h3>
          <div className="text-xl font-bold text-cosmic-400 mb-2">
            {language === 'ru' ? getStrategyNameRu(humanDesignData.strategy) : humanDesignData.strategy}
          </div>
          <p className="text-sm text-cosmic-300">
            {getStrategyDescription(humanDesignData.strategy)}
          </p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="cosmic-card text-center cursor-pointer hover:bg-space-700/30 transition-colors"
          onClick={() => {
            router.push('/human-design/authority')
          }}
        >
          <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-green-700 rounded-full flex items-center justify-center mx-auto mb-3">
            <Heart className="w-6 h-6 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            {language === 'ru' ? '–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç' : 'Authority'}
          </h3>
          <div className="text-xl font-bold text-cosmic-400 mb-2">
            {language === 'ru' ? getAuthorityNameRu(humanDesignData.authority) : humanDesignData.authority}
          </div>
          <p className="text-sm text-cosmic-300">
            {getAuthorityDescription(humanDesignData.authority)}
          </p>
        </motion.div>
      </div>

      {/* –ü—Ä–æ—Ñ–∏–ª—å –∏ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="cosmic-card text-center cursor-pointer hover:bg-space-700/30 transition-colors"
          onClick={() => {
            router.push('/human-design/profile')
          }}
        >
          <div className="w-12 h-12 bg-gradient-to-br from-pink-500 to-pink-700 rounded-full flex items-center justify-center mx-auto mb-3">
            <Star className="w-6 h-6 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            {language === 'ru' ? '–ü—Ä–æ—Ñ–∏–ª—å' : 'Profile'}
          </h3>
          <div className="text-xl font-bold text-cosmic-400 mb-2">
            {humanDesignData.profile}
          </div>
          <p className="text-sm text-cosmic-300">
            {language === 'ru' ? '–í–∞—à –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å' : 'Your life profile'}
          </p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
          className="cosmic-card text-center cursor-pointer hover:bg-space-700/30 transition-colors"
          onClick={() => {
            router.push('/human-design/definition')
          }}
        >
          <div className="w-12 h-12 bg-gradient-to-br from-orange-500 to-orange-700 rounded-full flex items-center justify-center mx-auto mb-3">
            <Brain className="w-6 h-6 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            {language === 'ru' ? '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ' : 'Definition'}
          </h3>
          <div className="text-xl font-bold text-cosmic-400 mb-2">
            {language === 'ru' ? getDefinitionNameRu(humanDesignData.definition) : humanDesignData.definition}
          </div>
          <p className="text-sm text-cosmic-300">
            {getDefinitionDescription(humanDesignData.definition)}
          </p>
        </motion.div>
      </div>

      {/* –ò–Ω–∫–∞—Ä–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—Ä–µ—Å—Ç */}
        <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.6 }}
        className="cosmic-card text-center cursor-pointer hover:bg-space-700/30 transition-colors"
        onClick={() => {
          router.push('/human-design/incarnation-cross')
        }}
      >
        <div className="w-12 h-12 bg-gradient-to-br from-indigo-500 to-indigo-700 rounded-full flex items-center justify-center mx-auto mb-3">
          <Shield className="w-6 h-6 text-white" />
        </div>
        <h3 className="cosmic-subtitle text-lg mb-2">
          {language === 'ru' ? '–ò–Ω–∫–∞—Ä–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—Ä–µ—Å—Ç' : 'Incarnation Cross'}
        </h3>
        <div className="text-lg font-bold text-cosmic-400 mb-2">
          {language === 'ru' 
            ? getIncarnationCrossNameRu(humanDesignData.incarnationCross) 
            : (typeof humanDesignData.incarnationCross === 'string' 
                ? humanDesignData.incarnationCross 
                : (humanDesignData.incarnationCross as any).name)
          }
        </div>
        <p className="text-sm text-cosmic-300">
          {language === 'ru' 
            ? getIncarnationCrossDescriptionRu(humanDesignData.incarnationCross) 
            : (typeof humanDesignData.incarnationCross === 'string' 
                ? '–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–∫–∞—Ä–Ω–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫—Ä–µ—Å—Ç–∞' 
                : (humanDesignData.incarnationCross as any).description)
          }
        </p>
      </motion.div>

      {/* –ö–∞–Ω–∞–ª—ã */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.7 }}
        className="cosmic-card cursor-pointer hover:bg-space-700/30 transition-colors"
        onClick={() => {
          router.push('/human-design/channels')
        }}
      >
        <h3 className="cosmic-subtitle text-xl mb-4 flex items-center gap-2">
          <Users className="w-5 h-5 text-cosmic-400" />
          {language === 'ru' ? '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã' : 'Activated Channels'}
        </h3>
        <div className="space-y-3">
          {humanDesignData.channels && humanDesignData.channels.length > 0 ? (
            humanDesignData.channels.map((channel, index) => (
              <div key={index} className="p-3 bg-space-800/50 rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <div className="font-semibold text-cosmic-300">
                    {channel.number}
                  </div>
                  <div className="text-cosmic-400 font-medium">
                    {channel.name}
                  </div>
                </div>
                <p className="text-sm text-cosmic-500">
                  {channel.description}
                </p>
              </div>
            ))
          ) : (
            <div className="p-3 bg-space-800/50 rounded-lg text-center">
              <p className="text-cosmic-500">
                {language === 'ru' ? '–ù–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤' : 'No activated channels'}
              </p>
            </div>
          )}
        </div>
      </motion.div>

      {/* –¶–µ–Ω—Ç—Ä—ã */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.8 }}
        className="cosmic-card cursor-pointer hover:bg-space-700/30 transition-colors"
        onClick={() => {
          router.push('/human-design/centers')
        }}
      >
        <h3 className="cosmic-subtitle text-xl mb-4 flex items-center gap-2">
          <Brain className="w-5 h-5 text-cosmic-400" />
          {language === 'ru' ? '–¶–µ–Ω—Ç—Ä—ã' : 'Centers'}
        </h3>
        
        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="text-cosmic-300 font-medium mb-2">
                {language === 'ru' ? '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ' : 'Defined'}
              </h4>
              <div className="space-y-1">
                {humanDesignData.centers.defined.map((center, index) => (
                  <div key={index} className="text-sm text-cosmic-400 bg-green-900/20 px-2 py-1 rounded">
                    {language === 'ru' ? getCenterNameRu(center) : center}
                  </div>
                ))}
              </div>
            </div>
            
            <div>
              <h4 className="text-cosmic-300 font-medium mb-2">
                {language === 'ru' ? '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ' : 'Undefined'}
              </h4>
              <div className="space-y-1">
                {humanDesignData.centers.undefined.map((center, index) => (
                  <div key={index} className="text-sm text-cosmic-400 bg-blue-900/20 px-2 py-1 rounded">
                    {language === 'ru' ? getCenterNameRu(center) : center}
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–≤ */}
          <div className="mt-6">
            <h4 className="text-cosmic-300 font-medium mb-4">
              {language === 'ru' ? '–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–≤' : 'Centers Description'}
            </h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-3">
                <div className="bg-space-800/50 p-3 rounded-lg">
                  <h5 className="text-cosmic-400 font-medium mb-1">G-—Ü–µ–Ω—Ç—Ä (–ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å)</h5>
                  <p className="text-sm text-cosmic-500">
                    {language === 'ru' 
                      ? '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ª—é–±–æ–≤—å. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–∞–º–æ–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å.'
                      : 'Defines direction and love. Responsible for self-identity and life path.'
                    }
                  </p>
                </div>
                <div className="bg-space-800/50 p-3 rounded-lg">
                  <h5 className="text-cosmic-400 font-medium mb-1">S-—Ü–µ–Ω—Ç—Ä (–°–∞–∫—Ä–∞–ª—å–Ω—ã–π)</h5>
                  <p className="text-sm text-cosmic-500">
                    {language === 'ru' 
                      ? '–ò—Å—Ç–æ—á–Ω–∏–∫ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏–ª—ã –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.'
                      : 'Source of life force and creative energy. Responsible for sexuality and reproduction.'
                    }
                  </p>
                </div>
                <div className="bg-space-800/50 p-3 rounded-lg">
                  <h5 className="text-cosmic-400 font-medium mb-1">T-—Ü–µ–Ω—Ç—Ä (–¢–µ–º–µ–Ω–Ω–∞—è)</h5>
                  <p className="text-sm text-cosmic-500">
                    {language === 'ru' 
                      ? '–¶–µ–Ω—Ç—Ä –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è. –°–≤—è–∑–∞–Ω —Å –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å—é –∏ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º –º—ã—à–ª–µ–Ω–∏–µ–º.'
                      : 'Center of inspiration and mental pressure. Connected to spirituality and abstract thinking.'
                    }
                  </p>
                </div>
                <div className="bg-space-800/50 p-3 rounded-lg">
                  <h5 className="text-cosmic-400 font-medium mb-1">H-—Ü–µ–Ω—Ç—Ä (–°–µ—Ä–¥–µ—á–Ω–∞—è)</h5>
                  <p className="text-sm text-cosmic-500">
                    {language === 'ru' 
                      ? '–¶–µ–Ω—Ç—Ä —Å–∏–ª—ã –≤–æ–ª–∏ –∏ —ç–≥–æ. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∞–º–±–∏—Ü–∏–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π —É—Å–ø–µ—Ö.'
                      : 'Center of willpower and ego. Responsible for ambitions, achievements and material success.'
                    }
                  </p>
                </div>
                <div className="bg-space-800/50 p-3 rounded-lg">
                  <h5 className="text-cosmic-400 font-medium mb-1">E-—Ü–µ–Ω—Ç—Ä (–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)</h5>
                  <p className="text-sm text-cosmic-500">
                    {language === 'ru' 
                      ? '–¶–µ–Ω—Ç—Ä —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —á—É–≤—Å—Ç–≤–∞, —Å—Ç—Ä–∞—Å—Ç–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ª–Ω—ã.'
                      : 'Center of emotional system. Responsible for feelings, passions and emotional waves.'
                    }
                  </p>
                </div>
              </div>
              
              <div className="space-y-3">
                <div className="bg-space-800/50 p-3 rounded-lg">
                  <h5 className="text-cosmic-400 font-medium mb-1">A-—Ü–µ–Ω—Ç—Ä (–ê–¥—Ä–µ–Ω–∞–ª–æ–≤–∞—è)</h5>
                  <p className="text-sm text-cosmic-500">
                    {language === 'ru' 
                      ? '–¶–µ–Ω—Ç—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –¥–µ–π—Å—Ç–≤–∏–µ.'
                      : 'Center of motor system. Responsible for physical activity and action.'
                    }
                  </p>
                </div>
                <div className="bg-space-800/50 p-3 rounded-lg">
                  <h5 className="text-cosmic-400 font-medium mb-1">P-—Ü–µ–Ω—Ç—Ä (–°–µ–ª–µ–∑–µ–Ω–æ—á–Ω–∞—è)</h5>
                  <p className="text-sm text-cosmic-500">
                    {language === 'ru' 
                      ? '–¶–µ–Ω—Ç—Ä –∏–Ω—Å—Ç–∏–Ω–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Å–æ–∑–Ω–∞–Ω–∏—è. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω—Ç—É–∏—Ü–∏—é, –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Å—Ç—Ä–∞—Ö.'
                      : 'Center of instinctive awareness. Responsible for intuition, health and fear.'
                    }
                  </p>
                </div>
                <div className="bg-space-800/50 p-3 rounded-lg">
                  <h5 className="text-cosmic-400 font-medium mb-1">L-—Ü–µ–Ω—Ç—Ä (–õ–∏–º–±–∏—á–µ—Å–∫–∞—è)</h5>
                  <p className="text-sm text-cosmic-500">
                    {language === 'ru' 
                      ? '–¶–µ–Ω—Ç—Ä –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–æ–∑–Ω–∞–Ω–∏—è. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∞–Ω–∞–ª–∏–∑, –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ª–æ–≥–∏–∫—É.'
                      : 'Center of logical awareness. Responsible for analysis, understanding and logic.'
                    }
                  </p>
                </div>
                <div className="bg-space-800/50 p-3 rounded-lg">
                  <h5 className="text-cosmic-400 font-medium mb-1">R-—Ü–µ–Ω—Ç—Ä (–ö–æ—Ä–Ω–µ–≤–∞—è)</h5>
                  <p className="text-sm text-cosmic-500">
                    {language === 'ru' 
                      ? '–¶–µ–Ω—Ç—Ä –¥–∞–≤–ª–µ–Ω–∏—è –∏ —Å—Ç—Ä–µ—Å—Å–∞. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ, –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é.'
                      : 'Center of pressure and stress. Responsible for survival, adrenaline and transformation.'
                    }
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </motion.div>
    </div>
  )
}