// components/HumanDesignDisplay.tsx
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { User, Zap, Target, Heart, Brain, Shield, Star, Users } from 'lucide-react'
import { UserProfile } from '@/store/appStore'
import { fetchHumanDesignData, formatProfileForHumanDesign } from '@/lib/humanDesignApi'
import { useRouter } from 'next/navigation'

interface HumanDesignDisplayProps {
  userProfile: UserProfile
  language: 'en' | 'ru'
}

interface HumanDesignData {
  type: string
  strategy: string
  authority: string
  profile: string
  definition: string
  innerAuthority: string
  incarnationCross: string
  channels: Array<{
    number: string
    name: string
    description: string
  }>
  gates: Array<{
    number: string
    name: string
    description: string
  }>
  centers: {
    defined: string[]
    undefined: string[]
  }
}

export function HumanDesignDisplay({ userProfile, language }: HumanDesignDisplayProps) {
  const [humanDesignData, setHumanDesignData] = useState<HumanDesignData | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()

  console.log('üîç HumanDesignDisplay received userProfile:', userProfile)

  useEffect(() => {
    if (userProfile && userProfile.name && userProfile.birthDate) {
      fetchHumanDesignDataFromApi()
    }
  }, [userProfile])

  const fetchHumanDesignDataFromApi = async () => {
    setIsLoading(true)
    setError(null)

    try {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è API
      const apiRequest = formatProfileForHumanDesign(userProfile)
      
      if (!apiRequest) {
        throw new Error('Invalid profile data for Human Design')
      }

      console.log('üîÑ Fetching Human Design data:', apiRequest)

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
      const apiData = await fetchHumanDesignData(apiRequest)
      
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –Ω–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      const adaptedData: HumanDesignData = {
        ...apiData,
        channels: apiData.channels.map(channel => ({
          ...channel,
          description: language === 'ru' 
            ? translateChannelDescription(channel.description)
            : channel.description
        })),
        gates: apiData.gates.map(gate => ({
          ...gate,
          description: language === 'ru' 
            ? translateGateDescription(gate.description)
            : gate.description
        }))
      }
      
      setHumanDesignData(adaptedData)
      console.log('‚úÖ Human Design data loaded:', adaptedData)

    } catch (error) {
      console.error('‚ùå Error fetching Human Design data:', error)
      setError(language === 'ru' ? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö Human Design' : 'Error loading Human Design data')
    } finally {
      setIsLoading(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏–π
  const translateChannelDescription = (description: string) => {
    const translations: { [key: string]: string } = {
      'Channel of inspiration and creativity': '–ö–∞–Ω–∞–ª –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞',
      'Channel of awakening and awareness': '–ö–∞–Ω–∞–ª –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏',
      'Channel of charisma and transformation': '–ö–∞–Ω–∞–ª —Ö–∞—Ä–∏–∑–º—ã –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏'
    }
    return translations[description] || description
  }

  const translateGateDescription = (description: string) => {
    const translations: { [key: string]: string } = {
      'Gate of self-expression and creativity': '–í–æ—Ä–æ—Ç–∞ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞',
      'Gate of contribution and leadership': '–í–æ—Ä–æ—Ç–∞ –≤–∫–ª–∞–¥–∞ –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞',
      'Gate of self-love and behavior': '–í–æ—Ä–æ—Ç–∞ —Å–∞–º–æ–ª—é–±–∏—è –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è',
      'Gate of contemplation and awareness': '–í–æ—Ä–æ—Ç–∞ —Å–æ–∑–µ—Ä—Ü–∞–Ω–∏—è –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏',
      'Gate of power and transformation': '–í–æ—Ä–æ—Ç–∞ —Å–∏–ª—ã –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏'
    }
    return translations[description] || description
  }

  const getTypeDescription = (type: string) => {
    const descriptions = {
      ru: {
        Generator: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä - —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –º–∏—Ä–∞',
        'Manifesting Generator': '–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä - —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä',
        Manifestor: '–ú–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏ –ª–∏–¥–µ—Ä',
        Projector: '–ü—Ä–æ–µ–∫—Ç–æ—Ä - –≥–∏–¥ –∏ —Å—Ç—Ä–∞—Ç–µ–≥',
        Reflector: '–†–µ—Ñ–ª–µ–∫—Ç–æ—Ä - –º—É–¥—Ä–µ—Ü –∏ –∑–µ—Ä–∫–∞–ª–æ'
      },
      en: {
        Generator: 'Generator - creator and builder of the world',
        'Manifesting Generator': 'Manifesting Generator - creator and initiator',
        Manifestor: 'Manifestor - initiator and leader',
        Projector: 'Projector - guide and strategist',
        Reflector: 'Reflector - sage and mirror'
      }
    }
    return descriptions[language][type as keyof typeof descriptions[typeof language]] || type
  }

  const getStrategyDescription = (strategy: string) => {
    const descriptions = {
      ru: {
        Respond: '–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
        Initiate: '–ò–Ω–∏—Ü–∏–∏—Ä—É–π—Ç–µ –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ',
        Wait: '–ñ–¥–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
        'Wait for lunar cycle': '–ñ–¥–∏—Ç–µ –ª—É–Ω–Ω—ã–π —Ü–∏–∫–ª'
      },
      en: {
        Respond: 'Respond to life\'s requests',
        Initiate: 'Initiate and act',
        Wait: 'Wait for invitation',
        'Wait for lunar cycle': 'Wait for lunar cycle'
      }
    }
    return descriptions[language][strategy as keyof typeof descriptions[typeof language]] || strategy
  }

  const getCenterNameRu = (centerName: string) => {
    const centerTranslations = {
      'Head': '–ì–æ–ª–æ–≤–∞',
      'Ajna': '–ê–¥–∂–∞–Ω–∞',
      'Throat': '–ì–æ—Ä–ª–æ',
      'G-Center': 'G-–¶–µ–Ω—Ç—Ä',
      'Heart': '–°–µ—Ä–¥—Ü–µ',
      'Solar Plexus': '–°–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ',
      'Sacral': '–°–∞–∫—Ä–∞–ª—å–Ω—ã–π',
      'Root': '–ö–æ—Ä–µ–Ω—å',
      'Spleen': '–°–µ–ª–µ–∑–µ–Ω–∫–∞'
    }
    return centerTranslations[centerName as keyof typeof centerTranslations] || centerName
  }

  const getStrategyNameRu = (strategyName: string) => {
    const strategyTranslations = {
      'Respond': '–û—Ç–≤–µ—á–∞—Ç—å',
      'Initiate': '–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å',
      'Wait for the Invitation': '–ñ–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
      'Wait for the Lunar Cycle': '–ñ–¥–∞—Ç—å –ª—É–Ω–Ω—ã–π —Ü–∏–∫–ª',
      'Respond, then Inform': '–û—Ç–≤–µ—á–∞—Ç—å, –∑–∞—Ç–µ–º –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å'
    }
    return strategyTranslations[strategyName as keyof typeof strategyTranslations] || strategyName
  }

  const getAuthorityNameRu = (authorityName: string) => {
    const authorityTranslations = {
      'Emotional': '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π',
      'Sacral': '–°–∞–∫—Ä–∞–ª—å–Ω—ã–π',
      'Splenic': '–°–ø–ª–µ–Ω–∞–ª—å–Ω—ã–π',
      'Ego': '–≠–≥–æ',
      'Self-Projected': '–°–∞–º–æ-–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º—ã–π',
      'Environmental': '–û–∫—Ä—É–∂–∞—é—â–∏–π',
      'Lunar': '–õ—É–Ω–Ω—ã–π'
    }
    return authorityTranslations[authorityName as keyof typeof authorityTranslations] || authorityName
  }

  const getDefinitionNameRu = (definitionName: string) => {
    // –ü–∞—Ä—Å–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ "Reflector with Environmental authority"
    const parts = definitionName.split(' with ')
    if (parts.length === 2) {
      const type = parts[0]
      const authority = parts[1].replace(' authority', '')
      
      const typeRu = getTypeNameRu(type)
      const authorityRu = getAuthorityNameRu(authority)
      
      return `${typeRu} —Å ${authorityRu} –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–æ–º`
    }
    return definitionName
  }

  const getTypeNameRu = (typeName: string) => {
    const typeTranslations = {
      'Generator': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
      'Manifesting Generator': '–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∏—Ä—É—é—â–∏–π –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
      'Projector': '–ü—Ä–æ–µ–∫—Ç–æ—Ä',
      'Manifestor': '–ú–∞–Ω–∏—Ñ–µ—Å—Ç–æ—Ä',
      'Reflector': '–†–µ—Ñ–ª–µ–∫—Ç–æ—Ä'
    }
    return typeTranslations[typeName as keyof typeof typeTranslations] || typeName
  }

  const getIncarnationCrossNameRu = (crossName: string) => {
    const crossTranslations = {
      'Right Angle Cross of the Sphinx': '–ü—Ä–∞–≤—ã–π –£–≥–ª–æ–≤–æ–π –ö—Ä–µ—Å—Ç –°—Ñ–∏–Ω–∫—Å–∞',
      'Left Angle Cross of the Sphinx': '–õ–µ–≤—ã–π –£–≥–ª–æ–≤–æ–π –ö—Ä–µ—Å—Ç –°—Ñ–∏–Ω–∫—Å–∞',
      'Juxtaposition Cross of the Sphinx': '–ö—Ä–µ—Å—Ç –ü—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –°—Ñ–∏–Ω–∫—Å–∞',
      'Right Angle Cross of the Vessel': '–ü—Ä–∞–≤—ã–π –£–≥–ª–æ–≤–æ–π –ö—Ä–µ—Å—Ç –°–æ—Å—É–¥–∞',
      'Left Angle Cross of the Vessel': '–õ–µ–≤—ã–π –£–≥–ª–æ–≤–æ–π –ö—Ä–µ—Å—Ç –°–æ—Å—É–¥–∞',
      'Juxtaposition Cross of the Vessel': '–ö—Ä–µ—Å—Ç –ü—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –°–æ—Å—É–¥–∞',
      'Right Angle Cross of the Sleeping Phoenix': '–ü—Ä–∞–≤—ã–π –£–≥–ª–æ–≤–æ–π –ö—Ä–µ—Å—Ç –°–ø—è—â–µ–≥–æ –§–µ–Ω–∏–∫—Å–∞',
      'Left Angle Cross of the Sleeping Phoenix': '–õ–µ–≤—ã–π –£–≥–ª–æ–≤–æ–π –ö—Ä–µ—Å—Ç –°–ø—è—â–µ–≥–æ –§–µ–Ω–∏–∫—Å–∞',
      'Juxtaposition Cross of the Sleeping Phoenix': '–ö—Ä–µ—Å—Ç –ü—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –°–ø—è—â–µ–≥–æ –§–µ–Ω–∏–∫—Å–∞'
    }
    return crossTranslations[crossName as keyof typeof crossTranslations] || crossName
  }

  if (isLoading) {
    return (
      <div className="space-y-6">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="cosmic-card text-center"
        >
          <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <Zap className="w-8 h-8 text-white animate-pulse" />
          </div>
          <h2 className="cosmic-subtitle text-xl mb-2">
            {language === 'ru' ? '–ê–Ω–∞–ª–∏–∑ Human Design' : 'Human Design Analysis'}
          </h2>
          <p className="text-cosmic-300">
            {language === 'ru' ? '–†–∞—Å—á–µ—Ç –≤–∞—à–µ–≥–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–∏–ø–∞...' : 'Calculating your energy type...'}
          </p>
        </motion.div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="space-y-6">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="cosmic-card text-center"
        >
          <div className="w-16 h-16 bg-gradient-to-br from-red-500 to-red-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <Shield className="w-8 h-8 text-white" />
          </div>
          <h2 className="cosmic-subtitle text-xl mb-2 text-red-400">
            {language === 'ru' ? '–û—à–∏–±–∫–∞' : 'Error'}
          </h2>
          <p className="text-cosmic-300 mb-4">{error}</p>
          <button
            onClick={fetchHumanDesignDataFromApi}
            className="cosmic-button bg-cosmic-500 hover:bg-cosmic-600"
          >
            {language === 'ru' ? '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞' : 'Try Again'}
          </button>
        </motion.div>
      </div>
    )
  }

  if (!humanDesignData) {
    return (
      <div className="space-y-6">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="cosmic-card text-center"
        >
          <p className="text-cosmic-300">
            {language === 'ru' ? '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : 'No data found'}
          </p>
        </motion.div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç—É—Å API */}
      {/* HumanDesignApiStatus removed */}

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className="cosmic-card text-center cursor-pointer hover:bg-space-700/30 transition-colors"
        onClick={() => {
          router.push('/human-design/type')
        }}
      >
        <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-700 rounded-full flex items-center justify-center mx-auto mb-4">
          <User className="w-8 h-8 text-white" />
        </div>
        <h2 className="cosmic-subtitle text-2xl mb-2">
          {language === 'ru' ? '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç–∏–ø' : 'Energy Type'}
        </h2>
        <div className="text-3xl font-bold text-cosmic-400 mb-2">
          {language === 'ru' ? getTypeNameRu(humanDesignData.type) : humanDesignData.type}
        </div>
        <p className="text-cosmic-300">
          {getTypeDescription(humanDesignData.type)}
        </p>
      </motion.div>

      {/* –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="cosmic-card text-center cursor-pointer hover:bg-space-700/30 transition-colors"
          onClick={() => {
          const typeToSlug: Record<string, string> = {
            'Generator': 'generator',
            'Manifesting Generator': 'manifesting-generator',
            'Manifestor': 'manifestor',
            'Projector': 'projector',
            'Reflector': 'reflector'
          }
          const slug = typeToSlug[humanDesignData.type] || 'generator'
          router.push(`/human-design/strategy/${slug}`)
          }}
        >
          <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-700 rounded-full flex items-center justify-center mx-auto mb-3">
            <Target className="w-6 h-6 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            {language === 'ru' ? '–°—Ç—Ä–∞—Ç–µ–≥–∏—è' : 'Strategy'}
          </h3>
          <div className="text-xl font-bold text-cosmic-400 mb-2">
            {language === 'ru' ? getStrategyNameRu(humanDesignData.strategy) : humanDesignData.strategy}
          </div>
          <p className="text-sm text-cosmic-300">
            {getStrategyDescription(humanDesignData.strategy)}
          </p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="cosmic-card text-center cursor-pointer hover:bg-space-700/30 transition-colors"
          onClick={() => {
            router.push('/human-design/authority')
          }}
        >
          <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-green-700 rounded-full flex items-center justify-center mx-auto mb-3">
            <Heart className="w-6 h-6 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            {language === 'ru' ? '–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç' : 'Authority'}
          </h3>
          <div className="text-xl font-bold text-cosmic-400 mb-2">
            {language === 'ru' ? getAuthorityNameRu(humanDesignData.authority) : humanDesignData.authority}
          </div>
          <p className="text-sm text-cosmic-300">
            {language === 'ru' ? '–í–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç' : 'Your inner authority'}
          </p>
        </motion.div>
      </div>

      {/* –ü—Ä–æ—Ñ–∏–ª—å –∏ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="cosmic-card text-center cursor-pointer hover:bg-space-700/30 transition-colors"
          onClick={() => {
            router.push('/human-design/profile')
          }}
        >
          <div className="w-12 h-12 bg-gradient-to-br from-pink-500 to-pink-700 rounded-full flex items-center justify-center mx-auto mb-3">
            <Star className="w-6 h-6 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            {language === 'ru' ? '–ü—Ä–æ—Ñ–∏–ª—å' : 'Profile'}
          </h3>
          <div className="text-xl font-bold text-cosmic-400 mb-2">
            {humanDesignData.profile}
          </div>
          <p className="text-sm text-cosmic-300">
            {language === 'ru' ? '–í–∞—à –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å' : 'Your life profile'}
          </p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
          className="cosmic-card text-center cursor-pointer hover:bg-space-700/30 transition-colors"
          onClick={() => {
            router.push('/human-design/definition')
          }}
        >
          <div className="w-12 h-12 bg-gradient-to-br from-orange-500 to-orange-700 rounded-full flex items-center justify-center mx-auto mb-3">
            <Brain className="w-6 h-6 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            {language === 'ru' ? '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ' : 'Definition'}
          </h3>
          <div className="text-xl font-bold text-cosmic-400 mb-2">
            {language === 'ru' ? getDefinitionNameRu(humanDesignData.definition) : humanDesignData.definition}
          </div>
          <p className="text-sm text-cosmic-300">
            {language === 'ru' ? '–¢–∏–ø –≤–∞—à–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è' : 'Type of your definition'}
          </p>
        </motion.div>
      </div>

      {/* –ò–Ω–∫–∞—Ä–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—Ä–µ—Å—Ç */}
        <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.6 }}
        className="cosmic-card text-center cursor-pointer hover:bg-space-700/30 transition-colors"
        onClick={() => {
          router.push('/human-design/incarnation-cross')
        }}
      >
        <div className="w-12 h-12 bg-gradient-to-br from-indigo-500 to-indigo-700 rounded-full flex items-center justify-center mx-auto mb-3">
          <Shield className="w-6 h-6 text-white" />
        </div>
        <h3 className="cosmic-subtitle text-lg mb-2">
          {language === 'ru' ? '–ò–Ω–∫–∞—Ä–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –∫—Ä–µ—Å—Ç' : 'Incarnation Cross'}
        </h3>
        <div className="text-lg font-bold text-cosmic-400 mb-2">
          {language === 'ru' ? getIncarnationCrossNameRu(humanDesignData.incarnationCross) : humanDesignData.incarnationCross}
        </div>
        <p className="text-sm text-cosmic-300">
          {language === 'ru' ? '–í–∞—à–∞ –∂–∏–∑–Ω–µ–Ω–Ω–∞—è –º–∏—Å—Å–∏—è' : 'Your life mission'}
        </p>
      </motion.div>

      {/* –ö–∞–Ω–∞–ª—ã */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.7 }}
        className="cosmic-card cursor-pointer hover:bg-space-700/30 transition-colors"
        onClick={() => {
          router.push('/human-design/channels')
        }}
      >
        <h3 className="cosmic-subtitle text-xl mb-4 flex items-center gap-2">
          <Users className="w-5 h-5 text-cosmic-400" />
          {language === 'ru' ? '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã' : 'Activated Channels'}
        </h3>
        <div className="space-y-3">
          {humanDesignData.channels && humanDesignData.channels.length > 0 ? (
            humanDesignData.channels.map((channel, index) => (
              <div key={index} className="p-3 bg-space-800/50 rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <div className="font-semibold text-cosmic-300">
                    {channel.number}
                  </div>
                  <div className="text-cosmic-400 font-medium">
                    {channel.name}
                  </div>
                </div>
                <p className="text-sm text-cosmic-500">
                  {channel.description}
                </p>
              </div>
            ))
          ) : (
            <div className="p-3 bg-space-800/50 rounded-lg text-center">
              <p className="text-cosmic-500">
                {language === 'ru' ? '–ù–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤' : 'No activated channels'}
              </p>
            </div>
          )}
        </div>
      </motion.div>

      {/* –¶–µ–Ω—Ç—Ä—ã */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.8 }}
        className="cosmic-card cursor-pointer hover:bg-space-700/30 transition-colors"
        onClick={() => {
          router.push('/human-design/centers')
        }}
      >
        <h3 className="cosmic-subtitle text-xl mb-4 flex items-center gap-2">
          <Brain className="w-5 h-5 text-cosmic-400" />
          {language === 'ru' ? '–¶–µ–Ω—Ç—Ä—ã' : 'Centers'}
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <h4 className="text-cosmic-300 font-medium mb-2">
              {language === 'ru' ? '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ' : 'Defined'}
            </h4>
            <div className="space-y-1">
              {humanDesignData.centers.defined.map((center, index) => (
                <div key={index} className="text-sm text-cosmic-400 bg-green-900/20 px-2 py-1 rounded">
                  {language === 'ru' ? getCenterNameRu(center) : center}
                </div>
              ))}
            </div>
          </div>
          
          <div>
            <h4 className="text-cosmic-300 font-medium mb-2">
              {language === 'ru' ? '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ' : 'Undefined'}
            </h4>
            <div className="space-y-1">
              {humanDesignData.centers.undefined.map((center, index) => (
                <div key={index} className="text-sm text-cosmic-400 bg-blue-900/20 px-2 py-1 rounded">
                  {language === 'ru' ? getCenterNameRu(center) : center}
                </div>
              ))}
            </div>
          </div>
        </div>
      </motion.div>
    </div>
  )
}