'use client'

import React, { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { Brain, Target, Zap, Moon, Activity, Heart, Shield, Star } from 'lucide-react'

interface ModernHumanDesignWidgetProps {
  type: string
  strategy: string
  authority: string
  profile: string
  definition: string
  language?: string
}

interface HumanDesignMetrics {
  energyLevel: number
  lunarPhase: string
  activeCenters: string[]
  undefinedCenters: string[]
  hourlyEnergy: number[]
  todayFocus: string
  challenges: string[]
  opportunities: string[]
  emotionalState: number
  mentalState: number
  physicalState: number
}

const ModernHumanDesignWidget: React.FC<ModernHumanDesignWidgetProps> = ({
  type,
  strategy,
  authority,
  profile,
  definition,
  language = 'ru'
}) => {
  const [metrics, setMetrics] = useState<HumanDesignMetrics | null>(null)
  const [isExpanded, setIsExpanded] = useState(false)

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
  const generateMetrics = (): HumanDesignMetrics => {
    const today = new Date()
    const dayOfMonth = today.getDate()
    const month = today.getMonth() + 1
    const year = today.getFullYear()
    
    const seed = dayOfMonth + month + year
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
    let baseEnergy = 50
    if (type === 'Generator') baseEnergy = 80
    else if (type === 'Manifesting Generator') baseEnergy = 85
    else if (type === 'Manifestor') baseEnergy = 70
    else if (type === 'Projector') baseEnergy = 60
    else if (type === 'Reflector') baseEnergy = 40
    
    const energyLevel = Math.max(20, Math.min(100, baseEnergy + (seed % 30) - 15))
    
    // –õ—É–Ω–Ω—ã–µ —Ñ–∞–∑—ã
    const lunarPhases = ['–ù–æ–≤–æ–ª—É–Ω–∏–µ', '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞', '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å', '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞', '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞', '–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å', '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞']
    const lunarPhase = lunarPhases[seed % lunarPhases.length]
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã
    const allCenters = ['Head', 'Ajna', 'Throat', 'G-Center', 'Heart', 'Solar Plexus', 'Sacral', 'Root', 'Spleen']
    const activeCenters = allCenters.slice(0, Math.floor(seed % 5) + 2)
    const undefinedCenters = allCenters.filter(center => !activeCenters.includes(center))
    
    // –ü–æ—á–∞—Å–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è
    const hourlyEnergy = Array.from({ length: 24 }, (_, hour) => {
      const hourSeed = (seed + hour) % 100
      return Math.max(10, Math.min(100, baseEnergy + (hourSeed % 40) - 20))
    })
    
    // –§–æ–∫—É—Å –¥–Ω—è
    const focuses = [
      '–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ª—É–Ω–Ω—ã–º —Ñ–∞–∑–∞–º',
      '–§–æ–∫—É—Å –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞–±–æ—Ç–µ',
      '–í—Ä–µ–º—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π',
      '–û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ–∫—Ä—É–∂–µ–Ω–∏–µ',
      '–ñ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞',
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é'
    ]
    const todayFocus = focuses[seed % focuses.length]
    
    // –í—ã–∑–æ–≤—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    const challenges = [
      '–ò–∑–±–µ–≥–∞–π—Ç–µ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π',
      '–ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å —Å –≤—ã–≤–æ–¥–∞–º–∏',
      '–°–ª—É—à–∞–π—Ç–µ —Å–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å',
      '–î–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—É'
    ]
    const opportunities = [
      '–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      '–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–±—â–µ–Ω–∏—è',
      '–í—Ä–µ–º—è –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞',
      '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞'
    ]
    
    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ, –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const emotionalState = 40 + (seed % 60)
    const mentalState = 35 + (seed % 65)
    const physicalState = 45 + (seed % 55)
    
    return {
      energyLevel,
      lunarPhase,
      activeCenters,
      undefinedCenters,
      hourlyEnergy,
      todayFocus,
      challenges,
      opportunities,
      emotionalState,
      mentalState,
      physicalState
    }
  }

  useEffect(() => {
    setMetrics(generateMetrics())
  }, [type, strategy, authority, profile])

  if (!metrics) {
    return (
      <div className="relative overflow-hidden bg-gradient-to-br from-space-800/50 to-space-900/50 backdrop-blur-sm border border-cosmic-500/20 rounded-2xl p-4 shadow-2xl">
        <div className="animate-pulse">
          <div className="h-4 bg-space-700 rounded w-3/4 mb-2"></div>
          <div className="h-4 bg-space-700 rounded w-1/2"></div>
        </div>
      </div>
    )
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="relative overflow-hidden bg-gradient-to-br from-space-800/50 to-space-900/50 backdrop-blur-sm border border-cosmic-500/20 rounded-2xl p-4 shadow-2xl"
    >
      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */}
      <div className="absolute inset-0 bg-gradient-to-br from-green-500/5 to-blue-500/5" />
      <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-green-500/10 to-transparent rounded-full blur-3xl" />
      
      <div className="relative">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-to-br from-green-500 to-green-700 rounded-xl flex items-center justify-center shadow-lg">
              <Brain className="w-5 h-5 text-white" />
            </div>
            <div>
              <h3 className="text-white font-bold text-lg">üß¨ Human Design</h3>
              <p className="text-cosmic-300 text-xs">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</p>
            </div>
          </div>
          <motion.button
            onClick={() => setIsExpanded(!isExpanded)}
            className="w-8 h-8 bg-cosmic-600/30 rounded-lg flex items-center justify-center hover:bg-cosmic-600/50 transition-colors"
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
          >
            <svg 
              className={`w-4 h-4 text-cosmic-300 transition-transform ${isExpanded ? 'rotate-180' : ''}`} 
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7" />
            </svg>
          </motion.button>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ */}
        <div className="space-y-4">
          {/* –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–Ω—è */}
          <div className="bg-space-800/50 rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
              <Target className="w-4 h-4 text-cosmic-400" />
              <h4 className="font-semibold text-cosmic-300">–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–Ω—è</h4>
            </div>
            <p className="text-cosmic-200 text-sm mb-2">{strategy}</p>
            <p className="text-cosmic-400 text-xs">{metrics.todayFocus}</p>
          </div>

          {/* –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç –≤ –¥–µ–π—Å—Ç–≤–∏–∏ */}
          <div className="bg-space-800/50 rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
              <Zap className="w-4 h-4 text-cosmic-400" />
              <h4 className="font-semibold text-cosmic-300">–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç –≤ –¥–µ–π—Å—Ç–≤–∏–∏</h4>
            </div>
            <p className="text-cosmic-200 text-sm mb-2">{authority}</p>
            <p className="text-cosmic-400 text-xs">–õ—É—á—à–µ–µ –≤—Ä–µ–º—è: –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–º –º–µ—Å—Ç–µ</p>
          </div>

          {/* –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ */}
          <div className="bg-space-800/50 rounded-lg p-4">
            <div className="flex items-center justify-between mb-2">
              <span className="text-cosmic-300 font-medium">–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏</span>
              <span className="text-cosmic-400 text-sm">{metrics.energyLevel}/100</span>
            </div>
            <div className="w-full bg-space-700 rounded-full h-2">
              <motion.div 
                className={`h-2 rounded-full ${
                  metrics.energyLevel > 70 ? 'bg-green-500' : 
                  metrics.energyLevel > 40 ? 'bg-yellow-500' : 'bg-red-500'
                }`}
                initial={{ width: 0 }}
                animate={{ width: `${metrics.energyLevel}%` }}
                transition={{ duration: 1, delay: 0.5 }}
              />
            </div>
          </div>

          {/* –õ—É–Ω–Ω–∞—è —Ñ–∞–∑–∞ */}
          <div className="bg-space-800/50 rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
              <Moon className="w-4 h-4 text-cosmic-400" />
              <h4 className="font-semibold text-cosmic-300">–õ—É–Ω–Ω–∞—è —Ñ–∞–∑–∞</h4>
            </div>
            <p className="text-cosmic-200 text-sm mb-1">{metrics.lunarPhase}</p>
            <p className="text-cosmic-400 text-xs">–í—Ä–µ–º—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π</p>
          </div>
        </div>

        {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ */}
        <motion.div
          initial={false}
          animate={{ 
            height: isExpanded ? 'auto' : 0,
            opacity: isExpanded ? 1 : 0
          }}
          transition={{ duration: 0.3 }}
          className="overflow-hidden"
        >
          <div className="space-y-4 pt-4 border-t border-space-700">
            {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–≤ */}
            <div>
              <div className="flex items-center gap-2 mb-3">
                <Activity className="w-4 h-4 text-cosmic-400" />
                <span className="text-sm font-medium text-cosmic-300">–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–≤</span>
              </div>
              <div className="grid grid-cols-3 gap-3">
                <div className="bg-space-800/50 rounded-lg p-3">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-xs text-cosmic-300">–≠–º–æ—Ü–∏–∏</span>
                    <span className="text-xs text-white font-bold">{metrics.emotionalState}%</span>
                  </div>
                  <div className="w-full bg-space-700 rounded-full h-2">
                    <motion.div 
                      className="bg-gradient-to-r from-pink-500 to-rose-500 h-2 rounded-full"
                      initial={{ width: 0 }}
                      animate={{ width: `${metrics.emotionalState}%` }}
                      transition={{ duration: 1, delay: 0.7 }}
                    />
                  </div>
                </div>
                <div className="bg-space-800/50 rounded-lg p-3">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-xs text-cosmic-300">–ú—ã—à–ª–µ–Ω–∏–µ</span>
                    <span className="text-xs text-white font-bold">{metrics.mentalState}%</span>
                  </div>
                  <div className="w-full bg-space-700 rounded-full h-2">
                    <motion.div 
                      className="bg-gradient-to-r from-blue-500 to-indigo-500 h-2 rounded-full"
                      initial={{ width: 0 }}
                      animate={{ width: `${metrics.mentalState}%` }}
                      transition={{ duration: 1, delay: 0.8 }}
                    />
                  </div>
                </div>
                <div className="bg-space-800/50 rounded-lg p-3">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-xs text-cosmic-300">–¢–µ–ª–æ</span>
                    <span className="text-xs text-white font-bold">{metrics.physicalState}%</span>
                  </div>
                  <div className="w-full bg-space-700 rounded-full h-2">
                    <motion.div 
                      className="bg-gradient-to-r from-green-500 to-emerald-500 h-2 rounded-full"
                      initial={{ width: 0 }}
                      animate={{ width: `${metrics.physicalState}%` }}
                      transition={{ duration: 1, delay: 0.9 }}
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* –ü–æ—á–∞—Å–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è */}
            <div>
              <div className="flex items-center gap-2 mb-3">
                <Heart className="w-4 h-4 text-cosmic-400" />
                <span className="text-sm font-medium text-cosmic-300">–≠–Ω–µ—Ä–≥–∏—è –ø–æ —á–∞—Å–∞–º</span>
              </div>
              <div className="bg-space-800/50 rounded-lg p-3">
                <div className="flex items-end gap-1 h-16">
                  {metrics.hourlyEnergy.slice(0, 12).map((energy, index) => (
                    <motion.div 
                      key={index}
                      className="bg-gradient-to-t from-green-500 to-emerald-400 rounded-t flex-1"
                      initial={{ height: 0 }}
                      animate={{ height: `${energy}%` }}
                      transition={{ duration: 0.8, delay: index * 0.05 }}
                    />
                  ))}
                </div>
                <div className="flex justify-between text-xs text-cosmic-500 mt-1">
                  {Array.from({ length: 12 }, (_, i) => (
                    <span key={i}>{i * 2}:00</span>
                  ))}
                </div>
              </div>
            </div>

            {/* –í—ã–∑–æ–≤—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <div className="flex items-center gap-2 mb-2">
                  <Shield className="w-4 h-4 text-red-400" />
                  <span className="text-sm font-medium text-cosmic-300">–í—ã–∑–æ–≤—ã</span>
                </div>
                <div className="space-y-2">
                  {metrics.challenges.map((challenge, index) => (
                    <motion.div 
                      key={index}
                      className="text-xs text-cosmic-300 bg-red-900/20 border border-red-500/30 rounded-lg p-2"
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                    >
                      {challenge}
                    </motion.div>
                  ))}
                </div>
              </div>
              <div>
                <div className="flex items-center gap-2 mb-2">
                  <Star className="w-4 h-4 text-green-400" />
                  <span className="text-sm font-medium text-cosmic-300">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</span>
                </div>
                <div className="space-y-2">
                  {metrics.opportunities.map((opportunity, index) => (
                    <motion.div 
                      key={index}
                      className="text-xs text-cosmic-300 bg-green-900/20 border border-green-500/30 rounded-lg p-2"
                      initial={{ opacity: 0, x: 10 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                    >
                      {opportunity}
                    </motion.div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </motion.div>

        {/* –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å */}
        <motion.button 
          onClick={() => setIsExpanded(!isExpanded)}
          className="w-full cosmic-button bg-space-700 hover:bg-space-600 text-cosmic-200 text-sm py-2 mt-4"
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          {isExpanded ? '–°–≤–µ—Ä–Ω—É—Ç—å –¥–µ—Ç–∞–ª–∏' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –¥–µ—Ç–∞–ª–∏'}
        </motion.button>
      </div>
    </motion.div>
  )
}

export default ModernHumanDesignWidget
