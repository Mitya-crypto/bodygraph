// components/NumerologyDisplay.tsx
'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Calculator, Heart, User, Zap, TrendingUp, Calendar, Users, Download } from 'lucide-react'
import { UserProfile } from '@/store/appStore'
import { parseISO } from 'date-fns'
import { LifePathDescription } from './LifePathDescription'
import { ExpressionDescription } from './ExpressionDescription'
import { SoulUrgeDescription } from './SoulUrgeDescription'
import { PersonalityDescription } from './PersonalityDescription'
import { BiorythmsDescription } from './BiorythmsDescription'
import { AdditionalNumbersDescription } from './AdditionalNumbersDescription'
import { AdditionalNumbersBlockDescription } from './AdditionalNumbersBlockDescription'
import DailyNumerologyMetrics from './DailyNumerologyMetrics'
import PDFGenerator from '@/lib/pdfGenerator'

interface NumerologyDisplayProps {
  userProfile: UserProfile
  language: 'en' | 'ru'
}

interface NumerologyData {
  lifePath: number
  expression: number
  soulUrge: number
  personality: number
  dayNumber: number
  monthNumber: number
  yearNumber: number
  biorythms: {
    physical: number
    emotional: number
    intellectual: number
  }
  compatibility?: {
    partnerName: string
    score: number
    description: string
  }
}

export function NumerologyDisplay({ userProfile, language }: NumerologyDisplayProps) {
  const [numerologyData, setNumerologyData] = useState<NumerologyData | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [userName, setUserName] = useState(userProfile.name || '')
  const [showLifePathDescription, setShowLifePathDescription] = useState(false)
  const [showExpressionDescription, setShowExpressionDescription] = useState(false)
  const [showSoulUrgeDescription, setShowSoulUrgeDescription] = useState(false)
  const [showPersonalityDescription, setShowPersonalityDescription] = useState(false)
  const [showDayNumberDescription, setShowDayNumberDescription] = useState(false)
  const [showMonthNumberDescription, setShowMonthNumberDescription] = useState(false)
  const [showYearNumberDescription, setShowYearNumberDescription] = useState(false)
  const [showBiorythmsDescription, setShowBiorythmsDescription] = useState(false)
  const [showAdditionalNumbersDescription, setShowAdditionalNumbersDescription] = useState(false)
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false)

  console.log('üîç NumerologyDisplay received userProfile:', userProfile)
  console.log('üîç NumerologyDisplay userProfile type:', typeof userProfile)
  console.log('üîç NumerologyDisplay userProfile name:', userProfile?.name)
  console.log('üîç NumerologyDisplay userProfile birthDate:', userProfile?.birthDate)

  const handleDownloadPDF = async () => {
    if (!numerologyData) {
      alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF')
      return
    }

    setIsGeneratingPDF(true)
    
    try {
      console.log('üîÑ Generating PDF for numerology data:', numerologyData)
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
      const pdfBlob = await PDFGenerator.generateNumerologyPDF(userProfile, numerologyData)
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const url = URL.createObjectURL(pdfBlob)
      const link = document.createElement('a')
      link.href = url
      link.download = `numerology-report-${userProfile.name || 'user'}-${new Date().toISOString().split('T')[0]}.html`
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ DOM, –∫–ª–∏–∫–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
      URL.revokeObjectURL(url)
      
      console.log('‚úÖ PDF generated and downloaded successfully')
      
    } catch (error) {
      console.error('‚ùå Error generating PDF:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    } finally {
      setIsGeneratingPDF(false)
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º userName –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ userProfile.name
  useEffect(() => {
    if (userProfile?.name && userProfile.name !== userName) {
      console.log('üîÑ Updating userName from userProfile:', userProfile.name)
      setUserName(userProfile.name)
    }
  }, [userProfile])

  useEffect(() => {
    calculateNumerology()
  }, [userProfile, userName])


  const calculateNumerology = () => {
    setIsLoading(true)
    
    try {
      // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
      const birthDate = parseISO(userProfile.birthDate)
      const day = birthDate.getDate()
      const month = birthDate.getMonth() + 1
      const year = birthDate.getFullYear()
      
      // 1. –ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ (Life Path)
      const lifePath = calculateLifePath(day, month, year)
      
      // 2. –ß–∏—Å–ª–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (Expression/Destiny)
      console.log('üîç User profile name:', userProfile.name)
      console.log('üîç Current userName:', userName)
      console.log('üîç Name type:', typeof userName)
      console.log('üîç Name length:', userName?.length)
      
      if (!userName || userName.trim() === '') {
        console.warn('‚ö†Ô∏è –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
        setUserName('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
      }
      
      if (!userProfile.birthDate) {
        console.warn('‚ö†Ô∏è –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É')
        userProfile.birthDate = new Date().toISOString().split('T')[0] // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
      }
      
      const expression = calculateExpression(userName)
      console.log('Expression calculation for', userName, '=', expression)
      
      // 3. –ß–∏—Å–ª–æ –¥—É—à–∏ (–ø–æ –¥–Ω—é —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ä—É—Å—Å–∫–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏)
      const soulUrge = reduceToSingleDigit(day)
      console.log('Soul Urge (day of birth) calculation for', day, '=', soulUrge)
      
      // 4. –ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏ (Personality)
      const personality = calculatePersonality(userName)
      console.log('Personality calculation for', userName, '=', personality)
      
      // 5. –ß–∏—Å–ª–∞ –¥–Ω—è, –º–µ—Å—è—Ü–∞, –≥–æ–¥–∞
      const dayNumber = reduceToSingleDigit(day)
      const monthNumber = reduceToSingleDigit(month)
      const yearNumber = reduceToSingleDigit(year)
      
      // 6. –ë–∏–æ—Ä–∏—Ç–º—ã
      console.log('üîç Calling calculateBiorythms with userProfile.birthDate:', userProfile.birthDate)
      const biorythms = calculateBiorythms(birthDate)
      
      const data = {
        lifePath: lifePath || 0,
        expression: expression || 0,
        soulUrge: soulUrge || 0,
        personality: personality || 0,
        dayNumber: dayNumber || 0,
        monthNumber: monthNumber || 0,
        yearNumber: yearNumber || 0,
        biorythms: biorythms || { physical: 0, emotional: 0, intellectual: 0 }
      }
      
      console.log('üî¢ Numerology data calculated:', data)
      console.log('üìä Expression number:', expression)
      console.log('üìä Expression type:', typeof expression)
      console.log('üìä Expression is NaN:', isNaN(expression))
      console.log('üìä Expression is undefined:', expression === undefined)
      console.log('üìä Expression is null:', expression === null)
      
      setNumerologyData(data)
    } catch (error) {
      console.error('‚ùå Error calculating numerology:', error)
      console.error('‚ùå Error details:', error)
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const fallbackData = {
        lifePath: 0,
        expression: 0,
        soulUrge: 0,
        personality: 0,
        dayNumber: 0,
        monthNumber: 0,
        yearNumber: 0,
        biorythms: { physical: 0, emotional: 0, intellectual: 0 }
      }
      
      console.log('üîÑ Using fallback data due to error:', fallbackData)
      setNumerologyData(fallbackData)
    } finally {
      setIsLoading(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —á–∏—Å–ª–∞ –¥–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –º–∞—Å—Ç–µ—Ä-—á–∏—Å–ª–∞
  const reduceToSingleDigit = (num: number): number => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞
    if (isNaN(num) || num === null || num === undefined) {
      console.warn('‚ö†Ô∏è Invalid number in reduceToSingleDigit:', num)
      return 0
    }
    
    if (num === 11 || num === 22 || num === 33) return num // –ú–∞—Å—Ç–µ—Ä-—á–∏—Å–ª–∞
    if (num < 10) return num
    
    let sum = num
    let iterations = 0
    while (sum >= 10 && sum !== 11 && sum !== 22 && sum !== 33 && iterations < 10) {
      sum = sum.toString().split('').reduce((acc, digit) => {
        const digitNum = parseInt(digit)
        return isNaN(digitNum) ? acc : acc + digitNum
      }, 0)
      iterations++
    }
    
    console.log(`üîÑ reduceToSingleDigit: ${num} ‚Üí ${sum} (iterations: ${iterations})`)
    return sum
  }

  // –†–∞—Å—á–µ—Ç —á–∏—Å–ª–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
  const calculateLifePath = (day: number, month: number, year: number): number => {
    console.log(`üìÖ –†–∞—Å—á–µ—Ç —á–∏—Å–ª–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è: ${day}.${month}.${year}`)
    
    // –°–æ–∫—Ä–∞—â–∞–µ–º –¥–µ–Ω—å –¥–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã
    const dayReduced = reduceToSingleDigit(day)
    console.log(`   –î–µ–Ω—å: ${day} ‚Üí ${dayReduced}`)
    
    // –°–æ–∫—Ä–∞—â–∞–µ–º –º–µ—Å—è—Ü –¥–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –º–∞—Å—Ç–µ—Ä-—á–∏—Å–ª–∞
    const monthReduced = reduceToSingleDigit(month)
    console.log(`   –ú–µ—Å—è—Ü: ${month} ‚Üí ${monthReduced}`)
    
    // –°–æ–∫—Ä–∞—â–∞–µ–º –≥–æ–¥ –¥–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã
    const yearReduced = reduceToSingleDigit(year)
    console.log(`   –ì–æ–¥: ${year} ‚Üí ${yearReduced}`)
    
    // –°—É–º–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const sum = dayReduced + monthReduced + yearReduced
    console.log(`   –°—É–º–º–∞: ${dayReduced} + ${monthReduced} + ${yearReduced} = ${sum}`)
    
    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–∞—Å—Ç–µ—Ä-—á–∏—Å–µ–ª
    const finalResult = reduceToSingleDigit(sum)
    console.log(`   –ò—Ç–æ–≥–æ: ${sum} ‚Üí ${finalResult}`)
    console.log(`‚úÖ –ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏: ${finalResult}`)
    
    return finalResult
  }

  // –†–∞—Å—á–µ—Ç —á–∏—Å–ª–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
  const calculateExpression = (name: string): number => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    if (!name || typeof name !== 'string' || name.trim() === '') {
      console.warn('‚ö†Ô∏è Invalid name in calculateExpression:', name)
      return 1
    }
    
    const letterValues: { [key: string]: number } = {
      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–∏—Ñ–∞–≥–æ—Ä–µ–π—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞)
      'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'H': 8, 'I': 9,
      'J': 1, 'K': 2, 'L': 3, 'M': 4, 'N': 5, 'O': 6, 'P': 7, 'Q': 8, 'R': 9,
      'S': 1, 'T': 2, 'U': 3, 'V': 4, 'W': 5, 'X': 6, 'Y': 7, 'Z': 8,
      // –†—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä—É—Å—Å–∫–∞—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞)
      // –ê, –ò, –°, –™ = 1
      '–ê': 1, '–ò': 1, '–°': 1, '–™': 1,
      // –ë, –ô, –¢, –´ = 2
      '–ë': 2, '–ô': 2, '–¢': 2, '–´': 2,
      // –í, –ö, –£, –¨ = 3
      '–í': 3, '–ö': 3, '–£': 3, '–¨': 3,
      // –ì, –õ, –§, –≠ = 4
      '–ì': 4, '–õ': 4, '–§': 4, '–≠': 4,
      // –î, –ú, –•, –Æ = 5
      '–î': 5, '–ú': 5, '–•': 5, '–Æ': 5,
      // –ï, –ù, –¶, –Ø = 6
      '–ï': 6, '–ù': 6, '–¶': 6, '–Ø': 6,
      // –Å, –û, –ß = 7
      '–Å': 7, '–û': 7, '–ß': 7,
      // –ñ, –ü, –® = 8
      '–ñ': 8, '–ü': 8, '–®': 8,
      // –ó, –†, –© = 9
      '–ó': 9, '–†': 9, '–©': 9
    }
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è –Ω–∞ —á–∞—Å—Ç–∏ (–∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ, —Ñ–∞–º–∏–ª–∏—è)
    const nameParts = name.toUpperCase().split(' ').filter(part => part.length > 0)
    let totalSum = 0
    
    console.log(`üî¢ –†–∞—Å—á–µ—Ç —á–∏—Å–ª–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è: "${name}"`)
    console.log(`üìù –ß–∞—Å—Ç–∏ –∏–º–µ–Ω–∏:`, nameParts)
    
    // –°—á–∏—Ç–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ, –∑–∞—Ç–µ–º —Å—É–º–º–∏—Ä—É–µ–º
    for (let i = 0; i < nameParts.length; i++) {
      const part = nameParts[i]
      let partSum = 0
      let partCalculation = []
      
      for (const letter of part) {
        if (letterValues[letter]) {
          partSum += letterValues[letter]
          partCalculation.push(`${letter}=${letterValues[letter]}`)
        } else {
          console.warn(`‚ö†Ô∏è Unknown letter: "${letter}" in part: "${part}"`)
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ partSum –≤–∞–ª–∏–¥–µ–Ω
      if (isNaN(partSum) || partSum < 0) {
        console.warn(`‚ö†Ô∏è Invalid partSum for "${part}":`, partSum)
        partSum = 0
      }
      
      const partReduced = reduceToSingleDigit(partSum)
      console.log(`   ${i + 1}. ${part}: ${partCalculation.join(' + ')} = ${partSum} ‚Üí ${partReduced}`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ partReduced –≤–∞–ª–∏–¥–µ–Ω
      if (isNaN(partReduced)) {
        console.warn(`‚ö†Ô∏è Invalid partReduced for "${part}":`, partReduced)
        totalSum += 0
      } else {
        totalSum += partReduced
      }
    }
    
    const finalResult = reduceToSingleDigit(totalSum)
    console.log(`   –ò—Ç–æ–≥–æ: ${totalSum} ‚Üí ${finalResult}`)
    console.log(`‚úÖ –ß–∏—Å–ª–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: ${finalResult}`)
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (isNaN(finalResult) || finalResult === 0) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ —á–∏—Å–ª–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:', { name, finalResult, totalSum })
      console.error('‚ùå Debug info:', { 
        nameParts, 
        totalSum, 
        finalResult, 
        nameLength: name.length,
        nameType: typeof name
      })
      return 1 // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 1 –∫–∞–∫ fallback
    }
    
    return finalResult
  }

  // –†–∞—Å—á–µ—Ç —á–∏—Å–ª–∞ –¥—É—à–µ–≤–Ω–æ–≥–æ –ø–æ–±—É–∂–¥–µ–Ω–∏—è
  const calculateSoulUrge = (name: string): number => {
    const vowelValues: { [key: string]: number } = {
      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≥–ª–∞—Å–Ω—ã–µ
      'A': 1, 'E': 5, 'I': 9, 'O': 6, 'U': 3, 'Y': 7,
      // –†—É—Å—Å–∫–∏–µ –≥–ª–∞—Å–Ω—ã–µ
      '–ê': 1, '–ï': 5, '–Å': 7, '–ò': 9, '–û': 6, '–£': 3, '–´': 2, '–≠': 4, '–Æ': 5, '–Ø': 6
    }
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è –Ω–∞ —á–∞—Å—Ç–∏ –∏ —Å—á–∏—Ç–∞–µ–º –≥–ª–∞—Å–Ω—ã–µ –≤ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    const nameParts = name.toUpperCase().split(' ').filter(part => part.length > 0)
    let totalSum = 0
    
    for (const part of nameParts) {
      const vowels = part.match(/[AEIOUY–ê–ï–Å–ò–û–£–´–≠–Æ–Ø]/g) || []
      let partSum = 0
      
      for (const vowel of vowels) {
        if (vowelValues[vowel]) {
          partSum += vowelValues[vowel]
        }
      }
      // –°–æ–∫—Ä–∞—â–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –¥–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã
      partSum = reduceToSingleDigit(partSum)
      totalSum += partSum
    }
    
    return reduceToSingleDigit(totalSum)
  }

  // –†–∞—Å—á–µ—Ç —á–∏—Å–ª–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
  const calculatePersonality = (name: string): number => {
    const letterValues: { [key: string]: number } = {
      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–∏—Ñ–∞–≥–æ—Ä–µ–π—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞)
      'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'H': 8, 'I': 9,
      'J': 1, 'K': 2, 'L': 3, 'M': 4, 'N': 5, 'O': 6, 'P': 7, 'Q': 8, 'R': 9,
      'S': 1, 'T': 2, 'U': 3, 'V': 4, 'W': 5, 'X': 6, 'Y': 7, 'Z': 8,
      // –†—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä—É—Å—Å–∫–∞—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞)
      // –ê, –ò, –°, –™ = 1
      '–ê': 1, '–ò': 1, '–°': 1, '–™': 1,
      // –ë, –ô, –¢, –´ = 2
      '–ë': 2, '–ô': 2, '–¢': 2, '–´': 2,
      // –í, –ö, –£, –¨ = 3
      '–í': 3, '–ö': 3, '–£': 3, '–¨': 3,
      // –ì, –õ, –§, –≠ = 4
      '–ì': 4, '–õ': 4, '–§': 4, '–≠': 4,
      // –î, –ú, –•, –Æ = 5
      '–î': 5, '–ú': 5, '–•': 5, '–Æ': 5,
      // –ï, –ù, –¶, –Ø = 6
      '–ï': 6, '–ù': 6, '–¶': 6, '–Ø': 6,
      // –Å, –û, –ß = 7
      '–Å': 7, '–û': 7, '–ß': 7,
      // –ñ, –ü, –® = 8
      '–ñ': 8, '–ü': 8, '–®': 8,
      // –ó, –†, –© = 9
      '–ó': 9, '–†': 9, '–©': 9
    }
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è –Ω–∞ —á–∞—Å—Ç–∏ –∏ —Å—á–∏—Ç–∞–µ–º —Å–æ–≥–ª–∞—Å–Ω—ã–µ –≤ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    const nameParts = name.toUpperCase().split(' ').filter(part => part.length > 0)
    let totalSum = 0
    
    for (const part of nameParts) {
      const consonants = part.replace(/[AEIOUY–ê–ï–Å–ò–û–£–´–≠–Æ–Ø]/g, '')
      let partSum = 0
      
      for (const letter of consonants) {
        if (letterValues[letter]) {
          partSum += letterValues[letter]
        }
      }
      // –°–æ–∫—Ä–∞—â–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –¥–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã
      partSum = reduceToSingleDigit(partSum)
      totalSum += partSum
    }
    
    return reduceToSingleDigit(totalSum)
  }

  // –†–∞—Å—á–µ—Ç –±–∏–æ—Ä–∏—Ç–º–æ–≤ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
  const calculateBiorythms = (birthDate: Date) => {
    const today = new Date()
    const daysSinceBirth = Math.floor((today.getTime() - birthDate.getTime()) / (1000 * 60 * 60 * 24))
    
    const physical = Math.sin(2 * Math.PI * daysSinceBirth / 23) * 100
    const emotional = Math.sin(2 * Math.PI * daysSinceBirth / 28) * 100
    const intellectual = Math.sin(2 * Math.PI * daysSinceBirth / 33) * 100
    
    return {
      physical: Math.round(physical),
      emotional: Math.round(emotional),
      intellectual: Math.round(intellectual)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —á–∏—Å–ª–∞
  const getNumberDescription = (number: number, type: string) => {
    const descriptions = {
      ru: {
        lifePath: {
          1: '–õ–∏–¥–µ—Ä, –Ω–æ–≤–∞—Ç–æ—Ä, –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π',
          2: '–î–∏–ø–ª–æ–º–∞—Ç, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π',
          3: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π, –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π, –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π',
          4: '–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π, –Ω–∞–¥–µ–∂–Ω—ã–π',
          5: '–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç, —Å–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤—ã–π, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π',
          6: '–ó–∞–±–æ—Ç–ª–∏–≤—ã–π, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π, —Å–µ–º–µ–π–Ω—ã–π',
          7: '–ê–Ω–∞–ª–∏—Ç–∏–∫, –¥—É—Ö–æ–≤–Ω—ã–π, –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç',
          8: '–ê–º–±–∏—Ü–∏–æ–∑–Ω—ã–π, –º–∞—Ç–µ—Ä–∏–∞–ª–∏—Å—Ç, –ª–∏–¥–µ—Ä',
          9: '–ì—É–º–∞–Ω–∏—Å—Ç, –º—É–¥—Ä—ã–π, –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π',
          11: '–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, –¥—É—Ö–æ–≤–Ω—ã–π –ª–∏–¥–µ—Ä',
          22: '–ú–∞—Å—Ç–µ—Ä-—Å—Ç—Ä–æ–∏—Ç–µ–ª—å, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –∏–¥–µ–∞–ª–∏—Å—Ç',
          33: '–ú–∞—Å—Ç–µ—Ä-—É—á–∏—Ç–µ–ª—å, —Å–æ—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–ª–∏—Ç–µ–ª—å'
        },
        expression: {
          1: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ª–∏–¥–µ—Ä —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∏–¥–µ—è–º–∏',
          2: '–î–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π –ø–æ—Å—Ä–µ–¥–Ω–∏–∫',
          3: '–•—É–¥–æ–∂–Ω–∏–∫ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä',
          4: '–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä',
          5: '–°–≤–æ–±–æ–¥–Ω—ã–π –¥—É—Ö –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
          6: '–ó–∞–±–æ—Ç–ª–∏–≤—ã–π –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å',
          7: '–ê–Ω–∞–ª–∏—Ç–∏–∫ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
          8: '–î–µ–ª–æ–≤–æ–π –ª–∏–¥–µ—Ä',
          9: '–ì—É–º–∞–Ω–∏—Å—Ç –∏ —É—á–∏—Ç–µ–ª—å',
          11: '–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –ª–∏–¥–µ—Ä',
          22: '–ú–∞—Å—Ç–µ—Ä-—Å—Ç—Ä–æ–∏—Ç–µ–ª—å',
          33: '–ú–∞—Å—Ç–µ—Ä-—Ü–µ–ª–∏—Ç–µ–ª—å'
        },
        soulUrge: {
          1: '–õ–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å',
          2: '–î–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ',
          3: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ',
          4: '–ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å',
          5: '–°–≤–æ–±–æ–¥–æ–ª—é–±–∏–µ, –∞–≤–∞–Ω—Ç—é—Ä–∏–∑–º, –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
          6: '–ó–∞–±–æ—Ç–ª–∏–≤–æ—Å—Ç—å, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —Å–µ–º–µ–π—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å',
          7: '–ê–Ω–∞–ª–∏—Ç–∏—á–Ω–æ—Å—Ç—å, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å, –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç–Ω–æ—Å—Ç—å',
          8: '–ê–º–±–∏—Ü–∏–æ–∑–Ω–æ—Å—Ç—å, –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–º, –ª–∏–¥–µ—Ä—Å—Ç–≤–æ',
          9: '–ì—É–º–∞–Ω–∏–∑–º, –º—É–¥—Ä–æ—Å—Ç—å, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ',
          11: '–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ—Å—Ç—å, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –¥—É—Ö–æ–≤–Ω–æ–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ',
          22: '–ú–∞—Å—Ç–µ—Ä-—Å—Ç—Ä–æ–∏—Ç–µ–ª—å, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –∏–¥–µ–∞–ª–∏—Å—Ç',
          33: '–ú–∞—Å—Ç–µ—Ä-—É—á–∏—Ç–µ–ª—å, —Å–æ—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–ª–∏—Ç–µ–ª—å'
        },
        personality: {
          1: '–£–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π',
          2: '–î–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π',
          3: '–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π',
          4: '–ù–∞–¥–µ–∂–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π',
          5: '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π',
          6: '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π',
          7: '–ê–Ω–∞–ª–∏—Ç–∏—á–Ω—ã–π –∏ –¥—É—Ö–æ–≤–Ω—ã–π',
          8: '–ê–º–±–∏—Ü–∏–æ–∑–Ω—ã–π –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π',
          9: '–ú—É–¥—Ä—ã–π –∏ —Å–æ—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π',
          11: '–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π',
          22: '–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π –∏ –∏–¥–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π',
          33: '–°–æ—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π –∏ —Ü–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π'
        }
      },
      en: {
        lifePath: {
          1: 'Leader, innovator, independent',
          2: 'Diplomat, collaborator, sensitive',
          3: 'Creative, social, optimistic',
          4: 'Practical, organized, reliable',
          5: 'Adventurer, free-spirited, energetic',
          6: 'Caring, responsible, family-oriented',
          7: 'Analyst, spiritual, introvert',
          8: 'Ambitious, materialistic, leader',
          9: 'Humanitarian, wise, completing',
          11: 'Intuitive, inspiring, spiritual leader',
          22: 'Master builder, practical idealist',
          33: 'Master teacher, compassionate healer'
        },
        expression: {
          1: 'Creative leader with original ideas',
          2: 'Diplomatic mediator',
          3: 'Artist and communicator',
          4: 'Practical organizer',
          5: 'Free spirit and explorer',
          6: 'Caring nurturer',
          7: 'Analyst and researcher',
          8: 'Business leader',
          9: 'Humanitarian and teacher',
          11: 'Inspiring leader',
          22: 'Master builder',
          33: 'Master healer'
        },
        soulUrge: {
          1: 'Desire to be first and independent',
          2: 'Desire for harmony and cooperation',
          3: 'Desire for self-expression and creativity',
          4: 'Desire for stability and order',
          5: 'Desire for freedom and adventure',
          6: 'Desire to care and be responsible',
          7: 'Desire for understanding and spirituality',
          8: 'Desire for material success',
          9: 'Desire to serve humanity',
          11: 'Desire to inspire others',
          22: 'Desire to build something great',
          33: 'Desire to heal and teach'
        },
        personality: {
          1: 'Confident and independent',
          2: 'Diplomatic and sensitive',
          3: 'Social and creative',
          4: 'Reliable and practical',
          5: 'Adaptable and curious',
          6: 'Responsible and caring',
          7: 'Analytical and spiritual',
          8: 'Ambitious and determined',
          9: 'Wise and compassionate',
          11: 'Intuitive and inspiring',
          22: 'Practical and idealistic',
          33: 'Compassionate and healing'
        }
      }
    }
    
    const typeDescriptions = descriptions[language][type as keyof typeof descriptions[typeof language]] as { [key: number]: string }
    return typeDescriptions[number] || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-cosmic-400"></div>
      </div>
    )
  }

  if (!numerologyData) {
    return (
      <div className="text-center p-8">
        <p className="text-cosmic-400">
          {language === 'ru' ? '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏' : 'Error calculating numerology'}
        </p>
      </div>
    )
  }

  console.log('üé® Rendering numerology data:', numerologyData)
  console.log('üìä Expression value in render:', numerologyData.expression)

  return (
    <div className="space-y-6">
      {/* Header with Download Button */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-2xl font-bold text-cosmic-100 mb-2">
            {language === 'ru' ? '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑' : 'Numerology Analysis'}
          </h2>
          <p className="text-cosmic-400">
            {language === 'ru' ? '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —á–∏—Å–µ–ª –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π' : 'Complete analysis of your numbers and their meanings'}
          </p>
        </div>
        
        <button
          onClick={handleDownloadPDF}
          disabled={isGeneratingPDF}
          className="flex items-center space-x-2 bg-gradient-to-r from-cosmic-600 to-cosmic-500 hover:from-cosmic-700 hover:to-cosmic-600 disabled:opacity-50 disabled:cursor-not-allowed text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200"
        >
          <Download className="w-5 h-5" />
          <span>
            {isGeneratingPDF 
              ? (language === 'ru' ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 'Generating...') 
              : (language === 'ru' ? '–°–∫–∞—á–∞—Ç—å PDF' : 'Download PDF')
            }
          </span>
        </button>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ —á–∏—Å–ª–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="cosmic-card text-center cursor-pointer hover:bg-space-700/50 transition-colors group"
          onClick={() => setShowLifePathDescription(true)}
        >
          <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-700 rounded-full flex items-center justify-center mx-auto mb-3 group-hover:scale-110 transition-transform">
            <Calculator className="w-8 h-8 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            {language === 'ru' ? '–ß–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏' : 'Life Path Number'}
          </h3>
          <div className="text-3xl font-bold text-cosmic-400 mb-2">
            {numerologyData.lifePath}
          </div>
          <p className="text-sm text-cosmic-300 mb-2">
            {getNumberDescription(numerologyData.lifePath, 'lifePath')}
          </p>
          <div className="text-xs text-cosmic-500 group-hover:text-cosmic-400 transition-colors">
            {language === 'ru' ? '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è' : 'Click for detailed description'}
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="cosmic-card text-center cursor-pointer hover:bg-space-700/50 transition-colors group"
          onClick={() => setShowExpressionDescription(true)}
        >
          <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-700 rounded-full flex items-center justify-center mx-auto mb-3 group-hover:scale-110 transition-transform">
            <Zap className="w-8 h-8 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            {language === 'ru' ? '–ß–∏—Å–ª–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è' : 'Expression Number'}
          </h3>
          <div className="text-3xl font-bold text-cosmic-400 mb-2">
            {numerologyData.expression !== undefined && numerologyData.expression !== null ? numerologyData.expression : 'N/A'}
          </div>
          <p className="text-sm text-cosmic-300 mb-2">
            {getNumberDescription(numerologyData.expression, 'expression')}
          </p>
          <div className="text-xs text-cosmic-500 group-hover:text-cosmic-400 transition-colors">
            {language === 'ru' ? '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è' : 'Click for detailed description'}
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="cosmic-card text-center cursor-pointer hover:bg-space-700/50 transition-colors group"
          onClick={() => setShowSoulUrgeDescription(true)}
        >
          <div className="w-16 h-16 bg-gradient-to-br from-pink-500 to-pink-700 rounded-full flex items-center justify-center mx-auto mb-3 group-hover:scale-110 transition-transform">
            <Heart className="w-8 h-8 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            {language === 'ru' ? '–ß–∏—Å–ª–æ –¥—É—à–∏ (–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è)' : 'Soul Number (Birth Day)'}
          </h3>
          <div className="text-3xl font-bold text-cosmic-400 mb-2">
            {numerologyData.soulUrge}
          </div>
          <p className="text-sm text-cosmic-300 mb-2">
            {getNumberDescription(numerologyData.soulUrge, 'soulUrge')}
          </p>
          <div className="text-xs text-cosmic-500 group-hover:text-cosmic-400 transition-colors">
            {language === 'ru' ? '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è' : 'Click for detailed description'}
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="cosmic-card text-center cursor-pointer hover:bg-space-700/50 transition-colors group"
          onClick={() => setShowPersonalityDescription(true)}
        >
          <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-green-700 rounded-full flex items-center justify-center mx-auto mb-3 group-hover:scale-110 transition-transform">
            <User className="w-8 h-8 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            {language === 'ru' ? '–ß–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏' : 'Personality Number'}
          </h3>
          <div className="text-3xl font-bold text-cosmic-400 mb-2">
            {numerologyData.personality}
          </div>
          <p className="text-sm text-cosmic-300 mb-2">
            {getNumberDescription(numerologyData.personality, 'personality')}
          </p>
          <div className="text-xs text-cosmic-500 group-hover:text-cosmic-400 transition-colors">
            {language === 'ru' ? '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è' : 'Click for detailed description'}
          </div>
        </motion.div>
      </div>

      {/* –ë–∏–æ—Ä–∏—Ç–º—ã */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.5 }}
        className="cosmic-card cursor-pointer hover:bg-space-700/50 transition-colors group"
        onClick={() => setShowBiorythmsDescription(true)}
      >
        <h3 className="cosmic-subtitle text-xl mb-4 flex items-center gap-2 group-hover:text-cosmic-300 transition-colors">
          <TrendingUp className="w-5 h-5 text-cosmic-400 group-hover:scale-110 transition-transform" />
            {language === 'ru' ? '–ë–∏–æ—Ä–∏—Ç–º—ã' : 'Biorythms'}
          <span className="text-xs text-cosmic-500 group-hover:text-cosmic-400 transition-colors ml-auto">
            {language === 'ru' ? '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è' : 'Click for detailed description'}
          </span>
        </h3>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-cosmic-400 mb-2">
              {numerologyData.biorythms.physical}%
            </div>
            <div className="text-sm text-cosmic-300 mb-2">
              {language === 'ru' ? '–§–∏–∑–∏—á–µ—Å–∫–∏–π' : 'Physical'}
            </div>
            <div className="w-full bg-space-700 rounded-full h-2">
              <div 
                className="bg-blue-500 h-2 rounded-full transition-all duration-500"
                style={{ width: `${Math.abs(numerologyData.biorythms.physical)}%` }}
              ></div>
            </div>
          </div>

          <div className="text-center">
            <div className="text-2xl font-bold text-cosmic-400 mb-2">
              {numerologyData.biorythms.emotional}%
            </div>
            <div className="text-sm text-cosmic-300 mb-2">
              {language === 'ru' ? '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π' : 'Emotional'}
            </div>
            <div className="w-full bg-space-700 rounded-full h-2">
              <div 
                className="bg-pink-500 h-2 rounded-full transition-all duration-500"
                style={{ width: `${Math.abs(numerologyData.biorythms.emotional)}%` }}
              ></div>
            </div>
          </div>

          <div className="text-center">
            <div className="text-2xl font-bold text-cosmic-400 mb-2">
              {numerologyData.biorythms.intellectual}%
            </div>
            <div className="text-sm text-cosmic-300 mb-2">
              {language === 'ru' ? '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π' : 'Intellectual'}
            </div>
            <div className="w-full bg-space-700 rounded-full h-2">
              <div 
                className="bg-purple-500 h-2 rounded-full transition-all duration-500"
                style={{ width: `${Math.abs(numerologyData.biorythms.intellectual)}%` }}
              ></div>
            </div>
          </div>
        </div>
      </motion.div>

      {/* –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
      {numerologyData && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
        >
          <DailyNumerologyMetrics
            lifePathNumber={numerologyData.lifePath}
            expressionNumber={numerologyData.expression}
            soulUrgeNumber={numerologyData.soulUrge}
            personalityNumber={numerologyData.personality}
            language={language}
          />
        </motion.div>
      )}

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.6 }}
        className="cosmic-card cursor-pointer hover:bg-space-700/50 transition-colors group"
        onClick={() => {
          console.log('üñ±Ô∏è Additional numbers block clicked, setting showAdditionalNumbersDescription to true')
          setShowAdditionalNumbersDescription(true)
        }}
      >
        <h3 className="cosmic-subtitle text-xl mb-4 flex items-center gap-2 group-hover:text-cosmic-300 transition-colors">
          <Calendar className="w-5 h-5 text-cosmic-400 group-hover:scale-110 transition-transform" />
          {language === 'ru' ? '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞' : 'Additional Numbers'}
          <span className="text-xs text-cosmic-500 group-hover:text-cosmic-400 transition-colors ml-auto">
            {language === 'ru' ? '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è' : 'Click for detailed description'}
          </span>
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="text-center p-4 rounded-lg">
            <div className="text-2xl font-bold text-cosmic-400 mb-2">
              {numerologyData.dayNumber}
            </div>
            <div className="text-sm text-cosmic-300">
              {language === 'ru' ? '–ß–∏—Å–ª–æ –¥–Ω—è' : 'Day Number'}
            </div>
          </div>

          <div className="text-center p-4 rounded-lg">
            <div className="text-2xl font-bold text-cosmic-400 mb-2">
              {numerologyData.monthNumber}
            </div>
            <div className="text-sm text-cosmic-300">
              {language === 'ru' ? '–ß–∏—Å–ª–æ –º–µ—Å—è—Ü–∞' : 'Month Number'}
            </div>
          </div>

          <div className="text-center p-4 rounded-lg">
            <div className="text-2xl font-bold text-cosmic-400 mb-2">
              {numerologyData.yearNumber}
            </div>
            <div className="text-sm text-cosmic-300">
              {language === 'ru' ? '–ß–∏—Å–ª–æ –≥–æ–¥–∞' : 'Year Number'}
            </div>
          </div>
        </div>
      </motion.div>

      {/* Life Path Description Modal */}
      <AnimatePresence>
        {showLifePathDescription && numerologyData && (
          <LifePathDescription
            number={numerologyData.lifePath}
            language={language}
            onClose={() => setShowLifePathDescription(false)}
          />
        )}
      </AnimatePresence>

      {/* Expression Description Modal */}
      <AnimatePresence>
        {showExpressionDescription && numerologyData && (
          <ExpressionDescription
            number={numerologyData.expression}
            language={language}
            onClose={() => setShowExpressionDescription(false)}
          />
        )}
      </AnimatePresence>

      {/* Soul Urge Description Modal */}
      <AnimatePresence>
        {showSoulUrgeDescription && numerologyData && (
          <SoulUrgeDescription
            number={numerologyData.soulUrge}
            language={language}
            onClose={() => setShowSoulUrgeDescription(false)}
          />
        )}
      </AnimatePresence>

      {/* Personality Description Modal */}
      <AnimatePresence>
        {showPersonalityDescription && numerologyData && (
          <PersonalityDescription
            number={numerologyData.personality}
            language={language}
            onClose={() => setShowPersonalityDescription(false)}
          />
        )}
      </AnimatePresence>

      {/* Biorythms Description Modal */}
      <AnimatePresence>
        {showBiorythmsDescription && numerologyData && (
          <BiorythmsDescription
            biorythms={numerologyData.biorythms}
            language={language}
            onClose={() => setShowBiorythmsDescription(false)}
          />
        )}
      </AnimatePresence>

      {/* Day Number Description Modal */}
      <AnimatePresence>
        {showDayNumberDescription && numerologyData && (
          <>
            {console.log('üé≠ Rendering Day Number Modal with number:', numerologyData.dayNumber)}
            <AdditionalNumbersDescription
              number={numerologyData.dayNumber}
              type="day"
              language={language}
              onClose={() => {
                console.log('üé≠ Closing Day Number Modal')
                setShowDayNumberDescription(false)
              }}
            />
          </>
        )}
      </AnimatePresence>

      {/* Month Number Description Modal */}
      <AnimatePresence>
        {showMonthNumberDescription && numerologyData && (
          <AdditionalNumbersDescription
            number={numerologyData.monthNumber}
            type="month"
            language={language}
            onClose={() => setShowMonthNumberDescription(false)}
          />
        )}
      </AnimatePresence>

      {/* Year Number Description Modal */}
      <AnimatePresence>
        {showYearNumberDescription && numerologyData && (
          <AdditionalNumbersDescription
            number={numerologyData.yearNumber}
            type="year"
            language={language}
            onClose={() => setShowYearNumberDescription(false)}
          />
        )}
      </AnimatePresence>

      {/* Additional Numbers Block Description Modal */}
      <AnimatePresence>
        {showAdditionalNumbersDescription && numerologyData && (
          <>
            {console.log('üé≠ Rendering Additional Numbers Block Modal with data:', numerologyData)}
            <AdditionalNumbersBlockDescription
              numerologyData={{
                dayNumber: numerologyData.dayNumber,
                monthNumber: numerologyData.monthNumber,
                yearNumber: numerologyData.yearNumber
              }}
              language={language}
              onClose={() => {
                console.log('üé≠ Closing Additional Numbers Block Modal')
                setShowAdditionalNumbersDescription(false)
              }}
            />
          </>
        )}
      </AnimatePresence>
    </div>
  )
}