'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { Sparkles, Moon, Target, Brain, Zap, Calendar, Clock } from 'lucide-react'

interface DailyHumanDesignMetricsProps {
  type: string
  strategy: string
  authority: string
  profile: string
  definition: string
  language: 'en' | 'ru'
}

export default function DailyHumanDesignMetrics({
  type,
  strategy,
  authority,
  profile,
  definition,
  language
}: DailyHumanDesignMetricsProps) {
  const [isExpanded, setIsExpanded] = useState(false)
  const [metrics, setMetrics] = useState<any>(null)

  useEffect(() => {
    console.log('üß¨ DailyHumanDesignMetrics: Setting metrics for type:', type)
    
    const today = new Date()
    const dayOfMonth = today.getDate()
    const month = today.getMonth() + 1
    const year = today.getFullYear()
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
    const strategyAdvice = getStrategyAdvice(type, strategy, dayOfMonth)
    const authorityFocus = getAuthorityFocus(authority, dayOfMonth)
    const energyLevel = calculateEnergyLevel(type, dayOfMonth)
    const lunarPhase = getLunarPhase(dayOfMonth, month, year)
    const activeCenters = getActiveCenters(type, dayOfMonth)
    const undefinedCenters = getUndefinedCenters(type, dayOfMonth)
    const hourlyEnergy = generateHourlyEnergy(type, dayOfMonth)
    
    setMetrics({
      strategyAdvice,
      authorityFocus,
      energyLevel,
      lunarPhase,
      activeCenters,
      undefinedCenters,
      hourlyEnergy,
      dayOfMonth,
      month,
      year
    })
  }, [type, strategy, authority, profile, definition])

  const getStrategyAdvice = (type: string, strategy: string, day: number) => {
    const strategies = {
      'Generator': {
        advice: '–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ç–æ, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ –≤–∞–º —Å–µ–≥–æ–¥–Ω—è',
        focus: '–°–ª—É—à–∞–π—Ç–µ —Å–∞–∫—Ä–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫',
        color: 'green'
      },
      'Manifesting Generator': {
        advice: '–û—Ç–≤–µ—á–∞–π—Ç–µ, –∑–∞—Ç–µ–º –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö',
        focus: '–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
        color: 'orange'
      },
      'Projector': {
        advice: '–ñ–¥–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ —Å–µ–≥–æ–¥–Ω—è',
        focus: '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',
        color: 'yellow'
      },
      'Manifestor': {
        advice: '–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º',
        focus: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        color: 'red'
      },
      'Reflector': {
        advice: '–ñ–¥–∏—Ç–µ –ª—É–Ω–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π',
        focus: '–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ª—É–Ω–Ω—ã–º —Ñ–∞–∑–∞–º',
        color: 'purple'
      }
    }
    
    return strategies[type as keyof typeof strategies] || {
      advice: '–°–ª–µ–¥—É–π—Ç–µ –≤–∞—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏',
      focus: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç',
      color: 'blue'
    }
  }

  const getAuthorityFocus = (authority: string, day: number) => {
    const authorities = {
      'Emotional': {
        focus: '–î–æ–∂–¥–∏—Ç–µ—Å—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —è—Å–Ω–æ—Å—Ç–∏',
        advice: '–ù–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏–π –≤ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–ª–Ω–∞—Ö',
        timing: '–õ—É—á—à–µ–µ –≤—Ä–µ–º—è: –≤–µ—á–µ—Ä'
      },
      'Sacral': {
        focus: '–°–ª—É—à–∞–π—Ç–µ —Å–∞–∫—Ä–∞–ª—å–Ω—ã–µ –∑–≤—É–∫–∏',
        advice: '–û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–æ, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–∏–∫',
        timing: '–õ—É—á—à–µ–µ –≤—Ä–µ–º—è: —É—Ç—Ä–æ-–¥–µ–Ω—å'
      },
      'Splenic': {
        focus: '–î–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–º –æ—â—É—â–µ–Ω–∏—è–º',
        advice: '–ü–µ—Ä–≤–∞—è –º—ã—Å–ª—å - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è',
        timing: '–õ—É—á—à–µ–µ –≤—Ä–µ–º—è: —É—Ç—Ä–æ'
      },
      'Ego': {
        focus: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–¥–µ—á–Ω—ã–π –æ—Ç–∫–ª–∏–∫',
        advice: '–î–µ–π—Å—Ç–≤—É–π—Ç–µ –æ—Ç —Å–µ—Ä–¥—Ü–∞',
        timing: '–õ—É—á—à–µ–µ –≤—Ä–µ–º—è: –¥–µ–Ω—å'
      },
      'Self-Projected': {
        focus: '–°–ª—É—à–∞–π—Ç–µ —Å–≤–æ–π –≥–æ–ª–æ—Å',
        advice: '–ì–æ–≤–æ—Ä–∏—Ç–µ –≤—Å–ª—É—Ö –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏',
        timing: '–õ—É—á—à–µ–µ –≤—Ä–µ–º—è: –ª—é–±–æ–µ'
      },
      'Environmental': {
        focus: '–û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ–∫—Ä—É–∂–µ–Ω–∏–µ',
        advice: '–ú–µ—Å—Ç–æ –∏ –ª—é–¥–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏—è',
        timing: '–õ—É—á—à–µ–µ –≤—Ä–µ–º—è: –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–º –º–µ—Å—Ç–µ'
      },
      'Lunar': {
        focus: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª—É–Ω–Ω—ã–º–∏ —Ñ–∞–∑–∞–º–∏',
        advice: '–û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –†–µ—Ñ–ª–µ–∫—Ç–æ—Ä–æ–≤',
        timing: '–õ—É—á—à–µ–µ –≤—Ä–µ–º—è: —Å–æ–≥–ª–∞—Å–Ω–æ –ª—É–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É'
      }
    }
    
    return authorities[authority as keyof typeof authorities] || {
      focus: '–°–ª–µ–¥—É–π—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É',
      advice: '–î–æ–≤–µ—Ä—è–π—Ç–µ —Å–µ–±–µ',
      timing: '–õ—É—á—à–µ–µ –≤—Ä–µ–º—è: –∫–æ–≥–¥–∞ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —è—Å–Ω–æ—Å—Ç—å'
    }
  }

  const calculateEnergyLevel = (type: string, day: number) => {
    const baseEnergy = {
      'Generator': 8,
      'Manifesting Generator': 9,
      'Projector': 6,
      'Manifestor': 7,
      'Reflector': 5
    }
    
    const base = baseEnergy[type as keyof typeof baseEnergy] || 6
    const dayVariation = (day % 9) + 1
    const energy = Math.min(10, Math.max(1, base + (dayVariation - 5) * 0.5))
    
    return Math.round(energy * 10) / 10
  }

  const getLunarPhase = (day: number, month: number, year: number) => {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ª—É–Ω–Ω–æ–π —Ñ–∞–∑—ã
    const lunarCycle = 29.5
    const daysSinceNewMoon = (day + month * 30 + year * 365) % lunarCycle
    
    if (daysSinceNewMoon < 7.4) return { phase: '–ù–æ–≤–æ–ª—É–Ω–∏–µ', energy: '–ù–∏–∑–∫–∞—è', advice: '–í—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' }
    if (daysSinceNewMoon < 14.7) return { phase: '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å', energy: '–†–∞—Å—Ç—É—â–∞—è', advice: '–í—Ä–µ–º—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π' }
    if (daysSinceNewMoon < 22.1) return { phase: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', energy: '–í—ã—Å–æ–∫–∞—è', advice: '–í—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è' }
    return { phase: '–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å', energy: '–£–±—ã–≤–∞—é—â–∞—è', advice: '–í—Ä–µ–º—è –¥–ª—è –æ—á–∏—â–µ–Ω–∏—è' }
  }

  const getActiveCenters = (type: string, day: number) => {
    const centers = {
      'Generator': ['–°–∞–∫—Ä–∞–ª—å–Ω—ã–π', '–ö–æ—Ä–Ω–µ–≤–æ–π', '–°–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ'],
      'Manifesting Generator': ['–°–∞–∫—Ä–∞–ª—å–Ω—ã–π', '–ö–æ—Ä–Ω–µ–≤–æ–π', '–°–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ', '–ì–æ—Ä–ª–æ–≤–æ–π'],
      'Projector': ['–ì–æ—Ä–ª–æ–≤–æ–π', '–°–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ'],
      'Manifestor': ['–ì–æ—Ä–ª–æ–≤–æ–π', '–ö–æ—Ä–Ω–µ–≤–æ–π'],
      'Reflector': []
    }
    
    return centers[type as keyof typeof centers] || []
  }

  const getUndefinedCenters = (type: string, day: number) => {
    const allCenters = ['–ö–æ—Ä–Ω–µ–≤–æ–π', '–°–∞–∫—Ä–∞–ª—å–Ω—ã–π', '–°–æ–ª–Ω–µ—á–Ω–æ–µ —Å–ø–ª–µ—Ç–µ–Ω–∏–µ', '–°–µ—Ä–¥–µ—á–Ω—ã–π', '–ì–æ—Ä–ª–æ–≤–æ–π', '–ê–¥–∂–Ω–∞', '–¢–µ–º–µ–Ω–Ω–æ–π', '–°–µ–ª–µ–∑–µ–Ω–æ—á–Ω—ã–π', 'G-—Ü–µ–Ω—Ç—Ä']
    const active = getActiveCenters(type, day)
    return allCenters.filter(center => !(active as any[]).includes(center))
  }

  const generateHourlyEnergy = (type: string, day: number) => {
    const hours = Array.from({ length: 24 }, (_, i) => i)
    return hours.map(hour => {
      let energy = 5
      
      // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ —Ç–∏–ø—É
      if (type === 'Generator' || type === 'Manifesting Generator') {
        energy = hour >= 6 && hour <= 18 ? 8 : 4
      } else if (type === 'Projector') {
        energy = hour >= 9 && hour <= 17 ? 7 : 3
      } else if (type === 'Manifestor') {
        energy = hour >= 7 && hour <= 19 ? 6 : 5
      } else if (type === 'Reflector') {
        energy = 4 + Math.sin((hour - 6) * Math.PI / 12) * 2
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é –ø–æ –¥–Ω—é
      energy += Math.sin((hour + day) * Math.PI / 12) * 1.5
      
      return {
        hour,
        energy: Math.max(1, Math.min(10, Math.round(energy * 10) / 10))
      }
    })
  }

  if (!metrics) {
    return (
      <div className="cosmic-card p-6">
        <div className="animate-pulse">
          <div className="h-4 bg-space-700 rounded mb-2"></div>
          <div className="h-4 bg-space-700 rounded mb-4"></div>
          <div className="h-8 bg-space-700 rounded"></div>
        </div>
        <p className="text-cosmic-500 text-sm mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ Human Design...</p>
      </div>
    )
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="relative overflow-hidden bg-gradient-to-br from-space-800/50 to-space-900/50 backdrop-blur-sm border border-cosmic-500/20 rounded-2xl p-4 shadow-2xl"
    >
      {/* Background Pattern */}
      <div className="absolute inset-0 bg-gradient-to-br from-green-500/5 to-blue-500/5"></div>
      <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-green-500/10 to-transparent rounded-full blur-3xl"></div>
      {/* Header */}
      <div className="relative flex items-center gap-3 mb-4">
        <div className="w-10 h-10 bg-gradient-to-br from-green-500 to-green-700 rounded-xl flex items-center justify-center shadow-lg">
          <Brain className="w-5 h-5 text-white" />
        </div>
        <div>
          <h3 className="text-white font-bold text-lg">üß¨ Human Design</h3>
          <p className="text-cosmic-300 text-xs">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</p>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
      <div className="space-y-4">
        {/* –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–Ω—è */}
        <div className="bg-space-800/50 rounded-lg p-4">
          <div className="flex items-center gap-2 mb-2">
            <Target className="w-4 h-4 text-cosmic-400" />
            <h4 className="font-semibold text-cosmic-300">–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–Ω—è</h4>
          </div>
          <p className="text-cosmic-200 text-sm mb-2">{metrics.strategyAdvice.advice}</p>
          <p className="text-cosmic-400 text-xs">–§–æ–∫—É—Å: {metrics.strategyAdvice.focus}</p>
        </div>

        {/* –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç –≤ –¥–µ–π—Å—Ç–≤–∏–∏ */}
        <div className="bg-space-800/50 rounded-lg p-4">
          <div className="flex items-center gap-2 mb-2">
            <Zap className="w-4 h-4 text-cosmic-400" />
            <h4 className="font-semibold text-cosmic-300">–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç –≤ –¥–µ–π—Å—Ç–≤–∏–∏</h4>
          </div>
          <p className="text-cosmic-200 text-sm mb-2">{metrics.authorityFocus.focus}</p>
          <p className="text-cosmic-400 text-xs">{metrics.authorityFocus.timing}</p>
        </div>

        {/* –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ */}
        <div className="bg-space-800/50 rounded-lg p-4">
          <div className="flex items-center justify-between mb-2">
            <span className="text-cosmic-300 font-medium">–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏</span>
            <span className="text-cosmic-400 text-sm">{metrics.energyLevel}/10</span>
          </div>
          <div className="w-full bg-space-700 rounded-full h-2">
            <motion.div
              initial={{ width: 0 }}
              animate={{ width: `${metrics.energyLevel * 10}%` }}
              transition={{ duration: 1, delay: 0.5 }}
              className={`h-2 rounded-full ${
                metrics.energyLevel >= 8 ? 'bg-green-500' :
                metrics.energyLevel >= 6 ? 'bg-yellow-500' :
                'bg-red-500'
              }`}
            />
          </div>
        </div>

        {/* –õ—É–Ω–Ω—ã–µ —Ñ–∞–∑—ã (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –†–µ—Ñ–ª–µ–∫—Ç–æ—Ä–æ–≤) */}
        {type === 'Reflector' && (
          <div className="bg-space-800/50 rounded-lg p-4">
            <div className="flex items-center gap-2 mb-2">
              <Moon className="w-4 h-4 text-cosmic-400" />
              <h4 className="font-semibold text-cosmic-300">–õ—É–Ω–Ω–∞—è —Ñ–∞–∑–∞</h4>
            </div>
            <p className="text-cosmic-200 text-sm mb-1">{metrics.lunarPhase.phase}</p>
            <p className="text-cosmic-400 text-xs">{metrics.lunarPhase.advice}</p>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è */}
        <motion.button
          onClick={() => setIsExpanded(!isExpanded)}
          className="w-full cosmic-button bg-space-700 hover:bg-space-600 text-cosmic-200 text-sm py-2"
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          {isExpanded ? '–°–≤–µ—Ä–Ω—É—Ç—å –¥–µ—Ç–∞–ª–∏' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –¥–µ—Ç–∞–ª–∏'}
        </motion.button>

        {/* –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –¥–µ—Ç–∞–ª–∏ */}
        {isExpanded && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            className="space-y-4"
          >
            {/* –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã */}
            <div className="bg-space-800/30 rounded-lg p-4">
              <h4 className="font-semibold text-cosmic-300 mb-2">–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã</h4>
              <div className="flex flex-wrap gap-2">
                {metrics.activeCenters.map((center: string, index: number) => (
                  <span key={index} className="px-2 py-1 bg-green-900/30 text-green-300 text-xs rounded">
                    {center}
                  </span>
                ))}
              </div>
            </div>

            {/* –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã */}
            <div className="bg-space-800/30 rounded-lg p-4">
              <h4 className="font-semibold text-cosmic-300 mb-2">–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã</h4>
              <div className="flex flex-wrap gap-2">
                {metrics.undefinedCenters.slice(0, 5).map((center: string, index: number) => (
                  <span key={index} className="px-2 py-1 bg-yellow-900/30 text-yellow-300 text-xs rounded">
                    {center}
                  </span>
                ))}
                {metrics.undefinedCenters.length > 5 && (
                  <span className="px-2 py-1 bg-space-700 text-cosmic-400 text-xs rounded">
                    +{metrics.undefinedCenters.length - 5} –µ—â–µ
                  </span>
                )}
              </div>
            </div>

            {/* –ì—Ä–∞—Ñ–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ —á–∞—Å–∞–º */}
            <div className="bg-space-800/30 rounded-lg p-4">
              <h4 className="font-semibold text-cosmic-300 mb-3">–ì—Ä–∞—Ñ–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ —á–∞—Å–∞–º</h4>
              <div className="grid grid-cols-12 gap-1">
                {metrics.hourlyEnergy.slice(6, 22).map((hour: any, index: number) => (
                  <div key={index} className="text-center">
                    <div className="text-xs text-cosmic-500 mb-1">{hour.hour}:00</div>
                    <div className="w-full bg-space-700 rounded h-8 flex items-end">
                      <motion.div
                        initial={{ height: 0 }}
                        animate={{ height: `${hour.energy * 10}%` }}
                        transition={{ duration: 0.5, delay: index * 0.05 }}
                        className={`w-full rounded ${
                          hour.energy >= 8 ? 'bg-green-500' :
                          hour.energy >= 6 ? 'bg-yellow-500' :
                          hour.energy >= 4 ? 'bg-orange-500' :
                          'bg-red-500'
                        }`}
                      />
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </motion.div>
        )}
      </div>
    </motion.div>
  )
}
