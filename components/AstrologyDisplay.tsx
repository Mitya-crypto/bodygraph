// components/AstrologyDisplay.tsx
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { Star, Sun, Moon, Zap, Target, Heart, Brain, Shield, Users, Globe } from 'lucide-react'
import { UserProfile } from '@/store/appStore'
import { fetchAstrologyData, formatProfileForAstrology } from '@/lib/astrologyApi'
import { NatalChart } from './NatalChart'

interface AstrologyDisplayProps {
  userProfile: UserProfile
  language: 'en' | 'ru'
}

interface AstrologyData {
  sun: {
    sign: string
    degree: number
    house: number
    description: string
  }
  moon: {
    sign: string
    degree: number
    house: number
    description: string
  }
  rising: {
    sign: string
    degree: number
    description: string
  }
  planets: Array<{
    name: string
    sign: string
    degree: number
    house: number
    description: string
  }>
  houses: Array<{
    number: number
    sign: string
    degree: number
    description: string
  }>
  aspects: Array<{
    planet1: string
    planet2: string
    aspect: string
    orb: number
    description: string
  }>
  chartData: {
    ascendant: number
    mc: number
    houses: number[]
    planets: Array<{
      name: string
      longitude: number
      latitude: number
    }>
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∞—Å–ø–µ–∫—Ç–æ–≤
const translateAspectName = (aspectName: string): string => {
  const translations: { [key: string]: string } = {
    'Conjunction': '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
    'Opposition': '–û–ø–ø–æ–∑–∏—Ü–∏—è',
    'Trine': '–¢—Ä–∏–Ω',
    'Square': '–ö–≤–∞–¥—Ä–∞—Ç',
    'Sextile': '–°–µ–∫—Å—Ç–∏–ª—å',
    'Quincunx': '–ö–≤–∏–Ω–∫–æ–Ω—Å',
    'Semisextile': '–ü–æ–ª—É—Å–µ–∫—Å—Ç–∏–ª—å'
  }
  return translations[aspectName] || aspectName
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–ª–∞–Ω–µ—Ç
const translatePlanetName = (planetName: string): string => {
  const translations: { [key: string]: string } = {
    'Sun': '–°–æ–ª–Ω—Ü–µ',
    'Moon': '–õ—É–Ω–∞',
    'Mercury': '–ú–µ—Ä–∫—É—Ä–∏–π',
    'Venus': '–í–µ–Ω–µ—Ä–∞',
    'Mars': '–ú–∞—Ä—Å',
    'Jupiter': '–Æ–ø–∏—Ç–µ—Ä',
    'Saturn': '–°–∞—Ç—É—Ä–Ω',
    'Uranus': '–£—Ä–∞–Ω',
    'Neptune': '–ù–µ–ø—Ç—É–Ω',
    'Pluto': '–ü–ª—É—Ç–æ–Ω'
  }
  return translations[planetName] || planetName
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
const translateZodiacSign = (signName: string): string => {
  const translations: { [key: string]: string } = {
    'Aries': '–û–≤–µ–Ω',
    'Taurus': '–¢–µ–ª–µ—Ü',
    'Gemini': '–ë–ª–∏–∑–Ω–µ—Ü—ã',
    'Cancer': '–†–∞–∫',
    'Leo': '–õ–µ–≤',
    'Virgo': '–î–µ–≤–∞',
    'Libra': '–í–µ—Å—ã',
    'Scorpio': '–°–∫–æ—Ä–ø–∏–æ–Ω',
    'Sagittarius': '–°—Ç—Ä–µ–ª–µ—Ü',
    'Capricorn': '–ö–æ–∑–µ—Ä–æ–≥',
    'Aquarius': '–í–æ–¥–æ–ª–µ–π',
    'Pisces': '–†—ã–±—ã'
  }
  return translations[signName] || signName
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–º–∞
const getHouseDescription = (houseNumber: number): string => {
  const descriptions: { [key: number]: string } = {
    1: '–î–æ–º –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞—à—É –≤–Ω–µ—à–Ω–æ—Å—Ç—å, —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –ø–æ–¥—Ö–æ–¥ –∫ –∂–∏–∑–Ω–∏.',
    2: '–î–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Ä–µ—Å—É—Ä—Å–æ–≤. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ñ–∏–Ω–∞–Ω—Å—ã, –∏–º—É—â–µ—Å—Ç–≤–æ –∏ —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É.',
    3: '–î–æ–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏—è. –í–ª–∏—è–µ—Ç –Ω–∞ –æ–±—â–µ–Ω–∏–µ, –±–ª–∏–∂–∞–π—à–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏.',
    4: '–î–æ–º —Å–µ–º—å–∏ –∏ –∫–æ—Ä–Ω–µ–π. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–º, —Å–µ–º—å—é, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ—Å–Ω–æ–≤—É –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä.',
    5: '–î–æ–º —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–π. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–æ–º–∞–Ω—Ç–∏–∫—É, –¥–µ—Ç–µ–π, —Ö–æ–±–±–∏ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ.',
    6: '–î–æ–º –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å–ª—É–∂–µ–Ω–∏—è. –í–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É, –∑–¥–æ—Ä–æ–≤—å–µ, —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è –∏ –∑–∞–±–æ—Ç—É –æ –¥—Ä—É–≥–∏—Ö.',
    7: '–î–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±—Ä–∞–∫, –¥–µ–ª–æ–≤—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤—Ä–∞–≥–æ–≤.',
    8: '–î–æ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–±—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ, –≥–ª—É–±–æ–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∏–Ω—Ç–∏–º–Ω–æ—Å—Ç—å.',
    9: '–î–æ–º —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –∏ –¥–∞–ª—å–Ω–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π. –í–ª–∏—è–µ—Ç –Ω–∞ –≤—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –≤–µ—Ä—É –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤.',
    10: '–î–æ–º –∫–∞—Ä—å–µ—Ä—ã –∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏.',
    11: '–î–æ–º –¥—Ä—É–∂–±—ã –∏ –Ω–∞–¥–µ–∂–¥. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥—Ä—É–∑–µ–π, –≥—Ä—É–ø–ø–æ–≤—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –º–µ—á—Ç—ã –æ –±—É–¥—É—â–µ–º.',
    12: '–î–æ–º –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è –∏ —É–µ–¥–∏–Ω–µ–Ω–∏—è. –í–ª–∏—è–µ—Ç –Ω–∞ —Ç–∞–π–Ω—ã, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å, –∏–∑–æ–ª—è—Ü–∏—é –∏ —Å–∫—Ä—ã—Ç—ã–µ –≤—Ä–∞–≥–∏.'
  }
  return descriptions[houseNumber] || '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∞'
}

export function AstrologyDisplay({ userProfile, language }: AstrologyDisplayProps) {
  const [astrologyData, setAstrologyData] = useState<AstrologyData | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [activeTab, setActiveTab] = useState<'natal' | 'transits'>('natal')
  const [transitsData, setTransitsData] = useState<any>(null)
  const [transitsLoading, setTransitsLoading] = useState(false)
  const [transitsError, setTransitsError] = useState<string | null>(null)
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0])

  console.log('üîç AstrologyDisplay received userProfile:', userProfile)
  console.log('üîç Current activeTab:', activeTab)

  useEffect(() => {
    if (userProfile && userProfile.name && userProfile.birthDate) {
      fetchAstrologyDataFromApi()
    }
  }, [userProfile])

  const fetchAstrologyDataFromApi = async () => {
    setIsLoading(true)
    setError(null)

    try {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è API
      const apiRequest = formatProfileForAstrology(userProfile)
      
      if (!apiRequest) {
        throw new Error('Invalid profile data for Astrology')
      }

      console.log('üîÑ Fetching Astrology data:', apiRequest)

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
      const apiData = await fetchAstrologyData(apiRequest)
      
      setAstrologyData(apiData)
      console.log('‚úÖ Astrology data loaded:', apiData)

    } catch (error) {
      console.error('‚ùå Error fetching Astrology data:', error)
      setError(language === 'ru' ? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏' : 'Error loading Astrology data')
    } finally {
      setIsLoading(false)
    }
  }

  const calculateTransits = async () => {
    if (!userProfile.birthDate) {
      setTransitsError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤')
      return
    }

    setTransitsLoading(true)
    setTransitsError(null)

    try {
      console.log('üîÑ Calculating transits for user:', userProfile.name)
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      if (!astrologyData) {
        throw new Error('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É')
      }
      
      console.log('üìä Using existing astrology data for transits')
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –∏–∑ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const natalChartForTransits = {
        birthData: {
          year: new Date(userProfile.birthDate).getFullYear(),
          month: new Date(userProfile.birthDate).getMonth() + 1,
          day: new Date(userProfile.birthDate).getDate(),
          hours: parseInt(userProfile.birthTime?.split(':')[0] || '12'),
          minutes: parseInt(userProfile.birthTime?.split(':')[1] || '0'),
          latitude: userProfile.coordinates?.lat || 55.7558,
          longitude: userProfile.coordinates?.lng || 37.6176
        },
        planets: astrologyData.chartData.planets,
        houses: astrologyData.chartData.houses.map((house: any) => ({
          ...house,
          cusp: house.longitude || house.cusp || 0
        })),
        ascendant: astrologyData.chartData.ascendant,
        mc: astrologyData.chartData.mc
      }
      
      console.log('üì§ Sending transits request with natal chart:', natalChartForTransits)
      
      const transitsResponse = await fetch('/api/transits', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          natalChart: natalChartForTransits,
          targetDate: new Date(selectedDate).toISOString(),
          includeMinorTransits: false
        }),
      })

      if (!transitsResponse.ok) {
        let errorMessage = `HTTP ${transitsResponse.status}: ${transitsResponse.statusText}`
        try {
          const errorData = await transitsResponse.json()
          console.error('‚ùå Transits API error response:', errorData)
          errorMessage = errorData.error || errorMessage
        } catch (e) {
          console.error('‚ùå Could not parse error response')
        }
        throw new Error(errorMessage)
      }

      const transitsResult = await transitsResponse.json()
      console.log('üì• Transits response:', transitsResult)
      
      if (transitsResult.success) {
        console.log('‚úÖ Setting transits data:', transitsResult.data)
        setTransitsData(transitsResult.data)
      } else {
        console.error('‚ùå Transits calculation failed:', transitsResult.error)
        throw new Error(transitsResult.error || 'Failed to calculate transits')
      }
      
    } catch (error) {
      console.error('‚ùå Error calculating transits:', error)
      setTransitsError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤')
    } finally {
      setTransitsLoading(false)
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –¥–æ —Ç–µ–∫—É—â–µ–π –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Ç—Ä–∞–Ω–∑–∏—Ç—ã
  useEffect(() => {
    if (activeTab === 'transits') {
      const today = new Date().toISOString().split('T')[0]
      console.log('üìÖ Updating selected date to today:', today)
      setSelectedDate(today)
    }
  }, [activeTab])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∏—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Ç–∞–± —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
  useEffect(() => {
    console.log('üîÑ Transits useEffect triggered:', { activeTab, hasUserProfile: !!userProfile, hasTransitsData: !!transitsData })
    if (activeTab === 'transits' && userProfile && !transitsData) {
      console.log('‚úÖ Calling calculateTransits()')
      calculateTransits()
    }
  }, [activeTab, userProfile])

  const getSignDescription = (sign: string) => {
    const descriptions = {
      ru: {
        Aries: '–û–≤–µ–Ω - —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–π –ª–∏–¥–µ—Ä',
        Taurus: '–¢–µ–ª–µ—Ü - –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–æ–∑–∏–¥–∞—Ç–µ–ª—å',
        Gemini: '–ë–ª–∏–∑–Ω–µ—Ü—ã - –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä',
        Cancer: '–†–∞–∫ - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫',
        Leo: '–õ–µ–≤ - —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –∏ –≥–æ—Ä–¥—ã–π –ª–∏–¥–µ—Ä',
        Virgo: '–î–µ–≤–∞ - –∞–Ω–∞–ª–∏—Ç–∏—á–Ω—ã–π –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—é—â–∏–π—Å—è —Ä–∞–±–æ—Ç–Ω–∏–∫',
        Libra: '–í–µ—Å—ã - –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π –∏ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π –º–∏—Ä–æ—Ç–≤–æ—Ä–µ—Ü',
        Scorpio: '–°–∫–æ—Ä–ø–∏–æ–Ω - –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π—Å—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
        Sagittarius: '–°—Ç—Ä–µ–ª–µ—Ü - —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∏ —Å–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤—ã–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫',
        Capricorn: '–ö–æ–∑–µ—Ä–æ–≥ - –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å',
        Aquarius: '–í–æ–¥–æ–ª–µ–π - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –Ω–æ–≤–∞—Ç–æ—Ä',
        Pisces: '–†—ã–±—ã - –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏ —Å–æ—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—á—Ç–∞—Ç–µ–ª—å'
      },
      en: {
        Aries: 'Aries - energetic and impulsive leader',
        Taurus: 'Taurus - practical and stable builder',
        Gemini: 'Gemini - sociable and curious communicator',
        Cancer: 'Cancer - emotional and caring protector',
        Leo: 'Leo - creative and proud leader',
        Virgo: 'Virgo - analytical and perfecting worker',
        Libra: 'Libra - harmonious and diplomatic peacemaker',
        Scorpio: 'Scorpio - intense and transforming investigator',
        Sagittarius: 'Sagittarius - philosophical and freedom-loving traveler',
        Capricorn: 'Capricorn - ambitious and disciplined builder',
        Aquarius: 'Aquarius - original and humanitarian innovator',
        Pisces: 'Pisces - intuitive and compassionate dreamer'
      }
    }
    return descriptions[language][sign as keyof typeof descriptions[typeof language]] || sign
  }

  if (isLoading) {
    return (
      <div className="space-y-6">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="cosmic-card text-center"
        >
          <div className="w-16 h-16 bg-gradient-to-br from-pink-500 to-pink-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <Star className="w-8 h-8 text-white animate-pulse" />
          </div>
          <h2 className="cosmic-subtitle text-xl mb-2">
            {language === 'ru' ? '–ê–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã' : 'Natal Chart Analysis'}
          </h2>
          <p className="text-cosmic-300">
            {language === 'ru' ? '–†–∞—Å—á–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏–π –ø–ª–∞–Ω–µ—Ç –∏ –¥–æ–º–æ–≤...' : 'Calculating planetary positions and houses...'}
          </p>
        </motion.div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="space-y-6">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="cosmic-card text-center"
        >
          <div className="w-16 h-16 bg-gradient-to-br from-red-500 to-red-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <Shield className="w-8 h-8 text-white" />
          </div>
          <h2 className="cosmic-subtitle text-xl mb-2 text-red-400">
            {language === 'ru' ? '–û—à–∏–±–∫–∞' : 'Error'}
          </h2>
          <p className="text-cosmic-300 mb-4">{error}</p>
          <button
            onClick={fetchAstrologyDataFromApi}
            className="cosmic-button bg-cosmic-500 hover:bg-cosmic-600"
          >
            {language === 'ru' ? '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞' : 'Try Again'}
          </button>
        </motion.div>
      </div>
    )
  }

  if (!astrologyData) {
    return (
      <div className="space-y-6">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="cosmic-card text-center"
        >
          <p className="text-cosmic-300">
            {language === 'ru' ? '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : 'No data found'}
          </p>
        </motion.div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* –¢–∞–±—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ–π –∏ —Ç—Ä–∞–Ω–∑–∏—Ç–∞–º–∏ */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="cosmic-card"
      >
        <div className="flex space-x-1 bg-space-800 rounded-lg p-1 mb-6" style={{ position: 'relative', zIndex: 10 }}>
          <button
            type="button"
            onClick={(e) => {
              e.preventDefault()
              e.stopPropagation()
              console.log('üîò –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ button clicked')
              setActiveTab('natal')
              console.log('üîò ActiveTab set to: natal')
            }}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors cursor-pointer ${
              activeTab === 'natal'
                ? 'bg-pink-600 text-white'
                : 'text-cosmic-300 hover:text-white hover:bg-space-700'
            }`}
            style={{ pointerEvents: 'auto', userSelect: 'none' }}
          >
            {language === 'ru' ? '–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞' : 'Natal Chart'}
          </button>
          <button
            type="button"
            onClick={(e) => {
              e.preventDefault()
              e.stopPropagation()
              console.log('üîò –¢—Ä–∞–Ω–∑–∏—Ç—ã button clicked')
              setActiveTab('transits')
              console.log('üîò ActiveTab set to: transits')
            }}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors cursor-pointer ${
              activeTab === 'transits'
                ? 'bg-pink-600 text-white'
                : 'text-cosmic-300 hover:text-white hover:bg-space-700'
            }`}
            style={{ pointerEvents: 'auto', userSelect: 'none' }}
          >
            {language === 'ru' ? '–¢—Ä–∞–Ω–∑–∏—Ç—ã' : 'Transits'}
          </button>
        </div>

        {activeTab === 'natal' && (
          <div className="space-y-6">
            {/* –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1 }}
              className="w-full"
            >
              <NatalChart 
                chartData={astrologyData.chartData}
              />
            </motion.div>

            {/* –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã - –°–æ–ª–Ω—Ü–µ, –õ—É–Ω–∞, –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="cosmic-card text-center"
        >
          <div className="w-12 h-12 bg-gradient-to-br from-yellow-500 to-yellow-700 rounded-full flex items-center justify-center mx-auto mb-3">
            <Sun className="w-6 h-6 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            –°–æ–ª–Ω—Ü–µ
          </h3>
          <div className="text-xl font-bold text-cosmic-400 mb-2">
            {translateZodiacSign(astrologyData.sun.sign)}
          </div>
          <div className="text-sm text-cosmic-300 mb-2">
            –î–æ–º {astrologyData.sun.house}
          </div>
          <p className="text-xs text-cosmic-500 mb-2">
            {getSignDescription(astrologyData.sun.sign)}
          </p>
          <p className="text-xs text-cosmic-400 italic border-t border-cosmic-700 pt-2">
            {getHouseDescription(astrologyData.sun.house)}
          </p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="cosmic-card text-center"
        >
          <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-700 rounded-full flex items-center justify-center mx-auto mb-3">
            <Moon className="w-6 h-6 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            –õ—É–Ω–∞
          </h3>
          <div className="text-xl font-bold text-cosmic-400 mb-2">
            {translateZodiacSign(astrologyData.moon.sign)}
          </div>
          <div className="text-sm text-cosmic-300 mb-2">
            –î–æ–º {astrologyData.moon.house}
          </div>
          <p className="text-xs text-cosmic-500 mb-2">
            {getSignDescription(astrologyData.moon.sign)}
          </p>
          <p className="text-xs text-cosmic-400 italic border-t border-cosmic-700 pt-2">
            {getHouseDescription(astrologyData.moon.house)}
          </p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="cosmic-card text-center"
        >
          <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-700 rounded-full flex items-center justify-center mx-auto mb-3">
            <Star className="w-6 h-6 text-white" />
          </div>
          <h3 className="cosmic-subtitle text-lg mb-2">
            –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç
          </h3>
          <div className="text-xl font-bold text-cosmic-400 mb-2">
            {translateZodiacSign(astrologyData.rising.sign)}
          </div>
          <div className="text-sm text-cosmic-300 mb-2">
            {astrologyData.rising.degree.toFixed(1)}¬∞
          </div>
          <p className="text-xs text-cosmic-500">
            {getSignDescription(astrologyData.rising.sign)}
          </p>
          <p className="text-xs text-cosmic-400 italic border-t border-cosmic-700 pt-2 mt-2">
            {getHouseDescription(1)}
          </p>
        </motion.div>
      </div>

      {/* –ü–ª–∞–Ω–µ—Ç—ã */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.5 }}
        className="cosmic-card"
      >
        <h3 className="cosmic-subtitle text-xl mb-4 flex items-center gap-2">
          <Zap className="w-5 h-5 text-cosmic-400" />
          {language === 'ru' ? '–ü–ª–∞–Ω–µ—Ç—ã' : 'Planets'}
        </h3>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {astrologyData.planets.map((planet, index) => (
            <div key={index} className="p-3 bg-space-800/50 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <div className="font-semibold text-cosmic-300">
                  {translatePlanetName(planet.name)}
                </div>
                <div className="text-cosmic-400 font-medium">
                  {translateZodiacSign(planet.sign)}
                </div>
              </div>
              <div className="text-sm text-cosmic-500 mb-1">
                –î–æ–º {planet.house}
              </div>
              <div className="text-xs text-cosmic-600">
                {planet.degree.toFixed(1)}¬∞
              </div>
            </div>
          ))}
        </div>
      </motion.div>

      {/* –ê—Å–ø–µ–∫—Ç—ã */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.6 }}
        className="cosmic-card"
      >
        <h3 className="cosmic-subtitle text-xl mb-4 flex items-center gap-2">
          <Target className="w-5 h-5 text-cosmic-400" />
          {language === 'ru' ? '–û—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã' : 'Major Aspects'}
        </h3>
        <div className="space-y-3">
          {astrologyData.aspects.slice(0, 6).map((aspect, index) => (
            <div key={index} className="p-3 bg-space-800/50 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <div className="font-semibold text-cosmic-300">
                  {translatePlanetName(aspect.planet1)} {translateAspectName(aspect.aspect)} {translatePlanetName(aspect.planet2)}
                </div>
                <div className="text-cosmic-400 text-sm">
                  {aspect.orb.toFixed(1)}¬∞
                </div>
              </div>
              <p className="text-sm text-cosmic-500">
                {translateAspectName(aspect.aspect)} –º–µ–∂–¥—É {translatePlanetName(aspect.planet1)} –∏ {translatePlanetName(aspect.planet2)}
              </p>
            </div>
          ))}
        </div>
      </motion.div>

      {/* –î–æ–º–∞ */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.7 }}
        className="cosmic-card"
      >
        <h3 className="cosmic-subtitle text-xl mb-4 flex items-center gap-2">
          <Users className="w-5 h-5 text-cosmic-400" />
          {language === 'ru' ? '–î–æ–º–∞' : 'Houses'}
        </h3>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {astrologyData.houses.slice(0, 12).map((house, index) => (
            <div key={index} className="p-3 bg-space-800/50 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <div className="font-semibold text-cosmic-300">
                  –î–æ–º {house.number}
                </div>
                <div className="text-cosmic-400 font-medium">
                  {translateZodiacSign(house.sign)}
                </div>
              </div>
              <div className="text-xs text-cosmic-600 mb-1">
                {house.degree.toFixed(1)}¬∞
              </div>
              <p className="text-xs text-cosmic-500">
                {house.description}
              </p>
            </div>
          ))}
        </div>
      </motion.div>
          </div>
        )}

        {activeTab === 'transits' && (
          <div className="space-y-6">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤—ã–±–æ—Ä –¥–∞—Ç—ã */}
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
              <div>
                <h3 className="cosmic-subtitle text-xl mb-2">
                  {language === 'ru' ? '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã' : 'Astrological Transits'}
                </h3>
                <p className="text-cosmic-400 text-sm">
                  {language === 'ru' 
                    ? '–¢–µ–∫—É—â–µ–µ –≤–ª–∏—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –Ω–∞ –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É' 
                    : 'Current planetary influences on your natal chart'
                  }
                </p>
              </div>
              <div className="flex items-center gap-2">
                <label className="text-cosmic-300 text-sm">
                  {language === 'ru' ? '–î–∞—Ç–∞:' : 'Date:'}
                </label>
                <input
                  type="date"
                  value={selectedDate}
                  onChange={(e) => setSelectedDate(e.target.value)}
                  className="bg-space-800 border border-space-600 rounded px-3 py-1 text-white text-sm"
                />
                <button
                  onClick={calculateTransits}
                  disabled={transitsLoading}
                  className="bg-pink-600 hover:bg-pink-700 disabled:bg-space-600 text-white px-3 py-1 rounded text-sm transition-colors"
                >
                  {transitsLoading ? '...' : (language === 'ru' ? '–û–±–Ω–æ–≤–∏—Ç—å' : 'Update')}
                </button>
              </div>
            </div>

            {/* –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫ */}
            {transitsLoading && (
              <div className="cosmic-card text-center">
                <div className="w-16 h-16 bg-gradient-to-br from-pink-500 to-pink-700 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Star className="w-8 h-8 text-white animate-pulse" />
                </div>
                <p className="text-cosmic-300">
                  {language === 'ru' ? '–†–∞—Å—á–µ—Ç —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤...' : 'Calculating transits...'}
                </p>
              </div>
            )}

            {transitsError && (
              <div className="cosmic-card text-center">
                <div className="w-16 h-16 bg-gradient-to-br from-red-500 to-red-700 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Star className="w-8 h-8 text-white" />
                </div>
                <p className="text-red-400">
                  {transitsError}
                </p>
                <button
                  onClick={calculateTransits}
                  className="mt-4 bg-pink-600 hover:bg-pink-700 text-white px-4 py-2 rounded transition-colors"
                >
                  {language === 'ru' ? '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞' : 'Try Again'}
                </button>
              </div>
            )}

            {/* –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ */}
            {transitsData && (
              <div className="space-y-6">
                {/* –ö–∞—Ä—Ç–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –ø–ª–∞–Ω–µ—Ç (—Ç—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞) */}
                {transitsData.currentChart && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.1 }}
                    className="w-full"
                  >
                    <div className="cosmic-card mb-4">
                      <h4 className="cosmic-subtitle text-lg mb-2">
                        {language === 'ru' ? '–ö–∞—Ä—Ç–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤' : 'Transit Chart'}
                      </h4>
                      <p className="text-sm text-cosmic-400">
                        {language === 'ru' 
                          ? '–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É' 
                          : 'Current planetary positions for selected date'}
                      </p>
                    </div>
                    <NatalChart 
                      chartData={transitsData.currentChart}
                    />
                  </motion.div>
                )}

                {/* –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 }}
                  className="cosmic-card"
                >
                  <h4 className="cosmic-subtitle text-lg mb-4">
                    {language === 'ru' ? '–û–±—â–∏–π –æ–±–∑–æ—Ä' : 'Overview'}
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-cosmic-200">
                        {transitsData.totalTransits}
                      </div>
                      <div className="text-sm text-cosmic-400">
                        {language === 'ru' ? '–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤' : 'Total Transits'}
                      </div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-yellow-400">
                        {transitsData.summary.majorTransits}
                      </div>
                      <div className="text-sm text-cosmic-400">
                        {language === 'ru' ? '–í–∞–∂–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤' : 'Major Transits'}
                      </div>
                    </div>
                    <div className="text-center">
                      <div className={`text-lg font-semibold ${
                        transitsData.summary.overallInfluence === 'favorable' || transitsData.summary.overallInfluence === 'positive' || transitsData.summary.overallInfluence === 'very_positive'
                          ? 'text-green-400' 
                          : transitsData.summary.overallInfluence === 'challenging' || transitsData.summary.overallInfluence === 'very_challenging'
                          ? 'text-red-400'
                          : 'text-yellow-400'
                      }`}>
                        {language === 'ru' 
                          ? (transitsData.summary.overallInfluence === 'favorable' || transitsData.summary.overallInfluence === 'positive' || transitsData.summary.overallInfluence === 'very_positive' ? '–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π' 
                             : transitsData.summary.overallInfluence === 'challenging' || transitsData.summary.overallInfluence === 'very_challenging' ? '–°–ª–æ–∂–Ω—ã–π' 
                             : '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π')
                          : (typeof transitsData.summary.overallInfluence === 'string' ? transitsData.summary.overallInfluence : 'neutral')
                        }
                      </div>
                      <div className="text-sm text-cosmic-400">
                        {language === 'ru' ? '–û–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ' : 'Overall Influence'}
                      </div>
                    </div>
                  </div>
                </motion.div>

                {/* –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã */}
                {transitsData.summary.keyThemes && transitsData.summary.keyThemes.length > 0 && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.3 }}
                    className="cosmic-card"
                  >
                    <h4 className="cosmic-subtitle text-lg mb-4">
                      {language === 'ru' ? '–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã' : 'Key Themes'}
                    </h4>
                    <div className="flex flex-wrap gap-2">
                      {transitsData.summary.keyThemes.map((theme: string, index: number) => (
                        <span
                          key={index}
                          className="bg-pink-600/20 text-pink-300 px-3 py-1 rounded-full text-sm"
                        >
                          {theme}
                        </span>
                      ))}
                    </div>
                  </motion.div>
                )}

                {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
                {transitsData.summary.recommendations && transitsData.summary.recommendations.length > 0 && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.4 }}
                    className="cosmic-card"
                  >
                    <h4 className="cosmic-subtitle text-lg mb-4">
                      {language === 'ru' ? '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' : 'Recommendations'}
                    </h4>
                    <ul className="space-y-2">
                      {transitsData.summary.recommendations.map((recommendation: string, index: number) => (
                        <li key={index} className="flex items-start gap-2">
                          <div className="w-2 h-2 bg-pink-400 rounded-full mt-2 flex-shrink-0" />
                          <span className="text-cosmic-300">{recommendation}</span>
                        </li>
                      ))}
                    </ul>
                  </motion.div>
                )}

                {/* –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ */}
                {transitsData.transits && transitsData.transits.length > 0 && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.5 }}
                    className="cosmic-card"
                  >
                    <h4 className="cosmic-subtitle text-lg mb-4">
                      {language === 'ru' ? '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã' : 'Active Transits'}
                    </h4>
                    <div className="space-y-3">
                      {transitsData.transits.slice(0, 10).map((transit: any, index: number) => {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∏—Ç–µ
                        const transitPlanet = transit.planet || ''
                        const aspectType = transit.aspect?.type || ''
                        const targetName = transit.description?.split(' —Å ')[1]?.split('.')[0] || ''
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å —Ç—Ä–∞–Ω–∑–∏—Ç–∞ (–ø–ª–∞–Ω–µ—Ç–∞ –∏–ª–∏ –¥–æ–º)
                        let targetDisplay = ''
                        if (targetName.includes('–î–æ–º')) {
                          const houseNumber = targetName.match(/\d+/)?.[0]
                          targetDisplay = houseNumber ? `${houseNumber}-–π –¥–æ–º` : targetName
                        } else {
                          targetDisplay = translatePlanetName(targetName)
                        }
                        
                        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Å–ø–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        const aspectDisplayName = translateAspectName(aspectType)
                        
                        return (
                        <div key={index} className="p-4 bg-space-800/50 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <div className="font-semibold text-cosmic-200">
                              {translatePlanetName(transitPlanet)} {aspectDisplayName} {targetDisplay}
                            </div>
                            <div className={`px-2 py-1 rounded text-xs font-medium ${
                              aspectType === 'conjunction' ? 'bg-yellow-600/20 text-yellow-300' :
                              aspectType === 'opposition' ? 'bg-red-600/20 text-red-300' :
                              aspectType === 'trine' ? 'bg-green-600/20 text-green-300' :
                              aspectType === 'square' ? 'bg-orange-600/20 text-orange-300' :
                              'bg-blue-600/20 text-blue-300'
                            }`}>
                              {aspectDisplayName}
                            </div>
                          </div>
                          <div className="space-y-2">
                            {transit.influence?.areas && Array.isArray(transit.influence.areas) && (
                              <p className="text-sm text-cosmic-400">
                                <span className="font-medium">–û–±–ª–∞—Å—Ç–∏ –≤–ª–∏—è–Ω–∏—è:</span> {transit.influence.areas.join(', ')}
                              </p>
                            )}
                            {transit.influence?.advice && typeof transit.influence.advice === 'string' && (
                              <p className="text-sm text-cosmic-300">
                                {transit.influence.advice}
                              </p>
                            )}
                            {transit.influence?.duration && typeof transit.influence.duration === 'string' && (
                              <p className="text-xs text-cosmic-500">
                                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {transit.influence.duration}
                              </p>
                            )}
                          </div>
                        </div>
                        )
                      })}
                    </div>
                  </motion.div>
                )}
              </div>
            )}
          </div>
        )}
      </motion.div>
    </div>
  )
}